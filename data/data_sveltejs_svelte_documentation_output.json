[
  {
    "id": "ef9bfaac-ed62-4c5f-87b7-9378ef1081f7-1",
    "text": "<script>\n\timport { quintOut } from 'svelte/easing';\n\timport { crossfade } from 'svelte/transition';\n\n\tconst [send, receive] = crossfade({\n\t\tduration: (d) => Math.sqrt(d * 200),\n\n\t\tfallback(node, params) {\n\t\t\tconst style = getComputedStyle(node);\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\n\n\t\t\treturn {\n\t\t\t\tduration: 600,\n\t\t\t\teasing: quintOut,\n\t\t\t\tcss: (t) => `\n\t\t\t\t\ttransform: ${transform} scale(${t});\n\t\t\t\t\topacity: ${t}\n\t\t\t\t`\n\t\t\t};\n\t\t}\n\t});\n\n\tlet uid = 1;\n\n\tlet todos = [\n\t\t{ id: uid++, done: false, description: 'write some docs' },\n\t\t{ id: uid++, done: false, description: 'start writing blog post' },\n\t\t{ id: uid++, done: true, description: 'buy some milk' },\n\t\t{ id: uid++, done: false, description: 'mow the lawn' },\n\t\t{ id: uid++, done: false, description: 'feed the turtle' },\n\t\t{ id: uid++, done: false, description: 'fix some bugs' }\n\t];\n\n\tfunction add(input) {\n\t\tconst todo = {\n\t\t\tid: uid++,\n\t\t\tdone: false,\n\t\t\tdescription: input.value\n\t\t};\n\n\t\ttodos = [todo, ...todos];\n\t\tinput.value = '';\n\t}\n\n\tfunction remove(todo) {\n\t\ttodos = todos.filter((t) => t !== todo);\n\t}\n\n\tfunction mark(todo, done) {\n\t\ttodo.done = done;\n\t\tremove(todo);\n\t\ttodos = todos.concat(todo);\n\t}\n</script>\n\n<div class=\"board\">\n\t<input\n\t\tplaceholder=\"what needs to be done?\"\n\t\ton:keydown={(e) => e.key === 'Enter' && add(e.target)}\n\t/>\n\n\t<div class=\"left\">\n\t\t<h2>todo</h2>\n\t\t{#each todos.filter((t) => !t.done) as todo (todo.id)}\n\t\t\t<label in:receive={{ key: todo.id }} out:send={{ key: todo.id }}>\n\t\t\t\t<input type=\"checkbox\" on:change={() => mark(todo, true)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n\n\t<div class=\"right\">\n\t\t<h2>done</h2>\n\t\t{#each todos.filter((t) => t.done) as todo (todo.id)}\n\t\t\t<label class=\"done\" in:receive={{ key: todo.id }} out:send={{ key: todo.id }}>\n\t\t\t\t<input type=\"checkbox\" checked on:change={() => mark(todo, false)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.board {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgrid-gap: 1em;\n\t\tmax-width: 36em;\n\t\tmargin: 0 auto;\n\t}\n\n\t.board > input {\n\t\tfont-size: 1.4em;\n\t\tgrid-column: 1/3;\n\t}\n\n\th2 {\n\t\tfont-size: 2em;\n\t\tfont-weight: 200;\n\t\tuser-select: none;\n\t\tmargin: 0 0 0.5em 0;\n\t}\n\n\tlabel {\n\t\tdisplay: block;\n\t\tposition: relative;\n\t\tline-height: 1.2;\n\t\tpadding: 0.5em 2.5em 0.5em 2em;\n\t\tmargin: 0 0 0.5em 0;\n\t\tborder-radius: 2px;\n\t\tuser-select: none;\n\t\tborder: 1px solid hsl(240, 8%, 70%);\n\t\tbackground-color: hsl(240, 8%, 93%);\n\t\tcolor: #333;\n\t}\n\n\tinput[type='checkbox'] {\n\t\tposition: absolute;\n\t\tleft: 0.5em;\n\t\ttop: 0.6em;\n\t\tmargin: 0;\n\t}\n\n\t.done {\n\t\tborder: 1px solid hsl(240, 8%, 90%);\n\t\tbackground-color: hsl(240, 8%, 98%);\n\t}\n\n\tbutton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0.2em;\n\t\twidth: 2em;\n\t\theight: 100%;\n\t\tbackground: no-repeat 50% 50%\n\t\t\turl(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpa",
    "source": "file",
    "ext": "svelte",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/tutorial/11-animations/01-animate/app-a/App.svelte",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "df04f8ff-bf7d-414a-8926-d9412daab37a-1",
    "text": "<script>\n\timport { quintOut } from 'svelte/easing';\n\timport { crossfade } from 'svelte/transition';\n\timport { flip } from 'svelte/animate';\n\n\tconst [send, receive] = crossfade({\n\t\tduration: (d) => Math.sqrt(d * 200),\n\n\t\tfallback(node, params) {\n\t\t\tconst style = getComputedStyle(node);\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\n\n\t\t\treturn {\n\t\t\t\tduration: 600,\n\t\t\t\teasing: quintOut,\n\t\t\t\tcss: (t) => `\n\t\t\t\t\ttransform: ${transform} scale(${t});\n\t\t\t\t\topacity: ${t}\n\t\t\t\t`\n\t\t\t};\n\t\t}\n\t});\n\n\tlet uid = 1;\n\n\tlet todos = [\n\t\t{ id: uid++, done: false, description: 'write some docs' },\n\t\t{ id: uid++, done: false, description: 'start writing blog post' },\n\t\t{ id: uid++, done: true, description: 'buy some milk' },\n\t\t{ id: uid++, done: false, description: 'mow the lawn' },\n\t\t{ id: uid++, done: false, description: 'feed the turtle' },\n\t\t{ id: uid++, done: false, description: 'fix some bugs' }\n\t];\n\n\tfunction add(input) {\n\t\tconst todo = {\n\t\t\tid: uid++,\n\t\t\tdone: false,\n\t\t\tdescription: input.value\n\t\t};\n\n\t\ttodos = [todo, ...todos];\n\t\tinput.value = '';\n\t}\n\n\tfunction remove(todo) {\n\t\ttodos = todos.filter((t) => t !== todo);\n\t}\n\n\tfunction mark(todo, done) {\n\t\ttodo.done = done;\n\t\tremove(todo);\n\t\ttodos = todos.concat(todo);\n\t}\n</script>\n\n<div class=\"board\">\n\t<input\n\t\tplaceholder=\"what needs to be done?\"\n\t\ton:keydown={(e) => e.key === 'Enter' && add(e.target)}\n\t/>\n\n\t<div class=\"left\">\n\t\t<h2>todo</h2>\n\t\t{#each todos.filter((t) => !t.done) as todo (todo.id)}\n\t\t\t<label in:receive={{ key: todo.id }} out:send={{ key: todo.id }} animate:flip>\n\t\t\t\t<input type=\"checkbox\" on:change={() => mark(todo, true)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n\n\t<div class=\"right\">\n\t\t<h2>done</h2>\n\t\t{#each todos.filter((t) => t.done) as todo (todo.id)}\n\t\t\t<label class=\"done\" in:receive={{ key: todo.id }} out:send={{ key: todo.id }} animate:flip>\n\t\t\t\t<input type=\"checkbox\" checked on:change={() => mark(todo, false)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.board {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgrid-gap: 1em;\n\t\tmax-width: 36em;\n\t\tmargin: 0 auto;\n\t}\n\n\t.board > input {\n\t\tfont-size: 1.4em;\n\t\tgrid-column: 1/3;\n\t}\n\n\th2 {\n\t\tfont-size: 2em;\n\t\tfont-weight: 200;\n\t\tuser-select: none;\n\t\tmargin: 0 0 0.5em 0;\n\t}\n\n\tlabel {\n\t\tdisplay: block;\n\t\tposition: relative;\n\t\tline-height: 1.2;\n\t\tpadding: 0.5em 2.5em 0.5em 2em;\n\t\tmargin: 0 0 0.5em 0;\n\t\tborder-radius: 2px;\n\t\tuser-select: none;\n\t\tborder: 1px solid hsl(240, 8%, 70%);\n\t\tbackground-color: hsl(240, 8%, 93%);\n\t\tcolor: #333;\n\t}\n\n\tinput[type='checkbox'] {\n\t\tposition: absolute;\n\t\tleft: 0.5em;\n\t\ttop: 0.6em;\n\t\tmargin: 0;\n\t}\n\n\t.done {\n\t\tborder: 1px solid hsl(240, 8%, 90%);\n\t\tbackground-color: hsl(240, 8%, 98%);\n\t}\n\n\tbutton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0.2em;\n\t\twidth: 2em;\n\t\theight: 100%;\n\t\tbackground: no-repeat 50% 50%\n\t\t\turl(\"data:image/svg+xml,%3C",
    "source": "file",
    "ext": "svelte",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/tutorial/11-animations/01-animate/app-b/App.svelte",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "125aebb4-f439-4975-a4a1-a239fba7b272-1",
    "text": "---\ntitle: setContext and getContext\n---\n\nThe context API provides a mechanism for components to 'talk' to each other without passing around data and functions as props, or dispatching lots of events. It's an advanced feature, but a useful one.\n\nTake this example app using a [Mapbox GL](https://docs.mapbox.com/mapbox-gl-js/overview/) map. We'd like to display the markers, using the `<MapMarker>` component, but we don't want to have to pass around a reference to the underlying Mapbox instance as a prop on each component.\n\nThere are two halves to the context API \u2014 `setContext` and `getContext`. If a component calls `setContext(key, context)`, then any _child_ component can retrieve the context with `const context = getContext(key)`.\n\nLet's set the context first. In `Map.svelte`, import `setContext` from `svelte` and `key` from `mapbox.js` and call `setContext`:\n\n```js\nimport { onDestroy, setContext } from 'svelte';\nimport { mapbox, key } from './mapbox.js';\n\nsetContext(key, {\n\tgetMap: () => map\n});\n```\n\nThe context object can be anything you like. Like [lifecycle functions](/tutorial/onmount), `setContext` and `getContext` must be called during component initialisation. Calling it afterwards - for example inside `onMount` - will throw an error. In this example, since `map` isn't created until the component has mounted, our context object contains a `getMap` function rather than `map` itself.\n\nOn the other side of the equation, in `MapMarker.svelte`, we can now get a reference to the Mapbox instance:\n\n```js\nimport { getContext } from 'svelte';\nimport { mapbox, key } from './mapbox.js';\n\nconst { getMap } = getContext(key);\nconst map = getMap();\n```\n\nThe markers can now add themselves to the map.\n\n> A more finished version of `<MapMarker>` would also handle removal and prop changes, but we're only demonstrating context here.\n\n## Context keys\n\nIn `mapbox.js` you'll see this line:\n\n```js\nconst key = Symbol();\n```\n\nTechnically, we can use any value as a key \u2014 we could do `setContext('mapbox', ...)` for example. The downside of using a string is that different component libraries might accidentally use the same one; using [symbols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol), on the other hand, means that the keys are guaranteed not to conflict in any circumstance, even when you have multiple different contexts operating across many component layers, since a symbol is essentially a unique identifier.\n\n## Contexts vs. stores\n\nContexts and stores seem similar. They differ in that stores are available to _any_ part of an app, while a context is only available to _a component and its descendants_. This can be helpful if you want to use several instances of a component without the state of one interfering with the state of the others.\n\nIn fact, you might use the two together. Since context is not reactive, values that change over time should be represented as stores:\n\n```js\nconst { these, are, stores } = getContext(",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/tutorial/15-context/01-context-api/text.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "a681fe88-7ae4-438b-bd74-79fab0918536-1",
    "text": "<script>\n\timport { quintOut } from 'svelte/easing';\n\timport { crossfade } from 'svelte/transition';\n\n\tconst [send, receive] = crossfade({\n\t\tduration: (d) => Math.sqrt(d * 200),\n\n\t\tfallback(node, params) {\n\t\t\tconst style = getComputedStyle(node);\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\n\n\t\t\treturn {\n\t\t\t\tduration: 600,\n\t\t\t\teasing: quintOut,\n\t\t\t\tcss: (t) => `\n\t\t\t\t\ttransform: ${transform} scale(${t});\n\t\t\t\t\topacity: ${t}\n\t\t\t\t`\n\t\t\t};\n\t\t}\n\t});\n\n\tlet uid = 1;\n\n\tlet todos = [\n\t\t{ id: uid++, done: false, description: 'write some docs' },\n\t\t{ id: uid++, done: false, description: 'start writing blog post' },\n\t\t{ id: uid++, done: true, description: 'buy some milk' },\n\t\t{ id: uid++, done: false, description: 'mow the lawn' },\n\t\t{ id: uid++, done: false, description: 'feed the turtle' },\n\t\t{ id: uid++, done: false, description: 'fix some bugs' }\n\t];\n\n\tfunction add(input) {\n\t\tconst todo = {\n\t\t\tid: uid++,\n\t\t\tdone: false,\n\t\t\tdescription: input.value\n\t\t};\n\n\t\ttodos = [todo, ...todos];\n\t\tinput.value = '';\n\t}\n\n\tfunction remove(todo) {\n\t\ttodos = todos.filter((t) => t !== todo);\n\t}\n\n\tfunction mark(todo, done) {\n\t\ttodo.done = done;\n\t\tremove(todo);\n\t\ttodos = todos.concat(todo);\n\t}\n</script>\n\n<div class=\"board\">\n\t<input\n\t\tplaceholder=\"what needs to be done?\"\n\t\ton:keydown={(e) => e.key === 'Enter' && add(e.target)}\n\t/>\n\n\t<div class=\"left\">\n\t\t<h2>todo</h2>\n\t\t{#each todos.filter((t) => !t.done) as todo (todo.id)}\n\t\t\t<label>\n\t\t\t\t<input type=\"checkbox\" on:change={() => mark(todo, true)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n\n\t<div class=\"right\">\n\t\t<h2>done</h2>\n\t\t{#each todos.filter((t) => t.done) as todo (todo.id)}\n\t\t\t<label class=\"done\">\n\t\t\t\t<input type=\"checkbox\" checked on:change={() => mark(todo, false)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.board {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgrid-gap: 1em;\n\t\tmax-width: 36em;\n\t\tmargin: 0 auto;\n\t}\n\n\t.board > input {\n\t\tfont-size: 1.4em;\n\t\tgrid-column: 1/3;\n\t}\n\n\th2 {\n\t\tfont-size: 2em;\n\t\tfont-weight: 200;\n\t\tuser-select: none;\n\t\tmargin: 0 0 0.5em 0;\n\t}\n\n\tlabel {\n\t\tdisplay: block;\n\t\tposition: relative;\n\t\tline-height: 1.2;\n\t\tpadding: 0.5em 2.5em 0.5em 2em;\n\t\tmargin: 0 0 0.5em 0;\n\t\tborder-radius: 2px;\n\t\tuser-select: none;\n\t\tborder: 1px solid hsl(240, 8%, 70%);\n\t\tbackground-color: hsl(240, 8%, 93%);\n\t\tcolor: #333;\n\t}\n\n\tinput[type='checkbox'] {\n\t\tposition: absolute;\n\t\tleft: 0.5em;\n\t\ttop: 0.6em;\n\t\tmargin: 0;\n\t}\n\n\t.done {\n\t\tborder: 1px solid hsl(240, 8%, 90%);\n\t\tbackground-color: hsl(240, 8%, 98%);\n\t}\n\n\tbutton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0.2em;\n\t\twidth: 2em;\n\t\theight: 100%;\n\t\tbackground: no-repeat 50% 50%\n\t\t\turl(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23676778' d='M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M1",
    "source": "file",
    "ext": "svelte",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/tutorial/10-transitions/08-deferred-transitions/app-a/App.svelte",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7684a3ef-5e57-48de-9bdc-27da309acb87-1",
    "text": "<script>\n\timport { quintOut } from 'svelte/easing';\n\timport { crossfade } from 'svelte/transition';\n\n\tconst [send, receive] = crossfade({\n\t\tduration: (d) => Math.sqrt(d * 200),\n\n\t\tfallback(node, params) {\n\t\t\tconst style = getComputedStyle(node);\n\t\t\tconst transform = style.transform === 'none' ? '' : style.transform;\n\n\t\t\treturn {\n\t\t\t\tduration: 600,\n\t\t\t\teasing: quintOut,\n\t\t\t\tcss: (t) => `\n\t\t\t\t\ttransform: ${transform} scale(${t});\n\t\t\t\t\topacity: ${t}\n\t\t\t\t`\n\t\t\t};\n\t\t}\n\t});\n\n\tlet uid = 1;\n\n\tlet todos = [\n\t\t{ id: uid++, done: false, description: 'write some docs' },\n\t\t{ id: uid++, done: false, description: 'start writing blog post' },\n\t\t{ id: uid++, done: true, description: 'buy some milk' },\n\t\t{ id: uid++, done: false, description: 'mow the lawn' },\n\t\t{ id: uid++, done: false, description: 'feed the turtle' },\n\t\t{ id: uid++, done: false, description: 'fix some bugs' }\n\t];\n\n\tfunction add(input) {\n\t\tconst todo = {\n\t\t\tid: uid++,\n\t\t\tdone: false,\n\t\t\tdescription: input.value\n\t\t};\n\n\t\ttodos = [todo, ...todos];\n\t\tinput.value = '';\n\t}\n\n\tfunction remove(todo) {\n\t\ttodos = todos.filter((t) => t !== todo);\n\t}\n\n\tfunction mark(todo, done) {\n\t\ttodo.done = done;\n\t\tremove(todo);\n\t\ttodos = todos.concat(todo);\n\t}\n</script>\n\n<div class=\"board\">\n\t<input\n\t\tplaceholder=\"what needs to be done?\"\n\t\ton:keydown={(e) => e.key === 'Enter' && add(e.target)}\n\t/>\n\n\t<div class=\"left\">\n\t\t<h2>todo</h2>\n\t\t{#each todos.filter((t) => !t.done) as todo (todo.id)}\n\t\t\t<label in:receive={{ key: todo.id }} out:send={{ key: todo.id }}>\n\t\t\t\t<input type=\"checkbox\" on:change={() => mark(todo, true)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n\n\t<div class=\"right\">\n\t\t<h2>done</h2>\n\t\t{#each todos.filter((t) => t.done) as todo (todo.id)}\n\t\t\t<label class=\"done\" in:receive={{ key: todo.id }} out:send={{ key: todo.id }}>\n\t\t\t\t<input type=\"checkbox\" checked on:change={() => mark(todo, false)} />\n\t\t\t\t{todo.description}\n\t\t\t\t<button on:click={() => remove(todo)}>remove</button>\n\t\t\t</label>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.board {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr;\n\t\tgrid-gap: 1em;\n\t\tmax-width: 36em;\n\t\tmargin: 0 auto;\n\t}\n\n\t.board > input {\n\t\tfont-size: 1.4em;\n\t\tgrid-column: 1/3;\n\t}\n\n\th2 {\n\t\tfont-size: 2em;\n\t\tfont-weight: 200;\n\t\tuser-select: none;\n\t\tmargin: 0 0 0.5em 0;\n\t}\n\n\tlabel {\n\t\tdisplay: block;\n\t\tposition: relative;\n\t\tline-height: 1.2;\n\t\tpadding: 0.5em 2.5em 0.5em 2em;\n\t\tmargin: 0 0 0.5em 0;\n\t\tborder-radius: 2px;\n\t\tuser-select: none;\n\t\tborder: 1px solid hsl(240, 8%, 70%);\n\t\tbackground-color: hsl(240, 8%, 93%);\n\t\tcolor: #333;\n\t}\n\n\tinput[type='checkbox'] {\n\t\tposition: absolute;\n\t\tleft: 0.5em;\n\t\ttop: 0.6em;\n\t\tmargin: 0;\n\t}\n\n\t.done {\n\t\tborder: 1px solid hsl(240, 8%, 90%);\n\t\tbackground-color: hsl(240, 8%, 98%);\n\t}\n\n\tbutton {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0.2em;\n\t\twidth: 2em;\n\t\theight: 100%;\n\t\tbackground: no-repeat 50% 50%\n\t\t\turl(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpa",
    "source": "file",
    "ext": "svelte",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/tutorial/10-transitions/08-deferred-transitions/app-b/App.svelte",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "68a3c4ea-0710-4820-b8a3-b5c79063b065-1",
    "text": "---\ntitle: 'svelte/store'\n---\n\nThe `svelte/store` module exports functions for creating [readable](/docs/svelte-store#readable), [writable](/docs/svelte-store#writable) and [derived](/docs/svelte-store#derived) stores.\n\nKeep in mind that you don't _have_ to use these functions to enjoy the [reactive `$store` syntax](/docs/svelte-components#script-4-prefix-stores-with-$-to-access-their-values) in your components. Any object that correctly implements `.subscribe`, unsubscribe, and (optionally) `.set` is a valid store, and will work both with the special syntax, and with Svelte's built-in [`derived` stores](/docs/svelte-store#derived).\n\nThis makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the [store contract](/docs/svelte-components#script-4-prefix-stores-with-$-to-access-their-values) to see what a correct implementation looks like.\n\n## `writable`\n\n> EXPORT_SNIPPET: svelte/store#writable\n\nFunction that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional `set` and `update` methods.\n\n`set` is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.\n\n`update` is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0);\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\ncount.set(1); // logs '1'\n\ncount.update((n) => n + 1); // logs '2'\n```\n\nIf a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a `set` function which changes the value of the store, and an `update` function which works like the `update` method on the store, taking a callback to calculate the store's new value from its old value. It must return a `stop` function that is called when the subscriber count goes from one to zero.\n\n```js\n/// file: store.js\nimport { writable } from 'svelte/store';\n\nconst count = writable(0, () => {\n\tconsole.log('got a subscriber');\n\treturn () => console.log('no more subscribers');\n});\n\ncount.set(1); // does nothing\n\nconst unsubscribe = count.subscribe((value) => {\n\tconsole.log(value);\n}); // logs 'got a subscriber', then '1'\n\nunsubscribe(); // logs 'no more subscribers'\n```\n\nNote that the value of a `writable` is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the `localStorage`.\n\n## `readable`\n\n> EXPORT_SNIPPET: svelte/store#readable\n\nCreates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to `readable` is the same as the second",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/02-svelte-store.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "68a3c4ea-0710-4820-b8a3-b5c79063b065-2",
    "text": "IPPET: svelte/store#readable\n\nCreates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to `readable` is the same as the second argument to `writable`.\n\n```js\n<!--- file: App.svelte --->\n// ---cut---\nimport { readable } from 'svelte/store';\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\treturn () => clearInterval(interval);\n});\n```\n\n## `derived`\n\n> EXPORT_SNIPPET: svelte/store#derived\n\nDerives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.\n\nIn the simplest version, `derived` takes a single store, and the callback returns a derived value.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst doubled = derived(a, ($a) => $a * 2);\n```\n\nThe callback can set a value asynchronously by accepting a second argument, `set`, and an optional third argument, `update`, calling either or both of them when appropriate.\n\nIn this case, you can also pass a third argument to `derived` \u2014 the initial value of the derived store before `set` or `update` is first called. If no initial value is specified, the store's initial value will be `undefined`.\n\n```js\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst a: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// @errors: 18046 2769 7006\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst delayed = derived(a, ($a, set) => {\n\tsetTimeout(() => set($a), 1000);\n}, 2000);\n\nconst delayedIncrement = derived(a, ($a, set, update) => {\n\tset($a);\n\tsetTimeout(() => update(x => x + 1), 1000);\n\t// every time $a produces a value, this produces two\n\t// values, $a immediately and then $a + 1 a second later\n});\n```\n\nIf you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.\n\n```js\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/store';\n\ndeclare global {\n\tconst frequency: Writable<number>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nimport { derived } from 'svelte/store';\n\nconst tick = derived(\n\tfrequency,\n\t($frequency, set) => {\n\t\tconst interval = setInterval(() => {\n\t\t\tset(Date.now());\n\t\t}, 1000 / $frequency);\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t},\n\t2000\n);\n```\n\nIn both cases, an array of arguments can be passed as the first argument instead of a single store.\n\n```ts\n// @filename: ambient.d.ts\nimport { type Writable } from 'svelte/sto",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/02-svelte-store.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "bf0eca75-e015-48cc-83fb-f019cb2b0a80-1",
    "text": "---\ntitle: svelte\n---\n\nThe `svelte` package exposes [lifecycle functions](https://learn.svelte.dev/tutorial/onmount) and the [context API](https://learn.svelte.dev/tutorial/context-api).\n\n## `onMount`\n\n> EXPORT_SNIPPET: svelte#onMount\n\nThe `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live _inside_ the component; it can be called from an external module).\n\n`onMount` does not run inside a [server-side component](/docs/server-side-component-api).\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n```\n\nIf a function is returned from `onMount`, it will be called when the component is unmounted.\n\n```svelte\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n```\n\n> This behaviour will only work when the function passed to `onMount` _synchronously_ returns a value. `async` functions always return a `Promise`, and as such cannot _synchronously_ return a function.\n\n## `beforeUpdate`\n\n> EXPORT_SNIPPET: svelte#beforeUpdate\n\nSchedules a callback to run immediately before the component is updated after any state change.\n\n> The first time the callback runs will be before the initial `onMount`\n\n```svelte\n<script>\n\timport { beforeUpdate } from 'svelte';\n\n\tbeforeUpdate(() => {\n\t\tconsole.log('the component is about to update');\n\t});\n</script>\n```\n\n## `afterUpdate`\n\n> EXPORT_SNIPPET: svelte#afterUpdate\n\nSchedules a callback to run immediately after the component has been updated.\n\n> The first time the callback runs will be after the initial `onMount`\n\n```svelte\n<script>\n\timport { afterUpdate } from 'svelte';\n\n\tafterUpdate(() => {\n\t\tconsole.log('the component just updated');\n\t});\n</script>\n```\n\n## `onDestroy`\n\n> EXPORT_SNIPPET: svelte#onDestroy\n\nSchedules a callback to run immediately before the component is unmounted.\n\nOut of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the only one that runs inside a server-side component.\n\n```svelte\n<script>\n\timport { onDestroy } from 'svelte';\n\n\tonDestroy(() => {\n\t\tconsole.log('the component is being destroyed');\n\t});\n</script>\n```\n\n## `tick`\n\n> EXPORT_SNIPPET: svelte#tick\n\nReturns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.\n\n```svelte\n<script>\n\timport { beforeUpdate, tick } from 'svelte';\n\n\tbeforeUpdate(async () => {\n\t\tconsole.log('the component is about to update');\n\t\tawait tick();\n\t\tconsole.log('the component just updated');\n\t});\n</script>\n```\n\n## `setContext`\n\n> EXPORT_SNIPPET: svelte#setContext\n\nAssociates an arbitrary `context` object with the current component and the specified `key` and returns that object. The context is then available to children of the component (including slot",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/01-svelte.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "bf0eca75-e015-48cc-83fb-f019cb2b0a80-2",
    "text": "Context\n\nAssociates an arbitrary `context` object with the current component and the specified `key` and returns that object. The context is then available to children of the component (including slotted content) with `getContext`.\n\nLike lifecycle functions, this must be called during component initialisation.\n\n```svelte\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('answer', 42);\n</script>\n```\n\n> Context is not inherently reactive. If you need reactive values in context then you can pass a store into context, which _will_ be reactive.\n\n## `getContext`\n\n> EXPORT_SNIPPET: svelte#getContext\n\nRetrieves the context that belongs to the closest parent component with the specified `key`. Must be called during component initialisation.\n\n```svelte\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst answer = getContext('answer');\n</script>\n```\n\n## `hasContext`\n\n> EXPORT_SNIPPET: svelte#hasContext\n\nChecks whether a given `key` has been set in the context of a parent component. Must be called during component initialisation.\n\n```svelte\n<script>\n\timport { hasContext } from 'svelte';\n\n\tif (hasContext('answer')) {\n\t\t// do something\n\t}\n</script>\n```\n\n## `getAllContexts`\n\n> EXPORT_SNIPPET: svelte#getAllContexts\n\nRetrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.\n\n```svelte\n<script>\n\timport { getAllContexts } from 'svelte';\n\n\tconst contexts = getAllContexts();\n</script>\n```\n\n## `createEventDispatcher`\n\n> EXPORT_SNIPPET: svelte#createEventDispatcher\n\nCreates an event dispatcher that can be used to dispatch [component events](/docs/component-directives#on-eventname). Event dispatchers are functions that can take two arguments: `name` and `detail`.\n\nComponent events created with `createEventDispatcher` create a [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent). These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture). The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail) property and can contain any type of data.\n\n```svelte\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>\n```\n\nEvents dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the `detail` property of the event object.\n\n```svelte\n<script>\n\tfunction callbackFunction(event) {\n\t\tconsole.log(`Notify fired! Detail: ${event.detail}`);\n\t}\n</script>\n\n<Child on:notify={callbackFunction} />\n```\n\nEvents can be cancelable by passing a third parameter to the dispatch function. The function returns `false` if the event is ca",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/01-svelte.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7146b96a-2999-4358-bb1f-98379552804a-1",
    "text": "---\ntitle: 'svelte/transition'\n---\n\nThe `svelte/transition` module exports seven functions: `fade`, `blur`, `fly`, `slide`, `scale`, `draw` and `crossfade`. They are for use with Svelte [`transitions`](/docs/element-directives#transition-fn).\n\n## `fade`\n\n> EXPORT_SNIPPET: svelte/transition#fade\n\n```svelte\ntransition:fade={params}\n```\n\n```svelte\nin:fade={params}\n```\n\n```svelte\nout:fade={params}\n```\n\nAnimates the opacity of an element from 0 to the current opacity for `in` transitions and from the current opacity to 0 for `out` transitions.\n\n`fade` accepts the following parameters:\n\n- `delay` (`number`, default 0) \u2014 milliseconds before starting\n- `duration` (`number`, default 400) \u2014 milliseconds the transition lasts\n- `easing` (`function`, default `linear`) \u2014 an [easing function](/docs/svelte-easing)\n\nYou can see the `fade` transition in action in the [transition tutorial](https://learn.svelte.dev/tutorial/transition).\n\n```svelte\n<script>\n\timport { fade } from 'svelte/transition';\n</script>\n\n{#if condition}\n\t<div transition:fade={{ delay: 250, duration: 300 }}>fades in and out</div>\n{/if}\n```\n\n## `blur`\n\n> EXPORT_SNIPPET: svelte/transition#blur\n\n```svelte\ntransition:blur={params}\n```\n\n```svelte\nin:blur={params}\n```\n\n```svelte\nout:blur={params}\n```\n\nAnimates a `blur` filter alongside an element's opacity.\n\n`blur` accepts the following parameters:\n\n- `delay` (`number`, default 0) \u2014 milliseconds before starting\n- `duration` (`number`, default 400) \u2014 milliseconds the transition lasts\n- `easing` (`function`, default `cubicInOut`) \u2014 an [easing function](/docs/svelte-easing)\n- `opacity` (`number`, default 0) - the opacity value to animate out to and in from\n- `amount` (`number | string`, default 5) - the size of the blur. Supports css units (for example: `\"4rem\"`). The default unit is `px`\n\n```svelte\n<script>\n\timport { blur } from 'svelte/transition';\n</script>\n\n{#if condition}\n\t<div transition:blur={{ amount: 10 }}>fades in and out</div>\n{/if}\n```\n\n## `fly`\n\n> EXPORT_SNIPPET: svelte/transition#fly\n\n```svelte\ntransition:fly={params}\n```\n\n```svelte\nin:fly={params}\n```\n\n```svelte\nout:fly={params}\n```\n\nAnimates the x and y positions and the opacity of an element. `in` transitions animate from the provided values, passed as parameters to the element's default values. `out` transitions animate from the element's default values to the provided values.\n\n`fly` accepts the following parameters:\n\n- `delay` (`number`, default 0) \u2014 milliseconds before starting\n- `duration` (`number`, default 400) \u2014 milliseconds the transition lasts\n- `easing` (`function`, default `cubicOut`) \u2014 an [easing function](/docs/svelte-easing)\n- `x` (`number | string`, default 0) - the x offset to animate out to and in from\n- `y` (`number | string`, default 0) - the y offset to animate out to and in from\n- `opacity` (`number`, default 0) - the opacity value to animate out to and in from\n\nx and y use `px` by default but support css units, for example `x: '100vw'` or `y: '50%'`.\nYou can see the",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/04-svelte-transition.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7146b96a-2999-4358-bb1f-98379552804a-2",
    "text": " in from\n- `opacity` (`number`, default 0) - the opacity value to animate out to and in from\n\nx and y use `px` by default but support css units, for example `x: '100vw'` or `y: '50%'`.\nYou can see the `fly` transition in action in the [transition tutorial](https://learn.svelte.dev/tutorial/adding-parameters-to-transitions).\n\n```svelte\n<script>\n\timport { fly } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n{#if condition}\n\t<div\n\t\ttransition:fly={{ delay: 250, duration: 300, x: 100, y: 500, opacity: 0.5, easing: quintOut }}\n\t>\n\t\tflies in and out\n\t</div>\n{/if}\n```\n\n## `slide`\n\n> EXPORT_SNIPPET: svelte/transition#slide\n\n```svelte\ntransition:slide={params}\n```\n\n```svelte\nin:slide={params}\n```\n\n```svelte\nout:slide={params}\n```\n\nSlides an element in and out.\n\n`slide` accepts the following parameters:\n\n- `delay` (`number`, default 0) \u2014 milliseconds before starting\n- `duration` (`number`, default 400) \u2014 milliseconds the transition lasts\n- `easing` (`function`, default `cubicOut`) \u2014 an [easing function](/docs/svelte-easing)\n\n* `axis` (`x` | `y`, default `y`) \u2014 the axis of motion along which the transition occurs\n\n```svelte\n<script>\n\timport { slide } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n{#if condition}\n\t<div transition:slide={{ delay: 250, duration: 300, easing: quintOut, axis: 'x' }}>\n\t\tslides in and out horizontally\n\t</div>\n{/if}\n```\n\n## `scale`\n\n> EXPORT_SNIPPET: svelte/transition#scale\n\n```svelte\ntransition:scale={params}\n```\n\n```svelte\nin:scale={params}\n```\n\n```svelte\nout:scale={params}\n```\n\nAnimates the opacity and scale of an element. `in` transitions animate from an element's current (default) values to the provided values, passed as parameters. `out` transitions animate from the provided values to an element's default values.\n\n`scale` accepts the following parameters:\n\n- `delay` (`number`, default 0) \u2014 milliseconds before starting\n- `duration` (`number`, default 400) \u2014 milliseconds the transition lasts\n- `easing` (`function`, default `cubicOut`) \u2014 an [easing function](/docs/svelte-easing)\n- `start` (`number`, default 0) - the scale value to animate out to and in from\n- `opacity` (`number`, default 0) - the opacity value to animate out to and in from\n\n```svelte\n<script>\n\timport { scale } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n{#if condition}\n\t<div transition:scale={{ duration: 500, delay: 500, opacity: 0.5, start: 0.5, easing: quintOut }}>\n\t\tscales in and out\n\t</div>\n{/if}\n```\n\n## `draw`\n\n> EXPORT_SNIPPET: svelte/transition#draw\n\n```svelte\ntransition:draw={params}\n```\n\n```svelte\nin:draw={params}\n```\n\n```svelte\nout:draw={params}\n```\n\nAnimates the stroke of an SVG element, like a snake in a tube. `in` transitions begin with the path invisible and draw the path to the screen over time. `out` transitions start in a visible state and gradually erase the path. `draw` only works with elements that have a `getTotalLength` method, like `<path>",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/04-svelte-transition.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "87244ca0-6121-4011-9455-c057fdce6df9-1",
    "text": "---\ntitle: 'svelte/motion'\n---\n\nThe `svelte/motion` module exports two functions, `tweened` and `spring`, for creating writable stores whose values change over time after `set` and `update`, rather than immediately.\n\n## `tweened`\n\n> EXPORT_SNIPPET: svelte/motion#tweened\n\nTweened stores update their values over a fixed duration. The following options are available:\n\n- `delay` (`number`, default 0) \u2014 milliseconds before starting\n- `duration` (`number` | `function`, default 400) \u2014 milliseconds the tween lasts\n- `easing` (`function`, default `t => t`) \u2014 an [easing function](/docs/svelte-easing)\n- `interpolate` (`function`) \u2014 see below\n\n`store.set` and `store.update` can accept a second `options` argument that will override the options passed in upon instantiation.\n\nBoth functions return a Promise that resolves when the tween completes. If the tween is interrupted, the promise will never resolve.\n\nOut of the box, Svelte will interpolate between two numbers, two arrays or two objects (as long as the arrays and objects are the same 'shape', and their 'leaf' properties are also numbers).\n\n```svelte\n<script>\n\timport { tweened } from 'svelte/motion';\n\timport { cubicOut } from 'svelte/easing';\n\n\tconst size = tweened(1, {\n\t\tduration: 300,\n\t\teasing: cubicOut\n\t});\n\n\tfunction handleClick() {\n\t\t// this is equivalent to size.update(n => n + 1)\n\t\t$size += 1;\n\t}\n</script>\n\n<button on:click={handleClick} style=\"transform: scale({$size}); transform-origin: 0 0\">\n\tembiggen\n</button>\n```\n\nIf the initial value is `undefined` or `null`, the first value change will take effect immediately. This is useful when you have tweened values that are based on props, and don't want any motion when the component first renders.\n\n```ts\n// @filename: ambient.d.ts\ndeclare global {\n\tvar $size: number;\n\tvar big: number;\n}\n\nexport {};\n// @filename: motion.ts\n// ---cut---\nimport { tweened } from 'svelte/motion';\nimport { cubicOut } from 'svelte/easing';\n\nconst size = tweened(undefined, {\n\tduration: 300,\n\teasing: cubicOut\n});\n\n$: $size = big ? 100 : 10;\n```\n\nThe `interpolate` option allows you to tween between _any_ arbitrary values. It must be an `(a, b) => t => value` function, where `a` is the starting value, `b` is the target value, `t` is a number between 0 and 1, and `value` is the result. For example, we can use the [d3-interpolate](https://github.com/d3/d3-interpolate) package to smoothly interpolate between two colours.\n\n```svelte\n<script>\n\timport { interpolateLab } from 'd3-interpolate';\n\timport { tweened } from 'svelte/motion';\n\n\tconst colors = ['rgb(255, 62, 0)', 'rgb(64, 179, 255)', 'rgb(103, 103, 120)'];\n\n\tconst color = tweened(colors[0], {\n\t\tduration: 800,\n\t\tinterpolate: interpolateLab\n\t});\n</script>\n\n{#each colors as c}\n\t<button style=\"background-color: {c}; color: white; border: none;\" on:click={(e) => color.set(c)}>\n\t\t{c}\n\t</button>\n{/each}\n\n<h1 style=\"color: {$color}\">{$color}</h1>\n```\n\n## `spring`\n\n> EXPORT_SNIPPET: svelte/motion#spring\n\nA `spring` store gradually changes",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/03-runtime/03-svelte-motion.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1da79209-ca4d-4bc4-9c77-946e0e2f8356-1",
    "text": "---\ntitle: Frequently asked questions\n---\n\n## I'm new to Svelte. Where should I start?\n\nWe think the best way to get started is playing through the interactive [tutorial](https://learn.svelte.dev/). Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser.\n\nFive to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial.\n\n## Where can I get support?\n\nIf your question is about certain syntax, the [API page](https://svelte.dev/docs) is a good place to start.\n\nStack Overflow is a popular forum to ask code-level questions or if you\u2019re stuck with a specific error. Read through the existing questions tagged with [Svelte](https://stackoverflow.com/questions/tagged/svelte+or+svelte-3) or [ask your own](https://stackoverflow.com/questions/ask?tags=svelte)!\n\nThere are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. [Our Discord](https://svelte.dev/chat) or [the Reddit channel](https://www.reddit.com/r/sveltejs/) are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit.\n\n## Are there any third-party resources?\n\nSvelte Society maintains a [list of books and videos](https://sveltesociety.dev/resources).\n\n## How can I get VS Code to syntax-highlight my .svelte files?\n\nThere is an [official VS Code extension for Svelte](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode).\n\n## Is there a tool to automatically format my .svelte files?\n\nYou can use prettier with the [prettier-plugin-svelte](https://www.npmjs.com/package/prettier-plugin-svelte) plugin.\n\n## How do I document my components?\n\nIn editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments.\n\n````svelte\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this component.\nIt will show up on hover.\n\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```tsx\n  <main name=\"Arethra\">\n  ```\n-->\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n````\n\nNote: The `@component` is necessary in the HTML comment which describes your component.\n\n## What about TypeScript support?\n\nYou need to install a preprocessor such as [svelte-preprocess](https://github.com/sveltejs/svelte-preprocess). You can run type checking from the command line with [svelte-check](https://www.npmjs.com/package/svelte-check).\n\nTo declare the type of a reactive variable in a Svelte template, you should use the following syntax:\n\n```ts\nconst count: number = 100;\n\n// ---cut---\nlet x: number;\n$: x = count + 1;\n```\n\nTo import a type or interface make sure to use [TypeScript's `type` modifier](https://www.typescriptlang.org/docs/handbook/release-notes/t",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/01-faq.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1da79209-ca4d-4bc4-9c77-946e0e2f8356-2",
    "text": "er = 100;\n\n// ---cut---\nlet x: number;\n$: x = count + 1;\n```\n\nTo import a type or interface make sure to use [TypeScript's `type` modifier](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export):\n\n```ts\n// @filename: SomeFile.ts\nexport interface SomeInterface {\n\tfoo: string;\n}\n\n// @filename: index.ts\n// ---cut---\nimport type { SomeInterface } from './SomeFile';\n```\n\nYou must use the `type` modifier because `svelte-preprocess` doesn't know whether an import is a type or a value \u2014 it only transpiles one file at a time without knowledge of the other files and therefore can't safely erase imports which only contain types without this modifier present.\n\n## Does Svelte scale?\n\nThere will be a blog post about this eventually, but in the meantime, check out [this issue](https://github.com/sveltejs/svelte/issues/2546).\n\n## Is there a UI component library?\n\nThere are several UI component libraries as well as standalone components. Find them under the [components section](https://sveltesociety.dev/components#design-systems) of the Svelte Society website.\n\n## How do I test Svelte apps?\n\nHow your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte.\n\nA Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E).\n\n_Unit Tests_: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup [Vitest](https://vitest.dev/) for unit testing. There are a number of other test runners that could be used as well.\n\n_Component Tests_: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like [Vitest](https://vitest.dev/) to solutions that leverage an actual browser to provide a visual testing capability such as [Playwright](https://playwright.dev/docs/test-components) or [Cypress](https://www.cypress.io/).\n\n_End-to-End Tests_: To ensure you",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/01-faq.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1da79209-ca4d-4bc4-9c77-946e0e2f8356-3",
    "text": "age an actual browser to provide a visual testing capability such as [Playwright](https://playwright.dev/docs/test-components) or [Cypress](https://www.cypress.io/).\n\n_End-to-End Tests_: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup [Playwright](https://playwright.dev/) for end-to-end testing. There are many other E2E test libraries available for use as well.\n\nSome resources for getting started with testing:\n\n- [Svelte Testing Library](https://testing-library.com/docs/svelte-testing-library/example/)\n- [Svelte Component Testing in Cypress](https://docs.cypress.io/guides/component-testing/svelte/overview)\n- [Example using vitest](https://github.com/vitest-dev/vitest/tree/main/examples/svelte)\n- [Example using uvu test runner with JSDOM](https://github.com/lukeed/uvu/tree/master/examples/svelte)\n- [Test Svelte components using Vitest & Playwright](https://davipon.hashnode.dev/test-svelte-component-using-vitest-playwright)\n- [Component testing with WebdriverIO](https://webdriver.io/docs/component-testing/svelte)\n\n## Is there a router?\n\nThe official routing library is [SvelteKit](https://kit.svelte.dev/). SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React.\n\nHowever, you can use any router library. A lot of people use [page.js](https://github.com/visionmedia/page.js). There's also [navaid](https://github.com/lukeed/navaid), which is very similar. And [universal-router](https://github.com/kriasoft/universal-router), which is isomorphic with child routes, but without built-in history support.\n\nIf you prefer a declarative HTML approach, there's the isomorphic [svelte-routing](https://github.com/EmilTholin/svelte-routing) library and a fork of it called [svelte-navigator](https://github.com/mefechoel/svelte-navigator) containing some additional functionality.\n\nIf you need hash-based routing on the client side, check out [svelte-spa-router](https://github.com/ItalyPaleAle/svelte-spa-router) or [abstract-state-router](https://github.com/TehShrike/abstract-state-router/).\n\n[Routify](https://routify.dev) is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR.\n\nYou can see a [community-maintained list of routers on sveltesociety.dev](https://sveltesociety.dev/components#routers).\n\n## Is Svelte v2 still available?\n\nNew features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability.\n\nThe documentation is still available [here](https://v2",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/01-faq.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "9147209a-6c19-426c-b811-c7c58072e447-1",
    "text": "---\ntitle: TypeScript\n---\n\nYou can use TypeScript within Svelte components. IDE extensions like the [Svelte VSCode extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) will help you catch errors right in your editor, and [`svelte-check`](https://www.npmjs.com/package/svelte-check) does the same on the command line, which you can integrate into your CI.\n\n## Setup\n\nTo use TypeScript within Svelte components, you need to add a preprocessor that will turn TypeScript into JavaScript.\n\n### Using SvelteKit or Vite\n\nThe easiest way to get started is scaffolding a new SvelteKit project by typing `npm create svelte@latest`, following the prompts and choosing the TypeScript option.\n\n```ts\n/// file: svelte.config.js\n// @noErrors\nimport { vitePreprocess } from '@sveltejs/kit/vite';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\nIf you don't need or want all the features SvelteKit has to offer, you can scaffold a Svelte-flavoured Vite project instead by typing `npm create vite@latest` and selecting the `svelte-ts` option.\n\n```ts\n/// file: svelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\nexport default config;\n```\n\nIn both cases, a `svelte.config.js` with `vitePreprocess` will be added. Vite/SvelteKit will read from this config file.\n\n### Other build tools\n\nIf you're using tools like Rollup or Webpack instead, install their respective Svelte plugins. For Rollup that's [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) and for Webpack that's [svelte-loader](https://github.com/sveltejs/svelte-loader). For both, you need to install `typescript` and `svelte-preprocess` and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the [rollup](https://github.com/sveltejs/template) or [webpack](https://github.com/sveltejs/template-webpack) template to scaffold the setup from a script.\n\n> If you're starting a new project, we recommend using SvelteKit or Vite instead\n\n## `<script lang=\"ts\">`\n\nTo use TypeScript inside your Svelte components, add `lang=\"ts\"` to your `script` tags:\n\n```svelte\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\n```\n\n### Props\n\nProps can be typed directly on the `export let` statement:\n\n```svelte\n<script lang=\"ts\">\n\texport let name: string;\n</script>\n```\n\n### Slots\n\nSlot and slot prop types are inferred from the types of the slot props passed to them:\n\n```svelte\n<script lang=\"ts\">\n\texport let name: string;\n</script>\n\n<slot {name} />\n\n<!-- Later -->\n<Comp let:name>\n\t<!--    ^ Inferred as string -->\n\t{name}\n</Comp>\n```\n\n### Events\n\nEvents can be typed with `createEventDispatcher`:\n\n```svelte\n<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher<{\n\t\tevent: null; // does not ac",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/03-typescript.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "9147209a-6c19-426c-b811-c7c58072e447-2",
    "text": "vents can be typed with `createEventDispatcher`:\n\n```svelte\n<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher<{\n\t\tevent: null; // does not accept a payload\n\t\tclick: string; // has a required string payload\n\t\ttype: string | null; // has an optional string payload\n\t}>();\n\n\tfunction handleClick() {\n\t\tdispatch('event');\n\t\tdispatch('click', 'hello');\n\t}\n\n\tfunction handleType() {\n\t\tdispatch('event');\n\t\tdispatch('type', Math.random() > 0.5 ? 'world' : null);\n\t}\n</script>\n\n<button on:click={handleClick} on:keydown={handleType}>Click</button>\n```\n\n## Enhancing built-in DOM types\n\nSvelte provides a best effort of all the HTML DOM types that exist. Sometimes you may want to use experimental attributes or custom events coming from an action. In these cases, TypeScript will throw a type error, saying that it does not know these types. If it's a non-experimental standard attribute/event, this may very well be a missing typing from our [HTML typings](https://github.com/sveltejs/svelte/blob/master/packages/svelte/elements.d.ts). In that case, you are welcome to open an issue and/or a PR fixing it.\n\nIn case this is a custom or experimental attribute/event, you can enhance the typings like this:\n\n```ts\n/// file: additional-svelte-typings.d.ts\ndeclare namespace svelteHTML {\n\t// enhance elements\n\tinterface IntrinsicElements {\n\t\t'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };\n\t}\n\t// enhance attributes\n\tinterface HTMLAttributes<T> {\n\t\t// If you want to use on:beforeinstallprompt\n\t\t'on:beforeinstallprompt'?: (event: any) => any;\n\t\t// If you want to use myCustomAttribute={..} (note: all lowercase)\n\t\tmycustomattribute?: any; // You can replace any with something more specific if you like\n\t}\n}\n```\n\nThen make sure that `d.ts` file is referenced in your `tsconfig.json`. If it reads something like `\"include\": [\"src/**/*\"]` and your `d.ts` file is inside `src`, it should work. You may need to reload for the changes to take effect.\n\nSince Svelte version 4.2 / `svelte-check` version 3.5 / VS Code extension version 107.10.0 you can also declare the typings by augmenting the `svelte/elements` module like this:\n\n```ts\n/// file: additional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements'\n\ndeclare module 'svelte/elements' {\n    export interface SvelteHTMLElements {\n        'custom-button': HTMLButtonAttributes;\n    }\n\n\t// allows for more granular control over what element to add the typings to\n    export interface HTMLButtonAttributes {\n        'veryexperimentalattribute'?: string;\n    }\n}\n\nexport {}; // ensure this is not an ambient module, else types will be overridden instead of augmented\n```\n\n## Experimental advanced typings\n\nA few features are missing from taking full advantage of TypeScript in more advanced use cases like typing that a component implements a certain interface, explicitly typing slots, or using generics. These things are possible using",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/03-typescript.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "a42e24d7-a934-4c1f-8775-741bfbf6a43b-1",
    "text": "---\ntitle: Svelte 4 migration guide\n---\n\nThis migration guide provides an overview of how to migrate from Svelte version 3 to 4. See the linked PRs for more details about each change. Use the migration script to migrate some of these automatically: `npx svelte-migrate@latest svelte-4`\n\nIf you're a library author, consider whether to only support Svelte 4 or if it's possible to support Svelte 3 too. Since most of the breaking changes don't affect many people, this may be easily possible. Also remember to update the version range in your `peerDependencies`.\n\n## Minimum version requirements\n\n- Upgrade to Node 16 or higher. Earlier versions are no longer supported. ([#8566](https://github.com/sveltejs/svelte/issues/8566))\n- If you are using SvelteKit, upgrade to 1.20.4 or newer ([sveltejs/kit#10172](https://github.com/sveltejs/kit/pull/10172))\n- If you are using Vite without SvelteKit, upgrade to `vite-plugin-svelte` 2.4.1 or newer ([#8516](https://github.com/sveltejs/svelte/issues/8516))\n- If you are using webpack, upgrade to webpack 5 or higher and `svelte-loader` 3.1.8 or higher. Earlier versions are no longer supported. ([#8515](https://github.com/sveltejs/svelte/issues/8515), [198dbcf](https://github.com/sveltejs/svelte/commit/198dbcf))\n- If you are using Rollup, upgrade to `rollup-plugin-svelte` 7.1.5 or higher ([198dbcf](https://github.com/sveltejs/svelte/commit/198dbcf))\n- If you are using TypeScript, upgrade to TypeScript 5 or higher. Lower versions might still work, but no guarantees are made about that. ([#8488](https://github.com/sveltejs/svelte/issues/8488))\n\n## Browser conditions for bundlers\n\nBundlers must now specify the `browser` condition when building a frontend bundle for the browser. SvelteKit and Vite will handle this automatically for you. If you're using any others, you may observe lifecycle callbacks such as `onMount` not get called and you'll need to update the module resolution configuration.\n- For Rollup this is done within the `@rollup/plugin-node-resolve` plugin by setting `browser: true` in its options. See the [`rollup-plugin-svelte`](https://github.com/sveltejs/rollup-plugin-svelte/#usage) documentation for more details\n- For wepback this is done by adding `\"browser\"` to the `conditionNames` array. You may also have to update your `alias` config, if you have set it. See the [`svelte-loader`](https://github.com/sveltejs/svelte-loader#usage) documentation for more details\n\n([#8516](https://github.com/sveltejs/svelte/issues/8516))\n\n## Removal of CJS related output\n\nSvelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the `svelte/register` hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step. ([#8613](https://github.com/sveltejs/svelte/issues/8613))\n\n## Stricter types for Svelte functions\n\nThere are now stricter types for `createEventDispatcher`, `Action`, `ActionReturn`, a",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/04-v4-migration-guide.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "a42e24d7-a934-4c1f-8775-741bfbf6a43b-2",
    "text": "ost-build step. ([#8613](https://github.com/sveltejs/svelte/issues/8613))\n\n## Stricter types for Svelte functions\n\nThere are now stricter types for `createEventDispatcher`, `Action`, `ActionReturn`, and `onMount`:\n\n- `createEventDispatcher` now supports specifying that a payload is optional, required, or non-existent, and the call sites are checked accordingly ([#7224](https://github.com/sveltejs/svelte/issues/7224))\n\n```ts\n// @errors: 2554 2345\nimport { createEventDispatcher } from 'svelte';\n\nconst dispatch = createEventDispatcher<{\n\toptional: number | null;\n\trequired: string;\n\tnoArgument: null;\n}>();\n\n// Svelte version 3:\ndispatch('optional');\ndispatch('required'); // I can still omit the detail argument\ndispatch('noArgument', 'surprise'); // I can still add a detail argument\n\n// Svelte version 4 using TypeScript strict mode:\ndispatch('optional');\ndispatch('required'); // error, missing argument\ndispatch('noArgument', 'surprise'); // error, cannot pass an argument\n```\n\n- `Action` and `ActionReturn` have a default parameter type of `undefined` now, which means you need to type the generic if you want to specify that this action receives a parameter. The migration script will migrate this automatically ([#7442](https://github.com/sveltejs/svelte/pull/7442))\n\n```diff\n-const action: Action = (node, params) => { .. } // this is now an error if you use params in any way\n+const action: Action<HTMLElement, string> = (node, params) => { .. } // params is of type string\n```\n\n- `onMount` now shows a type error if you return a function asynchronously from it, because this is likely a bug in your code where you expect the callback to be called on destroy, which it will only do for synchronously returned functions ([#8136](https://github.com/sveltejs/svelte/issues/8136))\n\n```diff\n// Example where this change reveals an actual bug\nonMount(\n- // someCleanup() not called because function handed to onMount is async\n- async () => {\n-   const something = await foo();\n+ // someCleanup() is called because function handed to onMount is sync\n+ () => {\n+  foo().then(something =>  ..\n   // ..\n   return () => someCleanup();\n}\n);\n```\n\n## Custom Elements with Svelte\n\nThe creation of custom elements with Svelte has been overhauled and significantly improved. The `tag` option is deprecated in favor of the new `customElement` option:\n\n```diff\n-<svelte:options tag=\"my-component\" />\n+<svelte:options customElement=\"my-component\" />\n```\n\nThis change was made to allow [more configurability](custom-elements-api#component-options) for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. ([#8457](https://github.com/sveltejs/svelte/issues/8457))\n\n## SvelteComponentTyped is deprecated\n\n`SvelteComponentTyped` is deprecated, as `SvelteComponent` now has all its typing capabilities. Replace all instances of `SvelteComponentTyped` with `SvelteComponent`.\n\n```diff\n- import { SvelteComponentTyped } from 's",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/04-v4-migration-guide.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "a42e24d7-a934-4c1f-8775-741bfbf6a43b-3",
    "text": "ped` is deprecated, as `SvelteComponent` now has all its typing capabilities. Replace all instances of `SvelteComponentTyped` with `SvelteComponent`.\n\n```diff\n- import { SvelteComponentTyped } from 'svelte';\n+ import { SvelteComponent } from 'svelte';\n\n- export class Foo extends SvelteComponentTyped<{ aProp: string }> {}\n+ export class Foo extends SvelteComponent<{ aProp: string }> {}\n```\n\nIf you have used `SvelteComponent` as the component instance type previously, you may see a somewhat opaque type error now, which is solved by changing `: typeof SvelteComponent` to `: typeof SvelteComponent<any>`.\n\n```diff\n<script>\n  import ComponentA from './ComponentA.svelte';\n  import ComponentB from './ComponentB.svelte';\n  import { SvelteComponent } from 'svelte';\n\n-  let component: typeof SvelteComponent;\n+  let component: typeof SvelteComponent<any>;\n\n  function choseRandomly() {\n    component = Math.random() > 0.5 ? ComponentA : ComponentB;\n  }\n</script>\n\n<button on:click={choseRandomly}>random</button>\n<svelte:element this={component} />\n```\n\nThe migration script will do both automatically for you. ([#8512](https://github.com/sveltejs/svelte/issues/8512))\n\n## Transitions are local by default\n\nTransitions are now local by default to prevent confusion around page navigations. \"local\" means that a transition will not play if it's within a nested control flow block (`each/if/await/key`) and not the direct parent block but a block above it is created/destroyed. In the following example, the `slide` intro animation will only play when `success` goes from `false` to `true`, but it will _not_ play when `show` goes from `false` to `true`:\n\n```svelte\n{#if show}\n\t...\n\t{#if success}\n\t\t<p in:slide>Success</p>\n\t{/each}\n{/if}\n```\n\nTo make transitions global, add the `|global` modifier - then they will play when _any_ control flow block above is created/destroyed. The migration script will do this automatically for you. ([#6686](https://github.com/sveltejs/svelte/issues/6686))\n\n## Default slot bindings\n\nDefault slot bindings are no longer exposed to named slots and vice versa:\n\n```svelte\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n```\n\nThis makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. ([#6049](https://github.com/sveltejs/svelte/issues/6049))\n\n## Preprocessors\n\nThe order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style.\n\n```js\n// @errors: 2304\nimport { preprocess } from 'svelte/compiler';\n\nconst { code } = await preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/04-v4-migration-guide.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "a42e24d7-a934-4c1f-8775-741bfbf6a43b-4",
    "text": " preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-2');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-2');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-2');\n\t\t\t}\n\t\t}\n\t],\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\n// Svelte 3 logs:\n// markup-1\n// markup-2\n// script-1\n// script-2\n// style-1\n// style-2\n\n// Svelte 4 logs:\n// markup-1\n// script-1\n// style-1\n// markup-2\n// script-2\n// style-2\n```\n\nThis could affect you for example if you are using `MDsveX` - in which case you should make sure it comes before any script or style preprocessor.\n\n```diff\npreprocess: [\n-\tvitePreprocess(),\n-\tmdsvex(mdsvexConfig)\n+\tmdsvex(mdsvexConfig),\n+\tvitePreprocess()\n]\n```\n\nEach preprocessor must also have a name. ([#8618](https://github.com/sveltejs/svelte/issues/8618))\n\n## New eslint package\n\n`eslint-plugin-svelte3` is deprecated. It may still work with Svelte 4 but we make no guarantees about that. We recommend switching to our new package [eslint-plugin-svelte](https://github.com/sveltejs/eslint-plugin-svelte). See [this Github post](https://github.com/sveltejs/kit/issues/10242#issuecomment-1610798405) for an instruction how to migrate. Alternatively, you can create a new project using `npm create svelte@latest`, select the eslint (and possibly TypeScript) option and then copy over the related files into your existing project.\n\n## Other breaking changes\n\n- the `inert` attribute is now applied to outroing elements to make them invisible to assistive technology and prevent interaction. ([#8628](https://github.com/sveltejs/svelte/pull/8628))\n- the runtime now uses `classList.toggle(name, boolean)` which may not work in very old browsers. Consider using a [polyfill](https://github.com/eligrey/classList.js) if you need to support these browsers. ([#8629](https://github.com/sveltejs/svelte/issues/8629))\n- the runtime now uses the `CustomEvent` constructor which may not work in very old browsers. Consider using a [polyfill](https://github.com/theftprevention/event-constructor-polyfill/tree/master) if you need to support these browsers. ([#8775](https://github.com/sveltejs/svelte/pull/8775))\n- people implementing their own stores from scratch using the `StartStopNotifier` interface (which is passed to the create function of `writable` etc) from `svelte/store` now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. ([#6750](https://github.com/sveltejs/svelte/issues/6750))\n- `derived` will now throw an error on falsy values instead of stores passed to it. ([#7947](https://github.com/sveltejs/svelte/issues/7947))\n- type definitions for `svelte/internal` were removed to further discourage usage of those internal methods which are not public API. Most of these will likely change for Svelte 5",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/04-v4-migration-guide.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "110dfbfd-e49d-4c0f-b848-3e0ef3c1f5ea-1",
    "text": "---\ntitle: 'Accessibility warnings'\n---\n\nAccessibility (shortened to a11y) isn't always easy to get right, but Svelte will help by warning you at compile time if you write inaccessible markup. However, keep in mind that many accessibility issues can only be identified at runtime using other automated tools and by manually testing your application.\n\nSome warnings may be incorrect in your concrete use case. You can disable such false positives by placing a `<!-- svelte-ignore a11y-<code> -->` comment above the line that causes the warning. Example:\n\n```svelte\n<!-- svelte-ignore a11y-autofocus -->\n<input autofocus />\n```\n\nHere is a list of accessibility checks Svelte will do for you.\n\n## `a11y-accesskey`\n\nEnforce no `accesskey` on element. Access keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements. Inconsistencies between keyboard shortcuts and keyboard commands used by screen reader and keyboard-only users create accessibility complications. To avoid complications, access keys should not be used.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: Avoid using accesskey -->\n<div accessKey=\"z\" />\n```\n\n## `a11y-aria-activedescendant-has-tabindex`\n\nAn element with `aria-activedescendant` must be tabbable, so it must either have an inherent `tabindex` or declare `tabindex` as an attribute.\n\n```svelte\n<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->\n<div aria-activedescendant=\"some-id\" />\n```\n\n## `a11y-aria-attributes`\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example `meta`, `html`, `script`, `style`. This rule enforces that these DOM elements do not contain the `aria-*` props.\n\n```svelte\n<!-- A11y: <meta> should not have aria-* attributes -->\n<meta aria-hidden=\"false\" />\n```\n\n## `a11y-autofocus`\n\nEnforce that `autofocus` is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users alike.\n\n```svelte\n<!-- A11y: Avoid using autofocus -->\n<input autofocus />\n```\n\n## `a11y-click-events-have-key-events`\n\nEnforce `on:click` is accompanied by at least one of the following: `on:keyup`, `on:keydown`, `on:keypress`. Coding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\n\nThis does not apply for interactive or hidden elements.\n\n```svelte\n<!-- A11y: visible, non-interactive elements with an on:click event must be accompanied by an on:keydown, on:keyup, or on:keypress event. -->\n<div on:click={() => {}} />\n```\n\nNote that the `keypress` event is now deprecated, so it is officially recommended to use either the `keyup` or `keydown` event instead, accordingly.\n\n## `a11y-distracting-elements`\n\nEnforces that no distracting elements are used. Elements that can be visually distracting can cause accessibility issues with visually impaired users. Such elements are most likely deprecated,",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/02-accessibility-warnings.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "110dfbfd-e49d-4c0f-b848-3e0ef3c1f5ea-2",
    "text": "ments`\n\nEnforces that no distracting elements are used. Elements that can be visually distracting can cause accessibility issues with visually impaired users. Such elements are most likely deprecated, and should be avoided.\n\nThe following elements are visually distracting: `<marquee>` and `<blink>`.\n\n```svelte\n<!-- A11y: Avoid <marquee> elements -->\n<marquee />\n```\n\n## `a11y-hidden`\n\nCertain DOM elements are useful for screen reader navigation and should not be hidden.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: <h2> element should not be hidden -->\n<h2 aria-hidden=\"true\">invisible header</h2>\n```\n\n## `a11y-img-redundant-alt`\n\nEnforce img alt attribute does not contain the word image, picture, or photo. Screen readers already announce `img` elements as an image. There is no need to use words such as _image_, _photo_, and/or _picture_.\n\n```svelte\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n\n<!-- aria-hidden, won't be announced by screen reader -->\n<img src=\"bar\" aria-hidden=\"true\" alt=\"Picture of me taking a photo of an image\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Picture of baz fixing a bug.\" />\n```\n\n## `a11y-incorrect-aria-attribute-type`\n\nEnforce that only the correct type of value is used for aria attributes. For example, `aria-hidden`\nshould only receive a boolean.\n\n```svelte\n<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->\n<div aria-hidden=\"yes\" />\n```\n\n## `a11y-invalid-attribute`\n\nEnforce that attributes important for accessibility have a valid value. For example, `href` should not be empty, `'#'`, or `javascript:`.\n\n```svelte\n<!-- A11y: '' is not a valid href attribute -->\n<a href=\"\">invalid</a>\n```\n\n## `a11y-interactive-supports-focus`\n\nEnforce that elements with an interactive role and interactive handlers (mouse or key press) must be focusable or tabbable.\n\n```svelte\n<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->\n<div role=\"button\" on:keypress={() => {}} />\n```\n\n## `a11y-label-has-associated-control`\n\nEnforce that a label tag has a text label and an associated control.\n\nThere are two supported ways to associate a label with a control:\n\n- Wrapping a control in a label tag.\n- Adding `for` to a label and assigning it the ID of an input on the page.\n\n```svelte\n<label for=\"id\">B</label>\n\n<label>C <input type=\"text\" /></label>\n\n<!-- A11y: A form label must be associated with a control. -->\n<label>A</label>\n```\n\n## `a11y-media-has-caption`\n\nProviding captions for media is essential for deaf users to follow along. Captions should be a transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information. Not only is ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/02-accessibility-warnings.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "110dfbfd-e49d-4c0f-b848-3e0ef3c1f5ea-3",
    "text": "is essential for deaf users to follow along. Captions should be a transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information. Not only is this important for accessibility, but can also be useful for all users in the case that the media is unavailable (similar to `alt` text on an image when an image is unable to load).\n\nThe captions should contain all important and relevant information to understand the corresponding media. This may mean that the captions are not a 1:1 mapping of the dialogue in the media content. However, captions are not necessary for video components with the `muted` attribute.\n\n```svelte\n<video><track kind=\"captions\" /></video>\n\n<audio muted />\n\n<!-- A11y: Media elements must have a <track kind=\\\"captions\\\"> -->\n<video />\n\n<!-- A11y: Media elements must have a <track kind=\\\"captions\\\"> -->\n<video><track /></video>\n```\n\n## `a11y-misplaced-role`\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example `meta`, `html`, `script`, `style`. This rule enforces that these DOM elements do not contain the `role` props.\n\n```svelte\n<!-- A11y: <meta> should not have role attribute -->\n<meta role=\"tooltip\" />\n```\n\n## `a11y-misplaced-scope`\n\nThe scope attribute should only be used on `<th>` elements.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: The scope attribute should only be used with <th> elements -->\n<div scope=\"row\" />\n```\n\n## `a11y-missing-attribute`\n\nEnforce that attributes required for accessibility are present on an element. This includes the following checks:\n\n- `<a>` should have an href (unless it's a [fragment-defining tag](https://github.com/sveltejs/svelte/issues/4697))\n- `<area>` should have alt, aria-label, or aria-labelledby\n- `<html>` should have lang\n- `<iframe>` should have title\n- `<img>` should have alt\n- `<object>` should have title, aria-label, or aria-labelledby\n- `<input type=\"image\">` should have alt, aria-label, or aria-labelledby\n\n```svelte\n<!-- A11y: <input type=\\\"image\\\"> element should have an alt, aria-label or aria-labelledby attribute -->\n<input type=\"image\" />\n\n<!-- A11y: <html> element should have a lang attribute -->\n<html />\n\n<!-- A11y: <a> element should have an href attribute -->\n<a>text</a>\n```\n\n## `a11y-missing-content`\n\nEnforce that heading elements (`h1`, `h2`, etc.) and anchors have content and that the content is accessible to screen readers\n\n```svelte\n<!-- A11y: <a> element should have child content -->\n<a href=\"/foo\" />\n\n<!-- A11y: <h1> element should have child content -->\n<h1 />\n```\n\n## `a11y-mouse-events-have-key-events`\n\nEnforce that `on:mouseover` and `on:mouseout` are accompanied by `on:focus` and `on:blur`, respectively. This helps to ensure that any functionality triggered by these mouse events is also accessible to keyboard users.\n\n```svelte\n<!-- A11y: on:mouseover must be accompanied by on:focus -->\n<div on:mouseover={handleMouseover} />\n\n<!",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/02-accessibility-warnings.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "110dfbfd-e49d-4c0f-b848-3e0ef3c1f5ea-4",
    "text": "ny functionality triggered by these mouse events is also accessible to keyboard users.\n\n```svelte\n<!-- A11y: on:mouseover must be accompanied by on:focus -->\n<div on:mouseover={handleMouseover} />\n\n<!-- A11y: on:mouseout must be accompanied by on:blur -->\n<div on:mouseout={handleMouseout} />\n```\n\n## `a11y-no-redundant-roles`\n\nSome HTML elements have default ARIA roles. Giving these elements an ARIA role that is already set by the browser [has no effect](https://www.w3.org/TR/using-aria/#aria-does-nothing) and is redundant.\n\n```svelte\n<!-- A11y: Redundant role 'button' -->\n<button role=\"button\" />\n\n<!-- A11y: Redundant role 'img' -->\n<img role=\"img\" src=\"foo.jpg\" />\n```\n\n## `a11y-no-interactive-element-to-noninteractive-role`\n\n[WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) roles should not be used to convert an interactive element to a non-interactive element. Non-interactive ARIA roles include `article`, `banner`, `complementary`, `img`, `listitem`, `main`, `region` and `tooltip`.\n\n```svelte\n<!-- A11y: <textarea> cannot have role 'listitem' -->\n<textarea role=\"listitem\" />\n```\n\n### `a11y-no-noninteractive-element-interactions`\n\nA non-interactive element does not support event handlers (mouse and key handlers). Non-interactive elements include `<main>`, `<area>`, `<h1>` (,`<h2>`, etc), `<p>`, `<img>`, `<li>`, `<ul>` and `<ol>`. Non-interactive [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) include `article`, `banner`, `complementary`, `img`, `listitem`, `main`, `region` and `tooltip`.\n\n```sv\n<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->\n<li on:click={() => {}} />\n\n<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->\n<div role=\"listitem\" on:click={() => {}} />\n```\n\n### `a11y-no-noninteractive-element-to-interactive-role`\n\n[WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) roles should not be used to convert a non-interactive element to an interactive element. Interactive ARIA roles include `button`, `link`, `checkbox`, `menuitem`, `menuitemcheckbox`, `menuitemradio`, `option`, `radio`, `searchbox`, `switch` and `textbox`.\n\n```svelte\n<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->\n<h3 role=\"searchbox\">Button</h3>\n```\n\n## `a11y-no-noninteractive-tabindex`\n\nTab key navigation should be limited to elements on the page that can be interacted with.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: noninteractive element cannot have nonnegative tabIndex value -->\n<div tabindex=\"0\" />\n```\n\n## a11y-no-static-element-interactions\n\nElements like `<div>` with interactive handlers like `click` must have an ARIA role.\n\n<!-- prettier-ignore -->\n```svelte\n<!-- A11y: <div> with click handler must have an ARIA role -->\n<div on:click={() => ''} />\n```\n\n## `a11y-positive-tabindex`\n\nAvoid positive `tabindex` property values. This will move elements out of the expected tab order, creating",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/05-misc/02-accessibility-warnings.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2f9feb16-98d9-4782-ae9d-7e2ffaf977c7-1",
    "text": "---\ntitle: Svelte components\n---\n\nComponents are the building blocks of Svelte applications. They are written into `.svelte` files, using a superset of HTML.\n\nAll three sections \u2014 script, styles and markup \u2014 are optional.\n\n```svelte\n<script>\n\t// logic goes here\n</script>\n\n<!-- markup (zero or more items) goes here -->\n\n<style>\n\t/* styles go here */\n</style>\n```\n\n## &lt;script&gt;\n\nA `<script>` block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. There are four additional rules:\n\n### 1. `export` creates a component prop\n\nSvelte uses the `export` keyword to mark a variable declaration as a _property_ or _prop_, which means it becomes accessible to consumers of the component (see the section on [attributes and props](/docs/basic-markup#attributes-and-props) for more information).\n\n```svelte\n<script>\n\texport let foo;\n\n\t// Values that are passed in as props\n\t// are immediately available\n\tconsole.log({ foo });\n</script>\n```\n\nYou can specify a default initial value for a prop. It will be used if the component's consumer doesn't specify the prop on the component (or if its initial value is `undefined`) when instantiating the component. Note that if the values of props are subsequently updated, then any prop whose value is not specified will be set to `undefined` (rather than its initial value).\n\nIn development mode (see the [compiler options](/docs/svelte-compiler#compile)), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is `undefined`.\n\n```svelte\n<script>\n\texport let bar = 'optional default initial value';\n\texport let baz = undefined;\n</script>\n```\n\nIf you export a `const`, `class` or `function`, it is readonly from outside the component. Functions are valid prop values, however, as shown below.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t// these are readonly\n\texport const thisIs = 'readonly';\n\n\t/** @param {string} name */\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n\n\t// this is a prop\n\texport let format = (n) => n.toFixed(2);\n</script>\n```\n\nReadonly props can be accessed as properties on the element, tied to the component using [`bind:this` syntax](/docs/component-directives#bind-this).\n\nYou can use reserved words as prop names.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {string} */\n\tlet className;\n\n\t// creates a `class` property, even\n\t// though it is a reserved word\n\texport { className as class };\n</script>\n```\n\n### 2. Assignments are 'reactive'\n\nTo change component state and trigger a re-render, just assign to a locally declared variable.\n\nUpdate expressions (`count += 1`) and property assignments (`obj.x = y`) have the same effect.\n\n```svelte\n<script>\n\tlet count = 0;\n\n\tfunction handleClick() {\n\t\t// calling this function will trigger an\n\t\t// update if th",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/01-svelte-components.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2f9feb16-98d9-4782-ae9d-7e2ffaf977c7-2",
    "text": " (`count += 1`) and property assignments (`obj.x = y`) have the same effect.\n\n```svelte\n<script>\n\tlet count = 0;\n\n\tfunction handleClick() {\n\t\t// calling this function will trigger an\n\t\t// update if the markup references `count`\n\t\tcount = count + 1;\n\t}\n</script>\n```\n\nBecause Svelte's reactivity is based on assignments, using array methods like `.push()` and `.splice()` won't automatically trigger updates. A subsequent assignment is required to trigger the update. This and more details can also be found in the [tutorial](https://learn.svelte.dev/tutorial/updating-arrays-and-objects).\n\n```svelte\n<script>\n\tlet arr = [0, 1];\n\n\tfunction handleClick() {\n\t\t// this method call does not trigger an update\n\t\tarr.push(2);\n\t\t// this assignment will trigger an update\n\t\t// if the markup references `arr`\n\t\tarr = arr;\n\t}\n</script>\n```\n\nSvelte's `<script>` blocks are run only when the component is created, so assignments within a `<script>` block are not automatically run again when a prop updates. If you'd like to track changes to a prop, see the next example in the following section.\n\n```svelte\n<script>\n\texport let person;\n\t// this will only set `name` on component creation\n\t// it will not update when `person` does\n\tlet { name } = person;\n</script>\n```\n\n### 3. `$:` marks a statement as reactive\n\nAny top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the `$:` [JS label syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label). Reactive statements run after other script code and before the component markup is rendered, whenever the values that they depend on have changed.\n\n```svelte\n<script>\n\texport let title;\n\texport let person;\n\n\t// this will update `document.title` whenever\n\t// the `title` prop changes\n\t$: document.title = title;\n\n\t$: {\n\t\tconsole.log(`multiple statements can be combined`);\n\t\tconsole.log(`the current title is ${title}`);\n\t}\n\n\t// this will update `name` when 'person' changes\n\t$: ({ name } = person);\n\n\t// don't do this. it will run before the previous line\n\tlet name2 = name;\n</script>\n```\n\nOnly values which directly appear within the `$:` block will become dependencies of the reactive statement. For example, in the code below `total` will only update when `x` changes, but not `y`.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t/** @param {number} value */\n\tfunction yPlusAValue(value) {\n\t\treturn value + y;\n\t}\n\n\t$: total = yPlusAValue(x);\n</script>\n\nTotal: {total}\n<button on:click={() => x++}> Increment X </button>\n\n<button on:click={() => y++}> Increment Y </button>\n```\n\nIt is important to note that the reactive blocks are ordered via simple static analysis at compile time, and all the compiler looks at are the variables that are assigned to and used within the block itself, not in any functions called by them. This means that `yDependent` will not be updated when `x` is updated in the following example:\n\n```svelte\n<script>\n\tlet x = 0;\n\tle",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/01-svelte-components.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2f9feb16-98d9-4782-ae9d-7e2ffaf977c7-3",
    "text": "nd used within the block itself, not in any functions called by them. This means that `yDependent` will not be updated when `x` is updated in the following example:\n\n```svelte\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t/** @param {number} value */\n\tfunction setY(value) {\n\t\ty = value;\n\t}\n\n\t$: yDependent = y;\n\t$: setY(x);\n</script>\n```\n\nMoving the line `$: yDependent = y` below `$: setY(x)` will cause `yDependent` to be updated when `x` is updated.\n\nIf a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a `let` declaration on your behalf.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {number} */\n\texport let num;\n\n\t// we don't need to declare `squared` and `cubed`\n\t// \u2014 Svelte does it for us\n\t$: squared = num * num;\n\t$: cubed = squared * num;\n</script>\n```\n\n### 4. Prefix stores with `$` to access their values\n\nA _store_ is an object that allows reactive access to a value via a simple _store contract_. The [`svelte/store` module](/docs/svelte-store) contains minimal store implementations which fulfil this contract.\n\nAny time you have a reference to a store, you can access its value inside a component by prefixing it with the `$` character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialization and unsubscribe when appropriate.\n\nAssignments to `$`-prefixed variables require that the variable be a writable store, and will result in a call to the store's `.set` method.\n\nNote that the store must be declared at the top level of the component \u2014 not inside an `if` block or a function, for example.\n\nLocal variables (that do not represent store values) must _not_ have a `$` prefix.\n\n```svelte\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\n```\n\n#### Store contract\n\n```ts\n// @noErrors\nstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }\n```\n\nYou can create your own stores without relying on [`svelte/store`](/docs/svelte-store), by implementing the _store contract_:\n\n1. A store must contain a `.subscribe` method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling `.subscribe`. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.\n2. The `.subscribe` method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.\n3. A store may _optionally_ contain a `.set` method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a _writable store_.\n\nFo",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/01-svelte-components.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2f9feb16-98d9-4782-ae9d-7e2ffaf977c7-4",
    "text": "set` method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a _writable store_.\n\nFor interoperability with RxJS Observables, the `.subscribe` method is also allowed to return an object with an `.unsubscribe` method, rather than return the unsubscription function directly. Note however that unless `.subscribe` synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as `undefined` until it does.\n\n## &lt;script context=\"module\"&gt;\n\nA `<script>` tag with a `context=\"module\"` attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular `<script>` (and the component markup) but not vice versa.\n\nYou can `export` bindings from this block, and they will become exports of the compiled module.\n\nYou cannot `export default`, since the default export is the component itself.\n\n> Variables defined in `module` scripts are not reactive \u2014 reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a [store](/docs/svelte-store).\n\n```svelte\n<script context=\"module\">\n\tlet totalComponents = 0;\n\n\t// the export keyword allows this function to imported with e.g.\n\t// `import Example, { alertTotal } from './Example.svelte'`\n\texport function alertTotal() {\n\t\talert(totalComponents);\n\t}\n</script>\n\n<script>\n\ttotalComponents += 1;\n\tconsole.log(`total number of times this component has been created: ${totalComponents}`);\n</script>\n```\n\n## &lt;style&gt;\n\nCSS inside a `<style>` block will be scoped to that component.\n\nThis works by adding a class to affected elements, which is based on a hash of the component styles (e.g. `svelte-123xyz`).\n\n```svelte\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n```\n\nTo apply styles to a selector globally, use the `:global(...)` modifier.\n\n```svelte\n<style>\n\t:global(body) {\n\t\t/* this will apply to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* this will apply to all <strong> elements, in any\n\t\t\t component, that are inside <div> elements belonging\n\t\t\t to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.red) {\n\t\t/* this will apply to all <p> elements belonging to this\n\t\t\t component with a class of red, even if class=\"red\" does\n\t\t\t not initially appear in the markup, and is instead\n\t\t\t added at runtime. This is useful when the class\n\t\t\t of the element is dynamically applied, for instance\n\t\t\t when updating the element's classList property directly. */\n\t}\n</style>\n```\n\nIf you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with `-global-`.\n\nThe `-global-` part will be removed when compiled, and the keyframe then be referenced using just `my-animation-name` elsewhere in your",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/01-svelte-components.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fec538d4-c05e-4a33-a459-2c0c052f40e4-1",
    "text": "---\ntitle: Basic markup\n---\n\n## Tags\n\nA lowercase tag, like `<div>`, denotes a regular HTML element. A capitalised tag, such as `<Widget>` or `<Namespace.Widget>`, indicates a _component_.\n\n```svelte\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\n```\n\n## Attributes and props\n\nBy default, attributes work exactly like their HTML counterparts.\n\n```svelte\n<div class=\"foo\">\n\t<button disabled>can't touch this</button>\n</div>\n```\n\nAs in HTML, values may be unquoted.\n\n<!-- prettier-ignore -->\n```svelte\n<input type=checkbox />\n```\n\nAttribute values can contain JavaScript expressions.\n\n```svelte\n<a href=\"page/{p}\">page {p}</a>\n```\n\nOr they can _be_ JavaScript expressions.\n\n```svelte\n<button disabled={!clickable}>...</button>\n```\n\nBoolean attributes are included on the element if their value is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy) and excluded if it's [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy).\n\nAll other attributes are included unless their value is [nullish](https://developer.mozilla.org/en-US/docs/Glossary/Nullish) (`null` or `undefined`).\n\n```svelte\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n```\n\nAn expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed:\n\n<!-- prettier-ignore -->\n```svelte\n<button disabled=\"{number !== 42}\">...</button>\n```\n\nWhen the attribute name and value match (`name={name}`), they can be replaced with `{name}`.\n\n```svelte\n<button {disabled}>...</button>\n<!-- equivalent to\n<button disabled={disabled}>...</button>\n-->\n```\n\nBy convention, values passed to components are referred to as _properties_ or _props_ rather than _attributes_, which are a feature of the DOM.\n\nAs with elements, `name={name}` can be replaced with the `{name}` shorthand.\n\n```svelte\n<Widget foo={bar} answer={42} text=\"hello\" />\n```\n\n_Spread attributes_ allow many attributes or properties to be passed to an element or component at once.\n\nAn element or component can have multiple spread attributes, interspersed with regular ones.\n\n```svelte\n<Widget {...things} />\n```\n\n`$$props` references all props that are passed to a component, including ones that are not declared with `export`. Using `$$props` will not perform as well as references to a specific prop because changes to any prop will cause Svelte to recheck all usages of `$$props`. But it can be useful in some cases \u2013 for example, when you don't know at compile time what props might be passed to a component.\n\n```svelte\n<Widget {...$$props} />\n```\n\n`$$restProps` contains only the props which are _not_ declared with `export`. It can be used to pass down other unknown attributes to an element in a component. It shares the same performance characteristics compared to specific property access as `$$props`.\n\n```svelte\n<inpu",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/02-basic-markup.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "842ada4d-f836-4719-bb8f-08152c9f849a-1",
    "text": "---\ntitle: Special elements\n---\n\n## `<slot>`\n\n```svelte\n<slot><!-- optional fallback --></slot>\n```\n\n```svelte\n<slot name=\"x\"><!-- optional fallback --></slot>\n```\n\n```svelte\n<slot prop={value} />\n```\n\nComponents can have child content, in the same way that elements can.\n\nThe content is exposed in the child component using the `<slot>` element, which can contain fallback content that is rendered if no children are provided.\n\n```svelte\n<!-- Widget.svelte -->\n<div>\n\t<slot>\n\t\tthis fallback content will be rendered when no content is provided, like in the first example\n\t</slot>\n</div>\n\n<!-- App.svelte -->\n<Widget />\n<!-- this component will render the default content -->\n\n<Widget>\n\t<p>this is some child content that will overwrite the default slot content</p>\n</Widget>\n```\n\nNote: If you want to render regular `<slot>` element, You can use `<svelte:element this=\"slot\" />`.\n\n### `<slot name=\"`_name_`\">`\n\nNamed slots allow consumers to target specific areas. They can also have fallback content.\n\n```svelte\n<!-- Widget.svelte -->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n\n<!-- App.svelte -->\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</Widget>\n```\n\nComponents can be placed in a named slot using the syntax `<Component slot=\"name\" />`.\nIn order to place content in a slot without using a wrapper element, you can use the special element `<svelte:fragment>`.\n\n```svelte\n<!-- Widget.svelte -->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n\n<!-- App.svelte -->\n<Widget>\n\t<HeaderComponent slot=\"header\" />\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\n```\n\n### $$slots\n\n`$$slots` is an object whose keys are the names of the slots passed into the component by the parent. If the parent does not pass in a slot with a particular name, that name will not be present in `$$slots`. This allows components to render a slot (and other elements, like wrappers for styling) only if the parent provides it.\n\nNote that explicitly passing in an empty named slot will add that slot's name to `$$slots`. For example, if a parent passes `<div slot=\"title\" />` to a child component, `$$slots.title` will be truthy within the child.\n\n```svelte\n<!-- Card.svelte -->\n<div>\n\t<slot name=\"title\" />\n\t{#if $$slots.description}\n\t\t<!-- This <hr> and slot will render only if a slot named \"description\" is provided. -->\n\t\t<hr />\n\t\t<slot name=\"description\" />\n\t{/if}\n</div>\n\n<!-- App.svelte -->\n<Card>\n\t<h1 slot=\"title\">Blog Post Title</h1>\n\t<!-- No slot named \"description\" was provided so the optional slot will not be rendered. -->\n</Card>\n```\n\n### `<slot key={`_value_`}>`\n\nSlots can be rendered zero or more times and can pass values _back_ to the parent using props. The parent expose",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/07-special-elements.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "842ada4d-f836-4719-bb8f-08152c9f849a-2",
    "text": " the optional slot will not be rendered. -->\n</Card>\n```\n\n### `<slot key={`_value_`}>`\n\nSlots can be rendered zero or more times and can pass values _back_ to the parent using props. The parent exposes the values to the slot template using the `let:` directive.\n\nThe usual shorthand rules apply \u2014 `let:item` is equivalent to `let:item={item}`, and `<slot {item}>` is equivalent to `<slot item={item}>`.\n\n```svelte\n<!-- FancyList.svelte -->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot prop={item} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<!-- App.svelte -->\n<FancyList {items} let:prop={thing}>\n\t<div>{thing.text}</div>\n</FancyList>\n```\n\nNamed slots can also expose values. The `let:` directive goes on the element with the `slot` attribute.\n\n```svelte\n<!-- FancyList.svelte -->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot name=\"item\" {item} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<slot name=\"footer\" />\n\n<!-- App.svelte -->\n<FancyList {items}>\n\t<div slot=\"item\" let:item>{item.text}</div>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</FancyList>\n```\n\n## `<svelte:self>`\n\nThe `<svelte:self>` element allows a component to include itself, recursively.\n\nIt cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.\n\n```svelte\n<script>\n\t/** @type {number} */\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<svelte:self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n```\n\n## `<svelte:component>`\n\n```svelte\n<svelte:component this={expression} />\n```\n\nThe `<svelte:component>` element renders a component dynamically, using the component constructor specified as the `this` property. When the property changes, the component is destroyed and recreated.\n\nIf `this` is falsy, no component is rendered.\n\n```svelte\n<svelte:component this={currentSelection.component} foo={bar} />\n```\n\n## `<svelte:element>`\n\n```svelte\n<svelte:element this={expression} />\n```\n\nThe `<svelte:element>` element lets you render an element of a dynamically specified type. This is useful for example when displaying rich text content from a CMS. Any properties and event listeners present will be applied to the element.\n\nThe only supported binding is `bind:this`, since the element type-specific bindings that Svelte does at build time (e.g. `bind:value` for input elements) do not work with a dynamic tag type.\n\nIf `this` has a nullish value, the element and its children will not be rendered.\n\nIf `this` is the name of a [void element](https://developer.mozilla.org/en-US/docs/Glossary/Void_element) (e.g., `br`) and `<svelte:element>` has child elements, a runtime error will be thrown in development mode.\n\n```svelte\n<script>\n\tlet tag = 'div';\n\n\t/** @type {(e: MouseEvent) => void} */\n\texport let handler;\n</script>\n\n<svelte:element this={tag} on:click={handler}>Foo</svelte:element>\n```\n\n## `<svelte:window>`\n\n```svelte\n<svelte:window on:event={handler} />\n```\n\n```svelte\n<svelte:wi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/07-special-elements.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "842ada4d-f836-4719-bb8f-08152c9f849a-3",
    "text": "/\n\texport let handler;\n</script>\n\n<svelte:element this={tag} on:click={handler}>Foo</svelte:element>\n```\n\n## `<svelte:window>`\n\n```svelte\n<svelte:window on:event={handler} />\n```\n\n```svelte\n<svelte:window bind:prop={value} />\n```\n\nThe `<svelte:window>` element allows you to add event listeners to the `window` object without worrying about removing them when the component is destroyed, or checking for the existence of `window` when server-side rendering.\n\nUnlike `<svelte:self>`, this element may only appear at the top level of your component and must never be inside a block or element.\n\n```svelte\n<script>\n\t/** @param {KeyboardEvent} event */\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeydown} />\n```\n\nYou can also bind to the following properties:\n\n- `innerWidth`\n- `innerHeight`\n- `outerWidth`\n- `outerHeight`\n- `scrollX`\n- `scrollY`\n- `online` \u2014 an alias for `window.navigator.onLine`\n- `devicePixelRatio`\n\nAll except `scrollX` and `scrollY` are readonly.\n\n```svelte\n<svelte:window bind:scrollY={y} />\n```\n\n> Note that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of `scrollX` and `scrollY` will cause scrolling. However, if the scrolling behaviour is desired, call `scrollTo()` in `onMount()`.\n\n## `<svelte:document>`\n\n```svelte\n<svelte:document on:event={handler} />\n```\n\n```svelte\n<svelte:document bind:prop={value} />\n```\n\nSimilarly to `<svelte:window>`, this element allows you to add listeners to events on `document`, such as `visibilitychange`, which don't fire on `window`. It also lets you use [actions](/docs/element-directives#use-action) on `document`.\n\nAs with `<svelte:window>`, this element may only appear the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:document on:visibilitychange={handleVisibilityChange} use:someAction />\n```\n\nYou can also bind to the following properties:\n\n- `fullscreenElement`\n- `visibilityState`\n\nAll are readonly.\n\n## `<svelte:body>`\n\n```svelte\n<svelte:body on:event={handler} />\n```\n\nSimilarly to `<svelte:window>`, this element allows you to add listeners to events on `document.body`, such as `mouseenter` and `mouseleave`, which don't fire on `window`. It also lets you use [actions](/docs/element-directives#use-action) on the `<body>` element.\n\nAs with `<svelte:window>` and `<svelte:document>`, this element may only appear the top level of your component and must never be inside a block or element.\n\n```svelte\n<svelte:body on:mouseenter={handleMouseenter} on:mouseleave={handleMouseleave} use:someAction />\n```\n\n## `<svelte:head>`\n\n```svelte\n<svelte:head>...</svelte:head>\n```\n\nThis element makes it possible to insert elements into `document.head`. During server-side rendering, `head` content is exposed separately to the main `html` content.\n\nAs with `<svelte:window>`, `<svelte:document>` and `<svelte:body>`, this element ma",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/07-special-elements.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "ad95422f-f1c0-4d3e-be4a-46334b27da13-1",
    "text": "---\ntitle: Logic blocks\n---\n\n## {#if ...}\n\n```svelte\n{#if expression}...{/if}\n```\n\n```svelte\n{#if expression}...{:else if expression}...{/if}\n```\n\n```svelte\n{#if expression}...{:else}...{/if}\n```\n\nContent that is conditionally rendered can be wrapped in an if block.\n\n```svelte\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n```\n\nAdditional conditions can be added with `{:else if expression}`, optionally ending in an `{:else}` clause.\n\n```svelte\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n```\n\n(Blocks don't have to wrap elements, they can also wrap text within elements!)\n\n## {#each ...}\n\n```svelte\n{#each expression as name}...{/each}\n```\n\n```svelte\n{#each expression as name, index}...{/each}\n```\n\n```svelte\n{#each expression as name (key)}...{/each}\n```\n\n```svelte\n{#each expression as name, index (key)}...{/each}\n```\n\n```svelte\n{#each expression as name}...{:else}...{/each}\n```\n\nIterating over lists of values can be done with an each block.\n\n```svelte\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n```\n\nYou can use each blocks to iterate over any array or array-like value \u2014 that is, any object with a `length` property.\n\nAn each block can also specify an _index_, equivalent to the second argument in an `array.map(...)` callback:\n\n```svelte\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nIf a _key_ expression is provided \u2014 which must uniquely identify each list item \u2014 Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.\n\n```svelte\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n```\n\nYou can freely use destructuring and rest patterns in each blocks.\n\n```svelte\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n```\n\nAn each block can also have an `{:else}` clause, which is rendered if the list is empty.\n\n```svelte\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n```\n\nSince Svelte 4 it is possible to iterate over iterables like `Map` or `Set`. Iterables need to be finite and static (they shouldn't change while being iterated over). Under the hood, they are transformed to an array using `Array.from` before being passed off to rendering. If you're writing performance-sensitive code, try to avoid iterables and use regular arrays as they are more performant.\n\n## {#await ...",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/03-logic-blocks.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-1",
    "text": "---\ntitle: Element directives\n---\n\nAs well as attributes, elements can have _directives_, which control the element's behaviour in some way.\n\n## on:_eventname_\n\n```svelte\non:eventname={handler}\n```\n\n```svelte\non:eventname|modifiers={handler}\n```\n\nUse the `on:` directive to listen to DOM events.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet count = 0;\n\n\t/** @param {MouseEvent} event */\n\tfunction handleClick(event) {\n\t\tcount += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tcount: {count}\n</button>\n```\n\nHandlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.\n\n```svelte\n<button on:click={() => (count += 1)}>\n\tcount: {count}\n</button>\n```\n\nAdd _modifiers_ to DOM events with the `|` character.\n\n```svelte\n<form on:submit|preventDefault={handleSubmit}>\n\t<!-- the `submit` event's default is prevented,\n\t     so the page won't reload -->\n</form>\n```\n\nThe following modifiers are available:\n\n- `preventDefault` \u2014 calls `event.preventDefault()` before running the handler\n- `stopPropagation` \u2014 calls `event.stopPropagation()`, preventing the event reaching the next element\n- `stopImmediatePropagation` - calls `event.stopImmediatePropagation()`, preventing other listeners of the same event from being fired.\n- `passive` \u2014 improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)\n- `nonpassive` \u2014 explicitly set `passive: false`\n- `capture` \u2014 fires the handler during the _capture_ phase instead of the _bubbling_ phase\n- `once` \u2014 remove the handler after the first time it runs\n- `self` \u2014 only trigger handler if `event.target` is the element itself\n- `trusted` \u2014 only trigger handler if `event.isTrusted` is `true`. I.e. if the event is triggered by a user action.\n\nModifiers can be chained together, e.g. `on:click|once|capture={...}`.\n\nIf the `on:` directive is used without a value, the component will _forward_ the event, meaning that a consumer of the component can listen for it.\n\n```svelte\n<button on:click> The component itself will emit the click event </button>\n```\n\nIt's possible to have multiple event listeners for the same event:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet counter = 0;\n\tfunction increment() {\n\t\tcounter = counter + 1;\n\t}\n\n\t/** @param {MouseEvent} event */\n\tfunction track(event) {\n\t\ttrackEvent(event);\n\t}\n</script>\n\n<button on:click={increment} on:click={track}>Click me!</button>\n```\n\n## bind:_property_\n\n```svelte\nbind:property={variable}\n```\n\nData ordinarily flows down, from parent to child. The `bind:` directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.\n\nThe simplest bindings reflect the value of a property, such as `input.value`.\n\n```svelte\n<input bind:value={name} />\n<textarea bind:value={text} />\n\n<input type=\"checkbox\" bind:checked={yes} />\n```\n\nIf the name matches the value, you can use a shorthand.\n\n```svelte\n<inp",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-2",
    "text": "value`.\n\n```svelte\n<input bind:value={name} />\n<textarea bind:value={text} />\n\n<input type=\"checkbox\" bind:checked={yes} />\n```\n\nIf the name matches the value, you can use a shorthand.\n\n```svelte\n<input bind:value />\n<!-- equivalent to\n<input bind:value={value} />\n-->\n```\n\nNumeric input values are coerced; even though `input.value` is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of `type=\"number\"`), the value is `undefined`.\n\n```svelte\n<input type=\"number\" bind:value={num} />\n<input type=\"range\" bind:value={num} />\n```\n\nOn `<input>` elements with `type=\"file\"`, you can use `bind:files` to get the [`FileList` of selected files](https://developer.mozilla.org/en-US/docs/Web/API/FileList). It is readonly.\n\n```svelte\n<label for=\"avatar\">Upload a picture:</label>\n<input accept=\"image/png, image/jpeg\" bind:files id=\"avatar\" name=\"avatar\" type=\"file\" />\n```\n\nIf you're using `bind:` directives together with `on:` directives, the order that they're defined in affects the value of the bound variable when the event handler is called.\n\n```svelte\n<script>\n\tlet value = 'Hello World';\n</script>\n\n<input\n\ton:input={() => console.log('Old value:', value)}\n\tbind:value\n\ton:input={() => console.log('New value:', value)}\n/>\n```\n\nHere we were binding to the value of a text input, which uses the `input` event. Bindings on other elements may use different events such as `change`.\n\n## Binding `<select>` value\n\nA `<select>` value binding corresponds to the `value` property on the selected `<option>`, which can be any value (not just strings, as is normally the case in the DOM).\n\n```svelte\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n\t<option value={c}>c</option>\n</select>\n```\n\nA `<select multiple>` element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the `value` property of each selected `<option>`.\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option value=\"Rice\">Rice</option>\n\t<option value=\"Beans\">Beans</option>\n\t<option value=\"Cheese\">Cheese</option>\n\t<option value=\"Guac (extra)\">Guac (extra)</option>\n</select>\n```\n\nWhen the value of an `<option>` matches its text content, the attribute can be omitted.\n\n```svelte\n<select multiple bind:value={fillings}>\n\t<option>Rice</option>\n\t<option>Beans</option>\n\t<option>Cheese</option>\n\t<option>Guac (extra)</option>\n</select>\n```\n\nElements with the `contenteditable` attribute support the following bindings:\n\n- [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)\n- [`innerText`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)\n- [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)\n\nThere are slight differences between each of these, read more about them [here](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#Differences_from_innerText).\n\n```svelte\n<div co",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-3",
    "text": "tent)\n\nThere are slight differences between each of these, read more about them [here](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#Differences_from_innerText).\n\n```svelte\n<div contenteditable=\"true\" bind:innerHTML={html} />\n```\n\n`<details>` elements support binding to the `open` property.\n\n```svelte\n<details bind:open={isOpen}>\n\t<summary>Details</summary>\n\t<p>Something small enough to escape casual notice.</p>\n</details>\n```\n\n## Media element bindings\n\nMedia elements (`<audio>` and `<video>`) have their own set of bindings \u2014 seven _readonly_ ones...\n\n- `duration` (readonly) \u2014 the total duration of the video, in seconds\n- `buffered` (readonly) \u2014 an array of `{start, end}` objects\n- `played` (readonly) \u2014 ditto\n- `seekable` (readonly) \u2014 ditto\n- `seeking` (readonly) \u2014 boolean\n- `ended` (readonly) \u2014 boolean\n- `readyState` (readonly) \u2014 number between (and including) 0 and 4\n\n...and five _two-way_ bindings:\n\n- `currentTime` \u2014 the current playback time in the video, in seconds\n- `playbackRate` \u2014 how fast or slow to play the video, where 1 is 'normal'\n- `paused` \u2014 this one should be self-explanatory\n- `volume` \u2014 a value between 0 and 1\n- `muted` \u2014 a boolean value indicating whether the player is muted\n\nVideos additionally have readonly `videoWidth` and `videoHeight` bindings.\n\n```svelte\n<video\n\tsrc={clip}\n\tbind:duration\n\tbind:buffered\n\tbind:played\n\tbind:seekable\n\tbind:seeking\n\tbind:ended\n\tbind:readyState\n\tbind:currentTime\n\tbind:playbackRate\n\tbind:paused\n\tbind:volume\n\tbind:muted\n\tbind:videoWidth\n\tbind:videoHeight\n/>\n```\n\n## Image element bindings\n\nImage elements (`<img>`) have two readonly bindings:\n\n- `naturalWidth` (readonly) \u2014 the original width of the image, available after the image has loaded\n- `naturalHeight` (readonly) \u2014 the original height of the image, available after the image has loaded\n\n```svelte\n<img\n\tbind:naturalWidth\n\tbind:naturalHeight\n></img>\n```\n\n## Block-level element bindings\n\nBlock-level elements have 4 read-only bindings, measured using a technique similar to [this one](http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/):\n\n- `clientWidth`\n- `clientHeight`\n- `offsetWidth`\n- `offsetHeight`\n\n```svelte\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\n```\n\n## bind:group\n\n```svelte\nbind:group={variable}\n```\n\nInputs that work together can use `bind:group`.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\tlet tortilla = 'Plain';\n\n\t/** @type {Array<string>} */\n\tlet fillings = [];\n</script>\n\n<!-- grouped radio inputs are mutually exclusive -->\n<input type=\"radio\" bind:group={tortilla} value=\"Plain\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Whole wheat\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Spinach\" />\n\n<!-- grouped checkbox inputs populate an array -->\n<input type=\"checkbox\" bind:group={fillings} value=\"Rice\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Beans\" />\n<input type=\"checkbox\" bind:group={fillin",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-4",
    "text": "eckbox inputs populate an array -->\n<input type=\"checkbox\" bind:group={fillings} value=\"Rice\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Beans\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Cheese\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Guac (extra)\" />\n```\n\n> `bind:group` only works if the inputs are in the same Svelte component.\n\n## bind:this\n\n```svelte\nbind:this={dom_node}\n```\n\nTo get a reference to a DOM node, use `bind:this`.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { onMount } from 'svelte';\n\n\t/** @type {HTMLCanvasElement} */\n\tlet canvasElement;\n\n\tonMount(() => {\n\t\tconst ctx = canvasElement.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n\n<canvas bind:this={canvasElement} />\n```\n\n## class:_name_\n\n```svelte\nclass:name={value}\n```\n\n```svelte\nclass:name\n```\n\nA `class:` directive provides a shorter way of toggling a class on an element.\n\n```svelte\n<!-- These are equivalent -->\n<div class={isActive ? 'active' : ''}>...</div>\n<div class:active={isActive}>...</div>\n\n<!-- Shorthand, for when name and value match -->\n<div class:active>...</div>\n\n<!-- Multiple class toggles can be included -->\n<div class:active class:inactive={!active} class:isAdmin>...</div>\n```\n\n## style:_property_\n\n```svelte\nstyle:property={value}\n```\n\n```svelte\nstyle:property=\"value\"\n```\n\n```svelte\nstyle:property\n```\n\nThe `style:` directive provides a shorthand for setting multiple styles on an element.\n\n```svelte\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n\n<!-- Variables can be used -->\n<div style:color={myColor}>...</div>\n\n<!-- Shorthand, for when property and variable name match -->\n<div style:color>...</div>\n\n<!-- Multiple styles can be included -->\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n\n<!-- Styles can be marked as important -->\n<div style:color|important=\"red\">...</div>\n```\n\nWhen `style:` directives are combined with `style` attributes, the directives will take precedence:\n\n```svelte\n<div style=\"color: blue;\" style:color=\"red\">This will be red</div>\n```\n\n## use:_action_\n\n```svelte\nuse:action\n```\n\n```svelte\nuse:action={parameters}\n```\n\n```ts\n// @noErrors\naction = (node: HTMLElement, parameters: any) => {\n\tupdate?: (parameters: any) => void,\n\tdestroy?: () => void\n}\n```\n\nActions are functions that are called when an element is created. They can return an object with a `destroy` method that is called after the element is unmounted:\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\t/** @type {import('svelte/action').Action}  */\n\tfunction foo(node) {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div use:foo />\n```\n\nAn action can have a parameter. If the returned value has an `update` method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.\n\n> Don't worry abo",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-5",
    "text": "on can have a parameter. If the returned value has an `update` method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.\n\n> Don't worry about the fact that we're redeclaring the `foo` function for every component instance \u2014 Svelte will hoist any functions that don't depend on local state out of the component definition.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\texport let bar;\n\n\t/** @type {import('svelte/action').Action}  */\n\tfunction foo(node, bar) {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tupdate(bar) {\n\t\t\t\t// the value of `bar` has changed\n\t\t\t},\n\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div use:foo={bar} />\n```\n\nRead more in the [`svelte/action`](/docs/svelte-action) page.\n\n## transition:_fn_\n\n```svelte\ntransition:fn\n```\n\n```svelte\ntransition:fn={params}\n```\n\n```svelte\ntransition:fn|global\n```\n\n```svelte\ntransition:fn|global={params}\n```\n\n```svelte\ntransition:fn|local\n```\n\n```svelte\ntransition:fn|local={params}\n```\n\n```js\n// @noErrors\ntransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\nA transition is triggered by an element entering or leaving the DOM as a result of a state change.\n\nWhen a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.\n\nThe `transition:` directive indicates a _bidirectional_ transition, which means it can be smoothly reversed while the transition is in progress.\n\n```svelte\n{#if visible}\n\t<div transition:fade>fades in and out</div>\n{/if}\n```\n\nTransitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, _not_ when parent blocks are created or destroyed.\n\n```svelte\n{#if x}\n\t{#if y}\n\t\t<!-- Svelte 3: <p transition:fade|local> -->\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<!-- Svelte 3: <p transition:fade> -->\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n```\n\n> By default intro transitions will not play on first render. You can modify this behaviour by setting `intro: true` when you [create a component](/docs/client-side-component-api) and marking the transition as `global`.\n\n## Transition parameters\n\nLike actions, transitions can have parameters.\n\n(The double `{{curlies}}` aren't a special syntax; this is an object literal inside an expression tag.)\n\n```svelte\n{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}\n```\n\n## Custom transition functions\n\nTransitions can use custom functions. If the returned object has a `css` function, Svelte will create a CSS anima",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-6",
    "text": " }}>fades in and out over two seconds</div>\n{/if}\n```\n\n## Custom transition functions\n\nTransitions can use custom functions. If the returned object has a `css` function, Svelte will create a CSS animation that plays on the element.\n\nThe `t` argument passed to `css` is a value between `0` and `1` after the `easing` function has been applied. _In_ transitions run from `0` to `1`, _out_ transitions run from `1` to `0` \u2014\u00a0in other words, `1` is the element's natural state, as though no transition had been applied. The `u` argument is equal to `1 - t`.\n\nThe function is called repeatedly _before_ the transition begins, with different `t` and `u` arguments.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\t/** @type {boolean} */\n\texport let visible;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\n\t */\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}\n```\n\nA custom transition function can also return a `tick` function, which is called _during_ the transition with the same `t` and `u` arguments.\n\n> If it's possible to use `css` instead of `tick`, do so \u2014 CSS animations can run off the main thread, preventing jank on slower devices.\n\n```svelte\n<!--- file: App.svelte --->\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?: number }} params\n\t */\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n```\n\nIf a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making [crossfade effects](https://learn.svelte.dev/tutorial/deferred-transitions) possible.\n\nTransition functions also receive a third argument, `options`, which contains information about the transition.\n\nAvailable values in the `options` object are:\n\n- `direction` - one of `in`, `out`, or `both` depending on the type of transition\n\n## Transition events\n\nAn element with transitions will dispatch the following events in addition to any standard DOM events:\n\n- `introstart`\n- `introend`\n- `outrostart`\n- `",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b174c415-bd4c-43a6-91fb-a7d68697152b-7",
    "text": " on the type of transition\n\n## Transition events\n\nAn element with transitions will dispatch the following events in addition to any standard DOM events:\n\n- `introstart`\n- `introend`\n- `outrostart`\n- `outroend`\n\n```svelte\n{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\ton:introstart={() => (status = 'intro started')}\n\t\ton:outrostart={() => (status = 'outro started')}\n\t\ton:introend={() => (status = 'intro ended')}\n\t\ton:outroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}\n```\n\n## in:_fn_/out:_fn_\n\n```svelte\nin:fn\n```\n\n```svelte\nin:fn={params}\n```\n\n```svelte\nin:fn|global\n```\n\n```svelte\nin:fn|global={params}\n```\n\n```svelte\nin:fn|local\n```\n\n```svelte\nin:fn|local={params}\n```\n\n```svelte\nout:fn\n```\n\n```svelte\nout:fn={params}\n```\n\n```svelte\nout:fn|global\n```\n\n```svelte\nout:fn|global={params}\n```\n\n```svelte\nout:fn|local\n```\n\n```svelte\nout:fn|local={params}\n```\n\nSimilar to `transition:`, but only applies to elements entering (`in:`) or leaving (`out:`) the DOM.\n\nUnlike with `transition:`, transitions applied with `in:` and `out:` are not bidirectional \u2014 an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.\n\n```svelte\n{#if visible}\n\t<div in:fly out:fade>flies in, fades out</div>\n{/if}\n```\n\n## animate:_fn_\n\n```svelte\nanimate:name\n```\n\n```svelte\nanimate:name={params}\n```\n\n```js\n// @noErrors\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n```\n\n```ts\n// @noErrors\nDOMRect {\n\tbottom: number,\n\theight: number,\n\t\u200b\u200bleft: number,\n\tright: number,\n\t\u200btop: number,\n\twidth: number,\n\tx: number,\n\ty: number\n}\n```\n\nAn animation is triggered when the contents of a [keyed each block](/docs/logic-blocks#each) are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an _immediate_ child of a keyed each block.\n\nAnimations can be used with Svelte's [built-in animation functions](/docs/svelte-animate) or [custom animation functions](/docs/element-directives#custom-animation-functions).\n\n```svelte\n<!-- When `list` is reordered the animation will run-->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\n```\n\n## Animation Parameters\n\nAs with actions and transitions, animations can have parameters.\n\n(The double `{{curlies}}` aren't a special syntax; this is an object literal inside an expression tag.)\n\n```svelte\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\n```\n\n## Custom animation functions\n\nAnimations can use custom functions that provide the `node`, an `animation` object and any `paramete",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/05-element-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "c1dd820f-56dd-4138-a79e-24abf05d3435-1",
    "text": "---\ntitle: Component directives\n---\n\n## on:_eventname_\n\n```svelte\non:eventname={handler}\n```\n\nComponents can emit events using [`createEventDispatcher`](/docs/svelte#createeventdispatcher) or by forwarding DOM events.\n\n```svelte\n<!-- SomeComponent.svelte -->\n<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n</script>\n\n<!-- programmatic dispatching -->\n<button on:click={() => dispatch('hello')}>\n  one\n</button>\n\n<!-- declarative event forwarding -->\n<button on:click>\n  two\n</button>\n```\n\nListening for component events looks the same as listening for DOM events:\n\n```svelte\n<SomeComponent on:whatever={handler} />\n```\n\nAs with DOM events, if the `on:` directive is used without a value, the event will be forwarded, meaning that a consumer can listen for it.\n\n```svelte\n<SomeComponent on:whatever />\n```\n\n## --style-props\n\n```svelte\n--style-props=\"anycssvalue\"\n```\n\nYou can also pass styles as props to components for the purposes of theming, using CSS custom properties.\n\nSvelte's implementation is essentially syntactic sugar for adding a wrapper element. This example:\n\n```svelte\n<Slider bind:value min={0} --rail-color=\"black\" --track-color=\"rgb(0, 0, 255)\" />\n```\n\nDesugars to this:\n\n```svelte\n<div style=\"display: contents; --rail-color: black; --track-color: rgb(0, 0, 255)\">\n\t<Slider bind:value min={0} max={100} />\n</div>\n```\n\n**Note**: Since this is an extra `<div>`, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.\n\nFor SVG namespace, the example above desugars into using `<g>` instead:\n\n```svelte\n<g style=\"--rail-color: black; --track-color: rgb(0, 0, 255)\">\n\t<Slider bind:value min={0} max={100} />\n</g>\n```\n\n**Note**: Since this is an extra `<g>`, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.\n\nSvelte's CSS Variables support allows for easily themeable components:\n\n```svelte\n<!-- Slider.svelte -->\n<style>\n\t.potato-slider-rail {\n\t\tbackground-color: var(--rail-color, var(--theme-color, 'purple'));\n\t}\n</style>\n```\n\nSo you can set a high-level theme color:\n\n```css\n/* global.css */\nhtml {\n\t--theme-color: black;\n}\n```\n\nOr override it at the consumer level:\n\n```svelte\n<Slider --rail-color=\"goldenrod\" />\n```\n\n## bind:_property_\n\n```svelte\nbind:property={variable}\n```\n\nYou can bind to component props using the same syntax as for elements.\n\n```svelte\n<Keypad bind:value={pin} />\n```\n\nWhile Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using `bind:property` allows changes to the property from within the component to flow back up out of the component.\n\n## bind:this\n\n```svelte\nbind:this={component_instance}\n```\n\nComponents also support `bind:this`, allowing you to interact with component instances programmatically.\n\n```svelte\n<ShoppingCart bind:this={cart} />\n\n<button on:click={() => cart.emp",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/02-template-syntax/06-component-directives.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e98855ad-ab42-4099-b93b-f1431db90c79-1",
    "text": "---\ntitle: 'Custom elements API'\n---\n\nSvelte components can also be compiled to custom elements (aka web components) using the `customElement: true` compiler option. You should specify a tag name for the component using the `<svelte:options>` [element](/docs/special-elements#svelte-options).\n\n```svelte\n<svelte:options customElement=\"my-element\" />\n\n<!-- in Svelte 3, do this instead:\n<svelte:options tag=\"my-element\" />\n-->\n\n<script>\n\texport let name = 'world';\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />\n```\n\nYou can leave out the tag name for any of your inner components which you don't want to expose and use them like regular Svelte components. Consumers of the component can still name it afterwards if needed, using the static `element` property which contains the custom element constructor and which is available when the `customElement` compiler option is `true`.\n\n```js\n// @noErrors\nimport MyElement from './MyElement.svelte';\n\ncustomElements.define('my-element', MyElement.element);\n// In Svelte 3, do this instead:\n// customElements.define('my-element', MyElement);\n```\n\nOnce a custom element has been defined, it can be used as a regular DOM element:\n\n```js\ndocument.body.innerHTML = `\n\t<my-element>\n\t\t<p>This is some slotted content</p>\n\t</my-element>\n`;\n```\n\nBy default, custom elements are compiled with `accessors: true`, which means that any [props](/docs/basic-markup#attributes-and-props) are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible).\n\nTo prevent this, add `accessors={false}` to `<svelte:options>`.\n\n```js\n// @noErrors\nconst el = document.querySelector('my-element');\n\n// get the current value of the 'name' prop\nconsole.log(el.name);\n\n// set a new value, updating the shadow DOM\nel.name = 'everybody';\n```\n\n## Component lifecycle\n\nCustom elements are created from Svelte components using a wrapper approach. This means the inner Svelte component has no knowledge that it is a custom element. The custom element wrapper takes care of handling its lifecycle appropriately.\n\nWhen a custom element is created, the Svelte component it wraps is _not_ created right away. It is only created in the next tick after the `connectedCallback` is invoked. Properties assigned to the custom element before it is inserted into the DOM are temporarily saved and then set on component creation, so their values are not lost. The same does not work for invoking exported functions on the custom element though, they are only available after the element has mounted. If you need to invoke functions before component creation, you can work around it by using the [`extend` option](#component-options).\n\nWhen a custom element written with Svelte is created or updated, the shadow DOM will reflect the value in the next tick, not immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component.\n\nThe inner Svelte compon",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/04-custom-elements-api.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e98855ad-ab42-4099-b93b-f1431db90c79-2",
    "text": "immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component.\n\nThe inner Svelte component is destroyed in the next tick after the `disconnectedCallback` is invoked.\n\n## Component options\n\nWhen constructing a custom element, you can tailor several aspects by defining `customElement` as an object within `<svelte:options>` since Svelte 4. This object may contain the following properties:\n\n- `tag`: the mandatory `tag` property for the custom element's name\n- `shadow`: an optional property that can be set to `\"none\"` to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots\n- `props`: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings:\n  - `attribute: string`: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning `attribute: \"<desired name>\"`.\n  - `reflect: boolean`: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set `reflect: true`.\n  - `type: 'String' | 'Boolean' | 'Number' | 'Array' | 'Object'`: While converting an attribute value to a prop value and reflecting it back, the prop value is assumed to be a `String` by default. This may not always be accurate. For instance, for a number type, define it using `type: \"Number\"`\n    You don't need to list all properties, those not listed will use the default settings.\n- `extend`: an optional property which expects a function as its argument. It is passed the custom element class generated by Svelte and expects you to return a custom element class. This comes in handy if you have very specific requirements to the life cycle of the custom element or want to enhance the class to for example use [ElementInternals](https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals#examples) for better HTML form integration.\n\n```svelte\n<svelte:options\n\tcustomElement={{\n\t\ttag: 'custom-element',\n\t\tshadow: 'none',\n\t\tprops: {\n\t\t\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\n\t\t},\n\t\textend: (customElementConstructor) => {\n\t\t\t// Extend the class so we can let it participate in HTML forms\n\t\t\treturn class extends customElementConstructor {\n\t\t\t\tstatic formAssociated = true;\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tthis.attachedInternals = this.attachInternals();\n\t\t\t\t}\n\n\t\t\t\t// Add the function here, not below in the component so that\n\t\t\t\t// it's always available, not just when the inner Svelte component\n\t\t\t\t// is mounted\n\t\t\t\trandomIndex() {\n\t\t\t\t\tthis.elementIndex = Math.random();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}}\n/>\n\n<script>\n\texport let elementIndex;\n\texport let attachedInternals;\n\t// ...\n\tfunction check() {\n\t\tattachedInternals.checkV",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/04-custom-elements-api.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "3cf5b427-2f8b-431c-9f9d-1d51831cfcfb-1",
    "text": "---\ntitle: 'svelte/compiler'\n---\n\nTypically, you won't interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin. The bundler plugin that the Svelte team most recommends and invests in is [vite-plugin-svelte](https://github.com/sveltejs/vite-plugin-svelte). The [SvelteKit](https://kit.svelte.dev/) framework provides a setup leveraging `vite-plugin-svelte` to build applications as well as a [tool for packaging Svelte component libraries](https://kit.svelte.dev/docs/packaging). Svelte Society maintains a list of [other bundler plugins](https://sveltesociety.dev/tools/#bundling) for additional tools like Rollup and Webpack.\n\nNonetheless, it's useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you.\n\n## compile\n\n> EXPORT_SNIPPET: svelte/compiler#compile\n\nThis is where the magic happens. `svelte.compile` takes your component source code, and turns it into a JavaScript module that exports a class.\n\n```js\n// @filename: ambient.d.ts\ndeclare global {\n\tvar source: string\n}\n\nexport {}\n\n// @filename: index.ts\n// ---cut---\nimport { compile } from 'svelte/compiler';\n\nconst result = compile(source, {\n\t// options\n});\n```\n\nRefer to [CompileOptions](#types-compileoptions) for all the available options.\n\nThe returned `result` object contains the code for your component, along with useful bits of metadata.\n\n```ts\n// @filename: ambient.d.ts\ndeclare global {\n\tconst source: string;\n}\n\nexport {};\n\n// @filename: main.ts\nimport { compile } from 'svelte/compiler';\n// ---cut---\nconst { js, css, ast, warnings, vars, stats } = compile(source);\n```\n\nRefer to [CompileResult](#types-compileresult) for a full description of the compile result.\n\n## parse\n\n> EXPORT_SNIPPET: svelte/compiler#parse\n\nThe `parse` function parses a component, returning only its abstract syntax tree. Unlike compiling with the `generate: false` option, this will not perform any validation or other analysis of the component beyond parsing it. Note that the returned AST is not considered public API, so breaking changes could occur at any point in time.\n\n```js\n// @filename: ambient.d.ts\ndeclare global {\n\tvar source: string;\n}\n\nexport {};\n\n// @filename: main.ts\n// ---cut---\nimport { parse } from 'svelte/compiler';\n\nconst ast = parse(source, { filename: 'App.svelte' });\n```\n\n## preprocess\n\n> EXPORT_SNIPPET: svelte/compiler#preprocess\n\nA number of [official and community-maintained preprocessing plugins](https://sveltesociety.dev/tools#preprocessors) are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less.\n\nYou can write your own preprocessor using the `svelte.preprocess` API.\n\nThe `preprocess` function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a `<style lang=\"sass\">` block into vanilla CSS.\n\nThe first argument is the component source code. The second is an array of _preprocessors_ (or a s",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/01-svelte-compiler.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "3cf5b427-2f8b-431c-9f9d-1d51831cfcfb-2",
    "text": " source code. For example, it can be used to convert a `<style lang=\"sass\">` block into vanilla CSS.\n\nThe first argument is the component source code. The second is an array of _preprocessors_ (or a single preprocessor, if you only have one), where a preprocessor is an object with a `name` which is required, and `markup`, `script` and `style` functions, each of which is optional.\n\nThe `markup` function receives the entire component source text, along with the component's `filename` if it was specified in the third argument.\n\nThe `script` and `style` functions receive the contents of `<script>` and `<style>` elements respectively (`content`) as well as the entire component source text (`markup`). In addition to `filename`, they get an object of the element's attributes.\n\nEach `markup`, `script` or `style` function must return an object (or a Promise that resolves to an object) with a `code` property, representing the transformed source code. Optionally they can return an array of `dependencies` which represents files to watch for changes, and a `map` object which is a sourcemap mapping back the transformation to the original code. `script` and `style` preprocessors can optionally return a record of attributes which represent the updated attributes on the script/style tag.\n\n> Preprocessor functions should return a `map` object whenever possible or else debugging becomes harder as stack traces can't link to the original code correctly.\n\n```js\n// @filename: ambient.d.ts\ndeclare global {\n\tvar source: string;\n}\n\nexport {};\n\n// @filename: main.ts\n// ---cut---\nimport { preprocess } from 'svelte/compiler';\nimport MagicString from 'magic-string';\n\nconst { code } = await preprocess(\n\tsource,\n\t{\n\t\tmarkup: ({ content, filename }) => {\n\t\t\tconst pos = content.indexOf('foo');\n\t\t\tif (pos < 0) {\n\t\t\t\treturn { code: content };\n\t\t\t}\n\t\t\tconst s = new MagicString(content, { filename });\n\t\t\ts.overwrite(pos, pos + 3, 'bar', { storeName: true });\n\t\t\treturn {\n\t\t\t\tcode: s.toString(),\n\t\t\t\tmap: s.generateMap()\n\t\t\t};\n\t\t}\n\t},\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n```\n\nIf a `dependencies` array is returned, it will be included in the result object. This is used by packages like [vite-plugin-svelte](https://github.com/sveltejs/vite-plugin-svelte) and [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) to watch additional files for changes, in the case where your `<style>` tag has an `@import` (for example).\n\n```ts\n// @filename: ambient.d.ts\ndeclare global {\n\tvar source: string;\n}\n\nexport {};\n\n// @filename: main.ts\n// @errors: 2322 2345 2339\n/// <reference types=\"@types/node\" />\n// ---cut---\nimport { preprocess } from 'svelte/compiler';\nimport MagicString from 'magic-string';\nimport sass from 'sass';\nimport { dirname } from 'path';\n\nconst { code } = await preprocess(\n\tsource,\n\t{\n\t\tname: 'my-fancy-preprocessor',\n\t\tmarkup: ({ content, filename }) => {\n\t\t\t// Return code as is when no foo string present\n\t\t\tconst pos = content.indexOf('foo');\n\t\t\tif (pos < 0) {\n\t\t\t\tretu",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/01-svelte-compiler.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "3cf5b427-2f8b-431c-9f9d-1d51831cfcfb-3",
    "text": "\tsource,\n\t{\n\t\tname: 'my-fancy-preprocessor',\n\t\tmarkup: ({ content, filename }) => {\n\t\t\t// Return code as is when no foo string present\n\t\t\tconst pos = content.indexOf('foo');\n\t\t\tif (pos < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Replace foo with bar using MagicString which provides\n\t\t\t// a source map along with the changed code\n\t\t\tconst s = new MagicString(content, { filename });\n\t\t\ts.overwrite(pos, pos + 3, 'bar', { storeName: true });\n\n\t\t\treturn {\n\t\t\t\tcode: s.toString(),\n\t\t\t\tmap: s.generateMap({ hires: true, file: filename })\n\t\t\t};\n\t\t},\n\t\tstyle: async ({ content, attributes, filename }) => {\n\t\t\t// only process <style lang=\"sass\">\n\t\t\tif (attributes.lang !== 'sass') return;\n\n\t\t\tconst { css, stats } = await new Promise((resolve, reject) =>\n\t\t\t\tsass.render(\n\t\t\t\t\t{\n\t\t\t\t\t\tfile: filename,\n\t\t\t\t\t\tdata: content,\n\t\t\t\t\t\tincludePaths: [dirname(filename)]\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) reject(err);\n\t\t\t\t\t\telse resolve(result);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// remove lang attribute from style tag\n\t\t\tdelete attributes.lang;\n\n\t\t\treturn {\n\t\t\t\tcode: css.toString(),\n\t\t\t\tdependencies: stats.includedFiles,\n\t\t\t\tattributes\n\t\t\t};\n\t\t}\n\t},\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n```\n\nMultiple preprocessors can be used together. The output of the first becomes the input to the second. Within one preprocessor, `markup` runs first, then `script` and `style`.\n\n> In Svelte 3, all `markup` functions ran first, then all `script` and then all `style` preprocessors. This order was changed in Svelte 4.\n\n```js\n// @errors: 2322\n// @filename: ambient.d.ts\ndeclare global {\n\tvar source: string;\n}\n\nexport {};\n\n// @filename: main.ts\n// ---cut---\nimport { preprocess } from 'svelte/compiler';\n\nconst { code } = await preprocess(source, [\n\t{\n\t\tname: 'first preprocessor',\n\t\tmarkup: () => {\n\t\t\tconsole.log('this runs first');\n\t\t},\n\t\tscript: () => {\n\t\t\tconsole.log('this runs second');\n\t\t},\n\t\tstyle: () => {\n\t\t\tconsole.log('this runs third');\n\t\t}\n\t},\n\t{\n\t\tname: 'second preprocessor',\n\t\tmarkup: () => {\n\t\t\tconsole.log('this runs fourth');\n\t\t},\n\t\tscript: () => {\n\t\t\tconsole.log('this runs fifth');\n\t\t},\n\t\tstyle: () => {\n\t\t\tconsole.log('this runs sixth');\n\t\t}\n\t}\n], {\n\tfilename: 'App.svelte'\n});\n```\n\n## walk\n\n> EXPORT_SNIPPET: svelte/compiler#walk\n\nThe `walk` function provides a way to walk the abstract syntax trees generated by the parser, using the compiler's own built-in instance of [estree-walker](https://github.com/Rich-Harris/estree-walker).\n\nThe walker takes an abstract syntax tree to walk and an object with two optional methods: `enter` and `leave`. For each node, `enter` is called (if present). Then, unless `this.skip()` is called during `enter`, each of the children are traversed, and then `leave` is called on the node.\n\n```js\n// @filename: ambient.d.ts\ndeclare global {\n\tvar ast: import('estree').Node;\n\tfunction do_something(node: import('estree').Node): void;\n\tfunction do_something_else(node: import('estree').Node): void;\n\tfunction should_skip_children(node: import('estree').Node): boolean;\n}\n\nexport {};",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/01-svelte-compiler.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7926524c-0957-4392-83b6-d69a953a3c6f-1",
    "text": "---\ntitle: 'Client-side component API'\n---\n\n## Creating a component\n\n```ts\n// @errors: 2554\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar options: ComponentConstructorOptions<Record<string, any>>;\n}\n\n// @filename: index.ts\n// @errors: 2554\n// ---cut---\nconst component = new Component(options);\n```\n\nA client-side component \u2014\u00a0that is, a component compiled with `generate: 'dom'` (or the `generate` option left unspecified) is a JavaScript class.\n\n```ts\n// @errors: 2554\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare module './App.svelte' {\n\tclass Component extends SvelteComponent {}\n\texport default Component;\n}\n\n// @filename: index.ts\n// @errors: 2554\n// ---cut---\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\t// assuming App.svelte contains something like\n\t\t// `export let answer`:\n\t\tanswer: 42\n\t}\n});\n```\n\nThe following initialisation options can be provided:\n\n| option    | default     | description                                                                                          |\n| --------- | ----------- | ---------------------------------------------------------------------------------------------------- |\n| `target`  | **none**    | An `HTMLElement` or `ShadowRoot` to render to. This option is required                               |\n| `anchor`  | `null`      | A child of `target` to render the component immediately before                                       |\n| `props`   | `{}`        | An object of properties to supply to the component                                                   |\n| `context` | `new Map()` | A `Map` of root-level context key-value pairs to supply to the component                             |\n| `hydrate` | `false`     | See below                                                                                            |\n| `intro`   | `false`     | If `true`, will play transitions on initial render, rather than waiting for subsequent state changes |\n\nExisting children of `target` are left where they are.\n\nThe `hydrate` option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the [`hydratable: true` option](/docs/svelte-compiler#compile). Hydration of `<head>` elements only works properly if the server-side rendering code was also compiled with `hydratable: true`, which adds a marker to each element in the `<head>` so that the component knows which elements it's responsible for removing during hydration.\n\nWhereas children of `target` are normally left alone, `hydrate: true` will cause any children to be removed. For that reason, the `anchor` option cannot be used alongside `hydrate: true`.\n\nThe existing DOM doesn't need to match the component \u2014 Svelte will 'repair' the DOM as it go",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/02-client-side-component-api.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7926524c-0957-4392-83b6-d69a953a3c6f-2",
    "text": "any children to be removed. For that reason, the `anchor` option cannot be used alongside `hydrate: true`.\n\nThe existing DOM doesn't need to match the component \u2014 Svelte will 'repair' the DOM as it goes.\n\n```ts\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare module './App.svelte' {\n\tclass Component extends SvelteComponent {}\n\texport default Component;\n}\n\n// @filename: index.ts\n// @errors: 2322 2554\n// ---cut---\nimport App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.querySelector('#server-rendered-html'),\n\thydrate: true\n});\n```\n\n## `$set`\n\n```ts\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar component: Component;\n\tvar props: Record<string, any>;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\ncomponent.$set(props);\n```\n\nProgrammatically sets props on an instance. `component.$set({ x: 1 })` is equivalent to `x = 1` inside the component's `<script>` block.\n\nCalling this method schedules an update for the next microtask \u2014 the DOM is _not_ updated synchronously.\n\n```ts\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar component: Component;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\ncomponent.$set({ answer: 42 });\n```\n\n## `$on`\n\n```ts\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar component: Component;\n\tvar ev: string;\n\tvar callback: (event: CustomEvent) => void;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\ncomponent.$on(ev, callback);\n```\n\nCauses the `callback` function to be called whenever the component dispatches an `event`.\n\nA function is returned that will remove the event listener when called.\n\n```ts\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar component: Component;\n}\n\nexport {};\n\n// @filename: index.ts\n// ---cut---\nconst off = component.$on('selected', (event) => {\n\tconsole.log(event.detail.selection);\n});\n\noff();\n```\n\n## `$destroy`\n\n```js\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar component: Component;\n}\n\nexport {}\n\n// @filename: index.ts\n// ---cut---\ncomponent.$destroy();\n```\n\nRemoves a component from the DOM and triggers any `onDestroy` handlers.\n\n## Component props\n\n```js\n// @filename: ambient.d.ts\nimport { SvelteComponent, ComponentConstructorOptions } from 'svelte';\n\ndeclare global {\n\tclass Component extends SvelteComponent {}\n\tvar component: Component;\n}\n\nexport {}\n\n// @filename: index.ts\n// @errors: 2339\n// ---cut---\ncomponent.prop;\n```\n\n```js\n// @filename: ambie",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/docs/04-compiler-and-api/02-client-side-component-api.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "ef3b2402-c06f-49c9-8f8c-d98afd910d30-1",
    "text": "---\ntitle: 'Svelte 3: Rethinking reactivity'\ndescription: It's finally here\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\nAfter several months of being just days away, we are over the moon to announce the stable release of Svelte 3. This is a huge release representing hundreds of hours of work by many people in the Svelte community, including invaluable feedback from beta testers who have helped shape the design every step of the way.\n\nWe think you're going to love it.\n\n## What is Svelte?\n\nSvelte is a component framework \u2014\u00a0like React or Vue \u2014 but with an important difference. Traditional frameworks allow you to write _declarative_ state-driven code, but there's a penalty: the browser must do extra work to convert those declarative structures into DOM operations, using techniques like [virtual DOM diffing](/blog/virtual-dom-is-pure-overhead) that eat into your frame budget and tax the garbage collector.\n\nInstead, Svelte runs at _build time_, converting your components into highly efficient _imperative_ code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.\n\nThe first version of Svelte was all about [testing a hypothesis](/blog/frameworks-without-the-framework) \u2014 that a purpose-built compiler could generate rock-solid code that delivered a great user experience. The second was a small upgrade that tidied things up a bit.\n\nVersion 3 is a significant overhaul. Our focus for the last five or six months has been on delivering an outstanding _developer_ experience. It's now possible to write components with [significantly less boilerplate](/blog/write-less-code) than you'll find elsewhere. Try the brand new [tutorial](/tutorial) and see what we mean \u2014\u00a0if you're familiar with other frameworks we think you'll be pleasantly surprised.\n\nTo make that possible we first needed to rethink the concept at the heart of modern UI frameworks: reactivity.\n\n<div class=\"max\">\n<figure style=\"max-width: 960px; margin: 0 auto\">\n<div style=\"height: 0; padding: 0 0 57.1% 0; position: relative; margin: 0 auto;\">\n\t<iframe style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0; margin: 0;\" src=\"https://www.youtube-nocookie.com/embed/AdNJ3fydeao\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<figcaption>'Rethinking Reactivity' from <a href=\"https://www.israel.yglfconf.com/\">You Gotta Love Frontend Code Camp</a></figcaption>\n</figure>\n</div>\n\n## Moving reactivity into the language\n\nIn old Svelte, you would tell the computer that some state had changed by calling the `this.set` method:\n\n```js\n// @noErrors\nconst { count } = this.get();\nthis.set({\n\tcount: count + 1\n});\n```\n\nThat would cause the component to _react_. Speaking of which, `this.set` is almost identical to the `this.setState` method used in classical (pre-hooks) React:\n\n```js\n// @noErrors\nconst { count } = this.state;\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2019-04-22-svelte-3-rethinking-reactivity.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "ef3b2402-c06f-49c9-8f8c-d98afd910d30-2",
    "text": " cause the component to _react_. Speaking of which, `this.set` is almost identical to the `this.setState` method used in classical (pre-hooks) React:\n\n```js\n// @noErrors\nconst { count } = this.state;\nthis.setState({\n\tcount: count + 1\n});\n```\n\nThere are some important technical differences (as I explain in the video above, React is not reactive) but conceptually it's the same thing.\n\n<aside>\n\t<p>In fact, Svelte 3 is basically <a href=\"https://twitter.com/threepointone/status/1057179801109311488\">Sunil's fault</a>.</p>\n</aside>\n\nThat all changed with the advent of [hooks](https://reactjs.org/docs/hooks-intro.html), which handle state in a very different fashion. Many frameworks started experimenting with their own implementations of hooks, but we quickly concluded it wasn't a direction we wanted to go in. Hooks have some intriguing properties, but they also involve some unnatural code and create unnecessary work for the garbage collector. For a framework that's used in [embedded devices](https://mobile.twitter.com/sveltejs/status/1088500539640418304) as well as animation-heavy interactives, that's no good.\n\nSo we took a step back and asked ourselves what kind of API would work for us... and realised that the best API is no API at all. We can just _use the language_. Updating some `count` value \u2014 and all the things that depend on it \u2014 should be as simple as this:\n\n```ts\nlet count: number = 10;\n// ---cut---\ncount += 1;\n```\n\nSince we're a compiler, we can do that by instrumenting assignments behind the scenes:\n\n```ts\nlet count: number = 10;\nconst $$invalidate = <T>(name: string, value: T) => {\n\treturn void 0;\n};\n// ---cut---\ncount += 1;\n$$invalidate('count', count);\n```\n\nImportantly, we can do all this without the overhead and complexity of using proxies or accessors. It's just a variable.\n\n## New look\n\nYour components aren't the only thing that's getting a facelift. Svelte itself has a completely new look and feel, thanks to the amazing design work of [Achim Vedam](https://vedam.de/) who created our new logo and website, which has moved from [svelte.technology](https://svelte.technology) to [svelte.dev](https://svelte.dev).\n\nWe've also changed our tagline, from 'The magical disappearing UI framework' to 'Cybernetically enhanced web apps'. Svelte has many aspects \u2014 outstanding performance, small bundles, accessibility, built-in style encapsulation, declarative transitions, ease of use, the fact that it's a compiler, etc \u2014 that focusing on any one of them feels like an injustice to the others. 'Cybernetically enhanced' is designed to instead evoke Svelte's overarching philosophy that our tools should work as intelligent extensions of ourselves \u2014 hopefully with a retro, William Gibson-esque twist.\n\n## Upgrading from version 2\n\nIf you're an existing Svelte 2 user, I'm afraid there is going to be some manual upgrading involved. In the coming days we'll release a migration guide and an updated version of [svelte-upgrade](https://github.com/sveltejs/svelte-",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2019-04-22-svelte-3-rethinking-reactivity.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "30b1fbe2-fe7d-489f-9b6b-05dced5e61ab-1",
    "text": "---\ntitle: \"What's new in Svelte: January 2022\"\ndescription: 'Faster builds with SvelteKit and a much anticipated REPL feature'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nHappy new year, Svelte Community! Lots to share this month across Svelte, SvelteKit, Language Tools and the Showcase. Thanks to everyone who made 2021 a great year to use Svelte. Looking forward to the next one \ud83d\ude80\n\n## What's new in SvelteKit\n\n- `@sveltejs/adapter-static` for SvelteKit now has a `precompress` option to make brotli compression of assets and pages easier to do out of the box ([#3079](https://github.com/sveltejs/kit/pull/3079))\n- Concurrency mode in SvelteKit will now prerender pages in parallel ([#3120](https://github.com/sveltejs/kit/pull/3120)). It is enabled by default in `1.0.0-next.205` and later\n- CSS is now automatically included before JS for improved page performance ([d13efe](https://github.com/sveltejs/kit/commit/d138efe21692f5925f1e89afc0a33f42d6a1a711))\n- A new config option adds the ability to disable service worker registration to do your own custom registration ([#2988](https://github.com/sveltejs/kit/pull/2988))\n- SSR route-splitting is here - breaking monolithic builds into smaller pieces for improved startup and routing performance ([#2931](https://github.com/sveltejs/kit/pull/2931))\n- `request.origin/path/query` is now `request.url` - simplifying the config and page `load` functions ([#3126](https://github.com/sveltejs/kit/pull/3126))\n- After the [update to Vite 2.7](https://github.com/sveltejs/kit/pull/3018), SvelteKit users are [reporting significant performance improvements](https://www.reddit.com/r/sveltejs/comments/rljhfc/sveltekit_massive_compiler_improvement_by/) and loading third-parties libraries in SSR has also been greatly improved\n- SvelteKit server will now automatically restart when the config files is changed ([vite-plugin-svelte#237](https://github.com/sveltejs/vite-plugin-svelte/pull/237))\n\n## Other new bits from `svelte/*`\n\n- [Svelte 3.44.3](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3443) is out with a few bug fixes in the binding and loop code\n- Svelte Language Tools has introduced support for the then/catch shorthands from Svelte 3.41 and TypeScript's \"go to\" functionality ([105.8.0 and later](https://github.com/sveltejs/language-tools/releases/tag/extensions-105.8.0))\n- The Svelte REPL got a nice upgrade as well - letting you delete saved REPLs. Try it out by logging in at [svelte.dev/apps](https://svelte.dev/apps)\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [Discover Twitter Spaces](https://github.com/navneetsharmaui/discover-twitter-spaces) is a tool that helps you find the Twitter Spaces\n- [Modern Fluid Typography Editor](https://github.com/codeAdrian/modern-fluid-typography-editor) helps create beautiful fluid typography using CSS clamp\n- [Unnwhiteboard](https://github.com/AviKKi/unnwhiteboard) is a job board for companies (or teams) that don't do \"whiteboard\" interviews\n- [Secret",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-01-01-whats-new-in-svelte-january-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "30b1fbe2-fe7d-489f-9b6b-05dced5e61ab-2",
    "text": "lps create beautiful fluid typography using CSS clamp\n- [Unnwhiteboard](https://github.com/AviKKi/unnwhiteboard) is a job board for companies (or teams) that don't do \"whiteboard\" interviews\n- [Secret Santa](https://gitlab.com/arturoguzman/secret-santa-sveltekit) is a gift giving coordination app developed with easiness in mind\n- [LogSnag](https://logsnag.com/) notifies you of your projects' events and provides you with a timeline to keep track of anything important that happens\n- [Version 0.2 of Tangent](http://tangentnotes.com/Download), a Svelte-based note writing app, is now in beta\n- [Intl Explorer](https://github.com/jesperorb/intl-explorer) is a tool for viewing output for all possible formatters for Intl\n\nA lot of work this month has gone into migrating the Svelte main website and Svelte REPL to live in the https://github.com/sveltejs/sites repository - including a brand new homepage for [svelte.dev](https://svelte.dev/). Thanks to all the contributors who made this possible!\n\nIf you're looking for a fun SvelteKit project to work on, [you can contribute to the Svelte Society site rewrite](https://github.com/svelte-society/sveltesociety-2021/issues) \ud83d\udc85\n\n**Learning and Listening**\n\n_To Read_\n\n- [Mutating Query Params in SvelteKit Without Page Reloads or Navigations](https://dev.to/mohamadharith/mutating-query-params-in-sveltekit-without-page-reloads-or-navigations-2i2b) by Mohamad Harith\n- [Svelte for Reactaholics : A guide for React developers](https://www.100ms.live/blog/svelte-guide-for-react-developers) by Puru Vijay\n- [Svelte's lifecycle methods can be used anywhere](https://geoffrich.net/posts/svelte-lifecycle-examples/) and [The many meanings of $ in Svelte](https://geoffrich.net/posts/svelte-$-meanings/) by Geoff Rich\n- [Vercel and Svelte: A Perfect Match for Web Developers](https://thenewstack.io/vercel-and-svelte-a-perfect-match-for-web-developers/) by Darryl K. Taft\n- [User-defined TailwindCSS Color Scheme with Svelte Stores](https://blog.dayslice.io/user-defined-tailwindcss-color-scheme-with-svelte-stores-ad80ca2cf038) by jeremy zaborowski\n- [Ionic 6 + Svelte \ud83d\ude80](https://medium.com/@raymondboswel/ionic-6-svelte-ae904caa82df) by Raymond Boswel\n- [What happened in #Svelte language tools this year](https://twitter.com/dummdidumm_/status/1474158105395179525?t=ytj2K2Q52iD5-lNyLnQaAQ&s=19) by Simon H\n\n_To Watch_\n\n- [The Future of Svelte (Interview with Rich Harris)](https://www.youtube.com/watch?v=uQntFkK8Z54) by Lee Robinson, Director of Developer Relations at Vercel\n- [Svelte is becoming the go-to framework](https://www.youtube.com/watch?v=fo6BKY2xR2w&t=1834s) for Obsidian plugin developers\n- [Sveltekit WordPress Headless Blog](https://www.youtube.com/watch?v=c0UDVgjPxFw) by WebJeda\n- [Getting started with SvelteKit](https://www.youtube.com/watch?v=i2suPKMPUFA) by Lihau Tan\n- [Deploy a full-stack SvelteKit app on Cloudflare Pages](https://www.youtube.com/watch?v=Wc1_U6Dy5Tw) by 1nf\n\n_To Listen To_\n\n- [Syntax podcast: How To Do Things ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-01-01-whats-new-in-svelte-january-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5e65e589-8071-4603-bb26-95b9e9c1cff2-1",
    "text": "---\ntitle: \"Accelerating Svelte's Development\"\ndescription: 'Scaling the team, building partnerships, and growing the community'\nauthor: Ben McCann\nauthorURL: https://www.benmccann.com/\n---\n\n[Svelte](/) is a frontend framework for building fast reactive web apps with less code. If you\u2019re new here, [check out the tutorial](/tutorial) or [examples](/examples) to get a feel for it.\n\nSvelte was [launched 5 years ago](https://news.ycombinator.com/item?id=13069841) and has [come a long way in the time since](https://www.youtube.com/watch?v=YeY5M29-WcY). In 2021, as usage more than doubled, it was voted the [most loved](https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-web-frameworks) framework with the [most satisfied](https://2020.stateofjs.com/en-US/technologies/front-end-frameworks/) developers in a pair of surveys. Alongside high-profile companies like The New York Times, Apple, Spotify, Square, Rakuten, Bloomberg, Reuters, Ikea, Brave, and countless others, Svelte is used to power everything from hobby projects to embedded systems interfaces.\n\nTo help developers build fully-featured applications with Svelte without worrying about the hard parts, we\u2019ve been developing the [SvelteKit](https://kit.svelte.dev/) application framework. We\u2019re moving quickly towards a [stable 1.0 release](https://github.com/sveltejs/kit/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0) with the help of early adopters who have already downloaded SvelteKit almost one million times.\n\n## Scaling the team\n\nRich Harris, Svelte\u2019s creator, has [joined Vercel to work on Svelte full-time](https://vercel.com/blog/vercel-welcomes-rich-harris-creator-of-svelte). We\u2019re incredibly excited to have Rich\u2019s level of involvement in Svelte increase even more and have him steward Svelte into the future.\n\nSvelte has been made possible by the work of a large, dedicated community. Svelte has added numerous core maintainers over the course of the pandemic, including three this past week. In alphabetical order:\n\n- [benmccann](https://github.com/benmccann) - primary maintainer of SvelteKit for much of 2021\n- [bluwy](https://github.com/bluwy) - major contributor across SvelteKit, vite-plugin-svelte, and Vite\n- [dominikg](https://github.com/dominikg) - creator of vite-plugin-svelte\n- [dummdidumm](https://github.com/dummdidumm) - maintainer of language-tools, which includes the VS Code extension and `svelte-check`\n- [ehrencrona](https://github.com/ehrencrona) - contributor to SvelteKit and uses Svelte at work\n- [geoffrich](https://github.com/geoffrich) - has driven efforts to improve the accessibility of the Svelte site and documentation\n- [GrygrFlzr](https://github.com/GrygrFlzr) - holds a unique status as a maintainer of both SvelteKit and Vite\n- [Halfnelson](https://github.com/Halfnelson) - creator of svelte-native\n- [ignatiusmb](https://github.com/ignatiusmb) - regular SvelteKit contributor especially to TypeScript support\n- [jasonlyu123](https://github.com/jasonlyu1",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-01-13-accelerating-sveltes-development.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5e65e589-8071-4603-bb26-95b9e9c1cff2-2",
    "text": "b.com/Halfnelson) - creator of svelte-native\n- [ignatiusmb](https://github.com/ignatiusmb) - regular SvelteKit contributor especially to TypeScript support\n- [jasonlyu123](https://github.com/jasonlyu123) - maintainer of language-tools, which includes the VS Code extension and `svelte-check`\n- [kaisermann](https://github.com/kaisermann) - creator of svelte-preprocess\n- [RedHatter](https://github.com/RedHatter) - creator of Svelte Devtools\n- [rixo](https://github.com/rixo) - creator of svelte-hmr\n\nSvelte began accepting donations via [OpenCollective](https://opencollective.com/svelte) last year and has now had over $60,000 donated to-date with [Cohere](https://cohere.ai/) giving $10,000 just today. We hope that these funds will allow existing maintainers to spend more time on Svelte or that the funds could otherwise support Svelte on a part-time or contract basis, which we will continue to investigate.\n\n## Partnerships\n\nMultiple major cloud vendors are stepping up to make deploying SvelteKit applications anywhere a seamless experience. As a result of Rich\u2019s new job, SvelteKit will soon run on [Vercel Edge Functions](https://vercel.com/features/edge-functions). Netlify has made [big contributions](https://github.com/sveltejs/kit/pull/2113) to the SvelteKit Netlify adapter and also [updated](https://github.com/dependents/node-precinct/pull/88) their zip-it-and-ship-it tool to better support SvelteKit. The recent [Cloudflare Pages launch](https://blog.cloudflare.com/cloudflare-pages-goes-full-stack/) featured SvelteKit as a day one partner via a [new adapter](https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare) written by Svelte maintainers [pngwn](https://twitter.com/evilpingwin) and [lukeed](https://twitter.com/lukeed05), the latter of whom joined Cloudflare in 2021. [Begin](https://begin.com) created a [SvelteKit adapter](https://github.com/architect/sveltekit-adapter) for [Architect](https://arc.codes) apps. And community members have [contributed adapters](https://sveltesociety.dev/components#adapters) for environments such as Firebase and Deno, showcasing SvelteKit\u2019s ability to run wherever JavaScript does.\n\nWe\u2019ve also been working closely with the [Vite](https://vitejs.dev) team to iron out SSR issues uncovered by SvelteKit users. Vite is the build tool that makes the SvelteKit developer experience possible, and thanks to hard work from a contributor base that includes representatives of multiple frameworks, recent releases have solved almost all the issues we\u2019ve been tracking as SvelteKit 1.0 release blockers.\n\n## A growing community\n\n[SvelteSociety](https://sveltesociety.dev/) just hosted the [4th Svelte Summit](https://sveltesummit.com/) \u2014 [read a summary here](https://svelte.dev/blog/whats-new-in-svelte-december-2021#what-happened-at-svelte-summit) \u2014 and Kevin \u00c5berg Kultalahti is [going full-time to lead SvelteSociety](https://twitter.com/kevmodrome/status/1463151477174714373). In addition to hosting Svelte Summit, Kevin",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-01-13-accelerating-sveltes-development.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5e65e589-8071-4603-bb26-95b9e9c1cff2-3",
    "text": "ppened-at-svelte-summit) \u2014 and Kevin \u00c5berg Kultalahti is [going full-time to lead SvelteSociety](https://twitter.com/kevmodrome/status/1463151477174714373). In addition to hosting Svelte Summit, Kevin and SvelteSociety host and manage the [Svelte Radio podcast](https://www.svelteradio.com/), the [SvelteSociety YouTube channel](https://www.youtube.com/SvelteSociety), and the [Svelte subreddit](https://www.reddit.com/r/sveltejs). SvelteSociety has become the home of all things related to the Svelte community, with the sveltejs/community and sveltejs/integrations repos being retired in favor of [sveltesociety.dev](https://sveltesociety.dev/), which has been redesigned and rebuilt in SvelteKit. In October [Brittney Postma](https://github.com/brittneypostma), [Willow aka GHOST](https://ghostdev.xyz), [Steph Dietz](https://github.com/StephDietz), and [Gen Ashley](https://twitter.com/coderinheels) founded [Svelte Sirens](https://sveltesirens.dev/), a group for women & non-binary community members and their allies.\n\nHundreds of developers join the Svelte Discord every week to chat about Svelte. You may have noticed that, as of recently, some members of the server have purple names. These are people with the ambassadors role, which was created to recognise some of the community\u2019s most valued members and help manage the demands of a rapidly growing community. Svelte ambassadors are people who are well known for their helpfulness and contributions and for upholding Svelte\u2019s reputation as a friendly, welcoming community, and we\u2019re deeply grateful for their involvement. The initial ambassadors in alphabetical order are:\n\n- [babichjacob](https://github.com/babichjacob)\n- [brady fractal](https://github.com/FractalHQ)\n- [brittney postma](https://github.com/brittneypostma)\n- [d3sandoval](https://github.com/d3sandoval)\n- [geoffrich](https://github.com/geoffrich)\n- [kev](https://github.com/kevmodrome)\n- [puru](https://github.com/PuruVJ)\n- [rainlife](https://github.com/stephane-vanraes)\n- [rmunn](https://github.com/rmunn)\n- [stolinski](https://github.com/stolinski)\n- [swyx](https://github.com/sw-yx)\n- [theo](https://github.com/theo-steiner)\n\nWe\u2019re also testing out [GitHub discussions on SvelteKit](https://github.com/sveltejs/kit/discussions) and may bring this to other repos in the Svelte organization if feedback is positive.\n\n## Things to watch\n\nSvelteKit is continuing to progress towards 1.0 and, in just the past week, we have added major features like [improved client-only rendering](https://github.com/sveltejs/kit/pull/2804), [routing hooks](https://github.com/sveltejs/kit/pull/3293), and [the ability to pass data from child components to layouts](https://github.com/sveltejs/kit/pull/3252) (e.g. to support easier management of `<meta>` tags). We're currently working on a number of other high priority items such as discussing API designs for features like streaming and file uploads and contributing to the upcoming Vite 2.8 release.\n\nWhile a lot of effort has been",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-01-13-accelerating-sveltes-development.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "653a0950-326b-4f83-afe1-e7f02a91cd07-1",
    "text": "---\ntitle: \"What's new in Svelte: February 2022\"\ndescription: 'Rapid-fire releases across Svelte, SvelteKit and the community'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nHappy February, everyone! Over the last month or so, we've seen Svelte and SvelteKit [develop at rapid speed](accelerating-sveltes-development), new community rules across the [Reddit](https://www.reddit.com/r/sveltejs/comments/s9n8ou/new_rules/), [GitHub](https://github.com/sveltejs/community/blob/main/CODE_OF_CONDUCT.md) and [Discord](https://discord.com/channels/457912077277855764/831611707667382303/935264550436102315), and quite a few amazing apps, tutorials and libraries.\n\nLet's take a look...\n\n## Highlights from the Svelte changelog\n\n- **3.45.0** brought a [new a11y warning `a11y-no-redundant-roles`](https://svelte.dev/docs#accessibility-warnings-a11y-no-redundant-roles), destructuring and caching fixes\n- **3.46.0** added the much requested [`{@const}` tag](https://svelte.dev/docs#template-syntax-const) and [`style:` directive](https://svelte.dev/docs#template-syntax-element-directives-style-property)\n- Check out **3.46.1 - 3.46.3** for fixes to the `{@const}` tag and `style:` directive, along with a number of fixes to animations\n- [AST output is now available in the Svelte REPL](https://svelte.dev/repl/hello-world)\n\n## What's new in SvelteKit\n\n- `inlineStyleThreshold` allows you to specify where inline stylesheets are inserted into the page ([Docs](https://kit.svelte.dev/docs/configuration#inlinestylethreshold), [#2620](https://github.com/sveltejs/kit/pull/2620))\n- `beforeNavigate`/`afterNavigate` lifecycle functions lets you add functionality before or after a page navigation ([Docs](https://kit.svelte.dev/docs/modules#$app-navigation), [#3293](https://github.com/sveltejs/kit/pull/3293))\n- Platform context can now be passed from adapters ([Docs](https://kit.svelte.dev/docs/adapters#supported-environments-platform-specific-context), [#3429](https://github.com/sveltejs/kit/pull/3429))\n- Hooks now have an `ssr` parameter in `resolve` to make it easier to skip SSR, when needed ([Docs](https://kit.svelte.dev/docs/hooks#handle), [#2804](https://github.com/sveltejs/kit/pull/2804))\n- `$page.stuff` provides a mechanism for pages to pass data 'upward' to layouts ([Docs](https://kit.svelte.dev/docs/loading#input-stuff), [#3252](https://github.com/sveltejs/kit/pull/3252))\n- Fallthrough routes let you specify where to route when an route can't be loaded ([Docs](https://kit.svelte.dev/docs/routing#advanced-routing-fallthrough-routes), [#3217](https://github.com/sveltejs/kit/pull/3217))\n\n**New configs**\n\n- Content Security Policy (CSP) is now supported for increased security when using inline javascript or stylesheets ([Docs](https://kit.svelte.dev/docs/configuration#csp), [#3499](https://github.com/sveltejs/kit/pull/3499))\n- `kit.routes` config allows you to customise public/private modules during build ([Docs](https://kit.svelte.dev/docs/configuration#routes), [#357",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-02-01-whats-new-in-svelte-february-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "653a0950-326b-4f83-afe1-e7f02a91cd07-2",
    "text": ", [#3499](https://github.com/sveltejs/kit/pull/3499))\n- `kit.routes` config allows you to customise public/private modules during build ([Docs](https://kit.svelte.dev/docs/configuration#routes), [#3576](https://github.com/sveltejs/kit/pull/3576))\n- `prerender.createIndexFiles` config lets you prerender index.html files as their subfolder's name ([Docs](https://kit.svelte.dev/docs/configuration#prerender), [#2632](https://github.com/sveltejs/kit/pull/2632))\n- HTTP methods can now be overridden using `kit.methodOverride` ([Docs](https://kit.svelte.dev/docs/routing#endpoints-http-method-overrides), [#2989](https://github.com/sveltejs/kit/pull/2989))\n\n**Config changes**\n\n- `config.kit.hydrate` and `config.kit.router` are now nested under `config.kit.browser` ([Docs](https://kit.svelte.dev/docs/configuration#browser), [3578](https://github.com/sveltejs/kit/pull/3578))\n\n**Breaking change**\n\n- use `Request` and `Response` objects in endpoints and hooks ([#3384](https://github.com/sveltejs/kit/pull/3384))\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [timb(re)](https://paullj.github.io/timb) is a live music programming environment\n- [Music for Programming](https://musicforprogramming.net/latest/) is a series of mixes intended for listening while `${task}` to focus the brain and inspire the mind\n- [Team Tale](https://teamtale.app/) allows two authors to write the same story in a tag-team sort of fashion\n- [Puzzlez](https://www.puzzlez.io/) is an online place to play Sudoku and Wordle\n- [Closed Caption Creator](https://www.closedcaptioncreator.com/) makes it easy to add subtitles to your video on Windows, Mac and Google Chrome\n- [SC3Lab](https://sc3-lab.netlify.app/) is a code generator for experimenting with svelte-cubed and three.js\n- [Donkeytype](https://github.com/0ql/Donkeytype) is a minimalistic and lightweight typingtest inspired by Monkeytype.\n- [Above](https://above.silas.pro/) is a visual routine timer built for the ADHD/autistic mind\n- [base.report](https://base.report/) is a modern research platform for serious investors\n- [String](https://string.kampsy.xyz/) turns your Phone into a secure portable audio recorder, making it easy to capture and share personal notes, family moments, classroom lectures, and more\n- [The Raytracer Challenge REPL](https://github.com/jakobwesthoff/the_raytracer_challenge_repl) provides a live editor interface to configure a raytraced scene and render it live in any modern browser\n- [awesome-svelte-kit](https://github.com/janosh/awesome-svelte-kit) is a list of awesome examples of SvelteKit in the wild\n- [Map Projection Explorer](https://www.geo-projections.com/) lets you explore different map projections and explains their differences\n- [Rubiks](https://github.com/MeharGaur/rubiks) is a Rubik's Cube simulator\n- [Pianisto](https://pianisto.net/) is a working piano made with SVG, ToneJS and a lot of patience\n\nWant to work on a SvelteKit site with others, [try contributing to the Svelte Society site](https://github.co",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-02-01-whats-new-in-svelte-february-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "653a0950-326b-4f83-afe1-e7f02a91cd07-3",
    "text": "to](https://pianisto.net/) is a working piano made with SVG, ToneJS and a lot of patience\n\nWant to work on a SvelteKit site with others, [try contributing to the Svelte Society site](https://github.com/svelte-society/sveltesociety-2021/issues)!\n\n**Learning and Listening**\n\n_To Read_\n\n- [Accelerating Svelte's Development](https://svelte.dev/blog/accelerating-sveltes-development) by Ben McCann\n- [Storybook for Vite](https://storybook.js.org/blog/storybook-for-vite/)\n- [Let's learn SvelteKit by building a static Markdown blog from scratch](https://joshcollinsworth.com/blog/build-static-sveltekit-markdown-blog) by Josh Collinsworth\n- [Building an iOS app with Svelte, Capacitor and Firebase](https://harryherskowitz.com/2022/01/05/tapedrop-app.html) by Harry Herskowitz\n- [Mutating Query Params in SvelteKit Without Page Reloads or Navigations](https://dev.to/mohamadharith/mutating-query-params-in-sveltekit-without-page-reloads-or-navigations-2i2b) and [Workaround for Bubbling Custom Events in Svelte](https://dev.to/mohamadharith/workaround-for-bubbling-custom-events-in-svelte-3khk) by Mohamad Harith\n- [How to build a full stack serverless application with Svelte and GraphQL](https://dev.to/shadid12/how-to-build-a-full-stack-serverless-application-with-svelte-graphql-and-fauna-5427) by Shadid Haque\n- [How to Deploy SvelteKit Apps to GitHub Pages](https://sveltesaas.com/articles/sveltekit-github-pages-guide/)\n- [Creating a dApp with SvelteKit](https://anthonyriley.org/2021/12/31/creating-a-dapp-with-sveltekit/) by Anthony Riley\n- [Comparing Svelte Reactivity Options](https://opendirective.net/2022/01/06/comparing-svelte-reactivity-options/) by Steve Lee\n\n_To Watch_\n\n- [Integrating Storybook with SvelteKit](https://www.youtube.com/watch?v=Kc1ULlfyUcw) and [Integrating FaunaDB with Svelte](https://www.youtube.com/watch?v=zaoLZc76uZM) by the Svelte Sirens\n- [SvelteKit Crash Course Tutorial](https://www.youtube.com/watch?v=9OlLxkaeVvw&list=PL4cUxeGkcC9hpM9ARM59Ve3jqcb54dqiP) by The Net Ninja\n- [Svelte for Beginners](https://www.youtube.com/watch?v=BrkrOjknC_E&list=PLA9WiRZ-IS_ylnMYxIFCsZN6xVVSvLuHk) by Joy of Code\n- [SvelteKit For Beginners | Movie App Tutorial](https://www.youtube.com/watch?v=ydR_M0fw9Xc) by Dev Ed\n- [SvelteKit $app/stores](https://www.youtube.com/watch?v=gBPhr1xbgaQ) by lihautan\n- [Sveltekit - Get All Routes/Pages](https://www.youtube.com/watch?v=Y_NE2R3HuOU) by WebJeda\n\n_To Listen To_\n\n- [New Year, New Svelte!?](https://share.transistor.fm/s/36212cdc) from Svelte Radio\n- [So much Sveltey goodness (featuring Rich Harris)](https://changelog.com/jsparty/205) from JS Party\n- [The Other Side of Tech: A Documentarian Perspective (with Stefan Kingham)](https://codingcat.dev/podcast/2-4-the-other-side-of-tech-a-documentarian-perspective) from Purrfect.dev\n\n**Libraries, Tools & Components**\n\n- [threlte](https://github.com/grischaerbe/threlte) is a three.js component library for Svelte\n- [svelte-formify](https://github.com/nodify-at/svelte-formify) ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-02-01-whats-new-in-svelte-february-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "727b2330-ccbf-4c0d-9686-00cdbcf90ffb-1",
    "text": "---\ntitle: \"What's new in Svelte: July 2022\"\ndescription: 'Faster SSR, language tools improvements and a new paid contributor!'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nFrom faster SSR to support for Vitest and Storybook in SvelteKit, there's a lot to cover in this month's newsletter...\n\nSo let's dive in!\n\n## OpenCollective funding drives Svelte forward\n\nSvelte supporters have donated approximately $80,000 to [the project on OpenCollective](https://opencollective.com/svelte). We're happy to share that the funds are being drawn on to move Svelte forward in a meaningful way. **[@gtm-nayan](https://github.com/gtm-nayan)** has begun triaging and fixing SvelteKit issues this past month as a paid contributor to the project to help us get SvelteKit to a 1.0 level of stability! @gtm-nayan has been an active member of the Svelte community for quite some time and is well known for writing the bot that helps keep our Discord server running. We're happy that this funding has allowed Svelte to get much more of his time.\n\nWe will also be utilizing OpenCollective funds to allow Svelte core maintainers to attend [Svelte Summit](https://www.sveltesummit.com/) in person this fall. Thanks to everyone who has donated so far!\n\n## What's new in Svelte & Language Tools\n\n- [learn.svelte.dev](https://learn.svelte.dev/) is a new way to learn Svelte and SvelteKit from the ground up that is currently in development\n- Faster SSR is coming in the next Svelte release. A PR two years in the making, resulting in up to 3x faster rendering in some benchmarking tests! ([PR](https://github.com/sveltejs/svelte/pull/5701))\n- \"Find File References\" ([0.14.28](https://github.com/sveltejs/language-tools/releases/tag/language-server-0.14.28)) and \"Find Component References\" ([0.14.29](https://github.com/sveltejs/language-tools/releases/tag/language-server-0.14.29)) in the latest versions of the Svelte extension shows where Svelte files and components have been imported and used ([Demo](https://twitter.com/dummdidumm_/status/1532459709604716544/photo/1))\n- The Svelte extension now supports CSS path completion ([0.14.29](https://github.com/sveltejs/language-tools/releases/tag/language-server-0.14.29))\n\n## What's new in SvelteKit\n\n- Introduced `@sveltejs/kit/experimental/vite` which allows SvelteKit to interoperate with other tools in the Vite ecosystem like Vitest and Storybook ([#5094](https://github.com/sveltejs/kit/pull/5094)). Please [leave feedback](https://github.com/sveltejs/kit/issues/5184) as to whether the feature works and is helpful as we consider taking it out of experimental and making `vite.config.js` required for all users\n- Streaming in endpoints is now supported ([#3419](https://github.com/sveltejs/kit/issues/3419)). This was enabled by switching to the Undici `fetch` implementation ([#5117](https://github.com/sveltejs/kit/pull/5117))\n- Static assets can now be symlinked in development environments ([#5089](https://github.com/sveltejs/kit/pull/5089))\n-",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-07-01-whats-new-in-svelte-july-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "727b2330-ccbf-4c0d-9686-00cdbcf90ffb-2",
    "text": "dici `fetch` implementation ([#5117](https://github.com/sveltejs/kit/pull/5117))\n- Static assets can now be symlinked in development environments ([#5089](https://github.com/sveltejs/kit/pull/5089))\n- `server` and `prod` environment variables are now available as a corollary to `browser` and `dev` ([#5251](https://github.com/sveltejs/kit/pull/5251))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Virtual Maker](https://www.virtualmaker.net/) lets you make interactive 3D and VR scenes in your browser\n- [Apple Beta Music](https://www.reddit.com/r/sveltejs/comments/v7ic2s/apple_beta_music_uses_svelte/) appears to have been written in some combination of Svelte and web components\n- [Itatiaia](https://www.itatiaia.com.br/), the largest radio station in the country of Brazil just relaunched its news portal in SvelteKit\n- [Pronauns](https://www.pronauns.com) helps you learn pronunciation online with IPA to speak better and sound more native\n- [Immich](https://www.immich.app/) is an open source, high performance self-hosted backup solution for videos and photos on your mobile phone\n- [Pendek](https://github.com/leovoon/link-shortener) is a link shortener built with SvelteKit, Prisma and PlanetScale\n- [Grunfy](https://grunfy.com/tools) is a set of guitar tools - recently migrated to SvelteKit\n- [Radiant: The Future of Radio](https://play.google.com/store/apps/details?id=co.broadcastapp.Radiant) is a personal radio station app built with Svelte and Capacitor\n- [Imperfect Reminders](https://imperfectreminders.mildlyupset.com/) is a todo list for things that are only sort of time sensitive\n- [Periodic Table](https://github.com/janosh/periodic-table) is a dynamic Periodic Table component written in Svelte\n- [Svelvet](https://github.com/open-source-labs/Svelvet) is a lightweight Svelte component library for building interactive node-based diagrams\n- [publint](https://github.com/bluwy/publint) lints for packaging errors to ensure compatibility across environments\n- [Playlistr](https://github.com/alextana/spotify-playlist-creator) helps manage and create Spotify playlists\n- [Geoff Rich's page transitions demo](https://twitter.com/geoffrich_/status/1534980702785003520) shows how SvelteKit's `beforeNavigate`/`afterNavigate` hooks can make smooth document transitions in the latest Chrome Canary\n- [Menger Sponge](https://twitter.com/a_warnes/status/1536215896078811137) is a fractal built with Threlte\n\nWant to contribute to a site using the latest SvelteKit features? [Help build the Svelte Society site](https://github.com/svelte-society/sveltesociety.dev/issues)!\n\n**Learning Resources**\n\n_Starring the Svelte team_\n\n- [Svelte Origins: A JavaScript Documentary](https://www.youtube.com/watch?v=kMlkCYL9qo0) by OfferZen Origins\n- [Full Stack Documentation (announcing learn.svelte.dev)](https://portal.gitnation.org/contents/full-stack-documentation) by Rich Harris @ JSNation 2022\n- [All About the Sirens](https://www.svelteradio.com/episodes/all-about-th",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-07-01-whats-new-in-svelte-july-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "727b2330-ccbf-4c0d-9686-00cdbcf90ffb-3",
    "text": "(announcing learn.svelte.dev)](https://portal.gitnation.org/contents/full-stack-documentation) by Rich Harris @ JSNation 2022\n- [All About the Sirens](https://www.svelteradio.com/episodes/all-about-the-sirens) by Svelte Radio\n\n_To Watch_\n\n- [SvelteKit Page Endpoints](https://www.youtube.com/watch?v=yQRf2wmTu5w), [Named Layouts](https://www.youtube.com/watch?v=UHX9TJ0BxZY) and [Passing data from page component to layout component with $page.stuff](https://www.youtube.com/watch?v=CXaCstU5pcw) by lihautan\n- [\ud83c\udf5e & \ud83e\uddc8: Magically load data with SvelteKit Endpoints](https://www.youtube.com/watch?v=f6prqYlbTE4) by Johnny Magrippis\n- [Svelte for React developers](https://www.youtube.com/watch?v=7tsrwrx5HtQ) by frontendtier\n- [Learn Svelte JS || JavaScript Compiler for Building Front end Applications](https://www.youtube.com/watch?v=1rKRarJJFrY&list=PLIGDNOJWiL1-7zCgdR7MKuho-tPC6Ra6C&index=1) by Code with tsksharma\n- [SvelteKit Authentication](https://www.youtube.com/watch?v=T935Ya4W5X0&list=PLA9WiRZ-IS_zKrDzhOhV5RGKKTHNIyTDO&index=1) by Joy of Code\n- [Svelte + websockets: Build a real-time Auction app](https://www.youtube.com/watch?v=CqgsWFrwQIU) by Evgeny Maksimov\n\n_To Read_\n\n- [Up-To-Date Analytics on a Static Website](https://paullj.github.io/posts/up-to-date-analytics-on-a-static-website) and [Fast, Lightweight Fuzzy Search using Fuse.js](https://paullj.github.io/posts/fast-lightweight-fuzzy-search-using-fuse.js) by paullj\n- [Use SvelteKit as a handler in the ExpressJs project](https://chientrm.medium.com/use-sveltekit-as-a-handler-in-the-expressjs-project-15524b01128f) by Tran Chien\n- [Creating a desktop application with Tauri and SvelteKit](https://github.com/Stijn-B/tauri-sveltekit-example) by Stijn-B\n- [List of awesome Svelte stores](https://github.com/samuba/awesome-svelte-stores) by samuba\n- [SvelteKit Content Security Policy: CSP for XSS Protection](https://rodneylab.com/sveltekit-content-security-policy/) by Rodney Lab\n- [SvelteKit Hooks. Everything You Need To Know](https://kudadam.com/blog/understanding-sveltekit-hooks) by Lucretius K. Biah\n- [3 tips for upgrading the performance of your Svelte stores](https://www.mathiaspicker.com/posts/3-tips-for-upgrading-the-performance-of-your-svelte-stores) by Mathias Picker\n\n**Libraries, Tools & Components**\n\n- [Svend3r](https://github.com/oslabs-beta/svend3r) is a plug and play D3 charting library for Svelte\n- [Svelte Hover Draw SVG](https://github.com/davipon/svelte-hover-draw-svg) is a lightweight Svelte component to draw SVG on hover\n- [Svelte French Toast](https://svelte-french-toast.com/) provides buttery smooth toast notifications that are lightweight, customizable, and beautiful by default\n- [SVooltip](https://svooltip.vercel.app/) is a basic Svelte tooltip directive, powered by Floating UI\n- [Svelte Brick Gallery](https://github.com/anotherempty/svelte-brick-gallery) is a masonry-like image gallery component for Svelte\n- [use-vest](https://github.com/enyo/use-vest) is a Svelte action for Vest -",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-07-01-whats-new-in-svelte-july-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7dfbcfa3-a1c8-4708-bd5c-d1c319985674-1",
    "text": "---\ntitle: \"What's new in Svelte: October 2021\"\ndescription: A whole year of \"What's new in Svelte\"\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nHey y'all \ud83d\udc4b It's been 1 year since \"What's new in Svelte\" started being cross-posted to the Svelte blog. I wanted to take this moment at the top to thank all of you for reading and for all the contributors every month. From the maintainers to everyone who posts their work in the Discord and Reddit, it's amazing to witness all the effort that goes into making the Svelte community great.\n\nKeep up the good work, everyone! Now, let's dive into this month's news...\n\n## New around Svelte\n\n- New additions to Svelte's export map now expose no-op versions of lifecycle functions for SSR (Svelte **3.43.0**)\n- Custom components with a `src` attribute no longer break `svelte-native` builds (Svelte **3.42.4**)\n- Svelte plugin users without [the TypeScript plugin](https://www.npmjs.com/package/typescript-svelte-plugin) enabled will now be prompted to enable it. It enhances TypeScript and JavaScript files with additional intellisense to interact with Svelte files. [Please leave feedback](https://github.com/sveltejs/language-tools/issues/580) if you are using it (Svelte extensions **105.4.0**)\n- Event modifiers have been added to intellisense as autocomplete and hover info (Svelte extensions **105.4.0**)\n- TypeScript users no longer have to strictly separate type imports and value imports when using Svelte version 3.39 or higher and `svelte-preprocess` version 4.9.5 or higher. This means you can now write `import { MyInterface, myValue } from './somewhere'` instead of `import type { MyInterface } from './somewhere'; import { myValue } from './somewhere'`. Huge thanks to community member [@SomaticIT](https://github.com/SomaticIT) who mainly implemented this!\n\nFor a full list of features and bug fixes, check out the [Svelte changelog](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## SvelteKit Updates\n\nNearly 100 PRs committed again this past month, but there's still lots to do and Svelte maintainers are [looking for help getting SvelteKit to 1.0](https://github.com/sveltejs/kit/issues/2100). Antony said it well in a [recent comment](https://github.com/sveltejs/kit/issues/2100#issuecomment-895446285) on the issue:\n\n> If you think you are too n00b to contribute (you're not), then add tests, or write tests for the feature you want to add, before you add it! Start small, and learn the codebase that way.\n\nIf you'd like to help, please consider working on any of the [1.0 milestone issues labeled with \"help wanted\"](https://github.com/sveltejs/kit/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0+label%3A%22help+wanted%22).\n\nNotable SvelteKit improvements this month include...\n\n- Service workers are now allowed to access files using the `$lib` alias ([#2326](https://github.com/sveltejs/kit/pull/2326))\n- Svelte libraries should now work out-of-the-box without any Vite configuration ([#2343](https://gi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-10-01-whats-new-in-svelte-october-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7dfbcfa3-a1c8-4708-bd5c-d1c319985674-2",
    "text": "allowed to access files using the `$lib` alias ([#2326](https://github.com/sveltejs/kit/pull/2326))\n- Svelte libraries should now work out-of-the-box without any Vite configuration ([#2343](https://github.com/sveltejs/kit/pull/2343))\n- Improvements to package exports field ([#2345](https://github.com/sveltejs/kit/pull/2345) and [#2327](https://github.com/sveltejs/kit/pull/2327))\n- [breaking] The `prerender.pages` config option has been renamed to `prerender.entries` ([#2380](https://github.com/sveltejs/kit/pull/2380))\n- A new generic argument has been added to allow typing Body from hooks ([#2413](https://github.com/sveltejs/kit/pull/2413))\n- The `svelte` field will be added to package.json when running the package command ([#2431](https://github.com/sveltejs/kit/pull/2431))\n- [breaking] The `context` parameter of the load function was renamed to `stuff` ([#2439](https://github.com/sveltejs/kit/pull/2439))\n- Added an `entryPoint` option for building a custom server with `adapter-node` ([#2414](https://github.com/sveltejs/kit/pull/2414))\n- `vite-plugin-svelte` improved support for [useVitePreprocess](https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#usevitepreprocess), which uses Vite to automatically preprocess TypeScript, PostCSS, Scss, etc in Svelte components ([#173](https://github.com/sveltejs/vite-plugin-svelte/pull/173))\n\nTo see all updates to SvelteKit, check out the [SvelteKit changelog](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [radiofrance](https://www.radiofrance.fr/) just migrated their website to SvelteKit\n- [FLAYKS](https://flayks.com/) is the portfolio site for F\u00e9lix P\u00e9ault made with SvelteKit, Sanity, and Anime.js\n- [hirehive](https://www.hirehive.com/) is a candidate and job tracking site\n- [Microsocial](https://microsocial.xyz/) is an experimental Peer-to-Peer Social Platform\n- [Dylan Ipsum](https://www.dylanlyrics.app/) is a random text generator to replace lorem ipsum with Bob Dylan lyrics\n- [Chip8 Svelte](https://github.com/mikeyhogarth/chip8-svelte) is a CHIP-8 emulator frontend, built on top of CHIP8 TypeScript\n\n**Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better?** Check out [the list of open issues](https://github.com/svelte-society/sveltesociety-2021/issues) if you'd like to contribute to the Svelte Society rewrite in SvelteKit.\n\n**Podcasts Featuring Svelte**\n\n- [Syntax Podcast: From React to SvelteKit](https://podcasts.apple.com/us/podcast/from-react-to-sveltekit/id1253186678?i=1000536276106) Scott talks with Wes about moving Level Up Tutorials from React to SvelteKit \u2014 why he did it, how, benefits, things to watch out for, and more!\n- [Web Rush Podcast: Svelte Tools and Svelte Society](https://www.webrush.io/episodes/episode-150-svelte-tools-and-svelte-society) Kevin \u00c5berg Kultalahti talks about what Svelte Society is, what he's excited about with Svelte, how importa",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-10-01-whats-new-in-svelte-october-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7dfbcfa3-a1c8-4708-bd5c-d1c319985674-3",
    "text": "Svelte Society](https://www.webrush.io/episodes/episode-150-svelte-tools-and-svelte-society) Kevin \u00c5berg Kultalahti talks about what Svelte Society is, what he's excited about with Svelte, how important documentation is to any product, and much _much_ more\n- [Svelte: The Compiled Future of Front End](https://www.arahansen.com/the-compiled-future-of-front-end/) details the history of component-based frontends and how a compiler changes everything\n- [Svelte Radio: Contributing to Svelte with Martin 'Grygrflzr' Krisnanto Putra](https://share.transistor.fm/s/10aa305c) Grygrflzr shares his journey to becoming a maintainer and his views on React, Vite and a host of other things\n- [Svelte Radio: Routify 3 with Jake and Willow](https://share.transistor.fm/s/10aa305c) the Svelte Radio crew sits down with the maintainers of Routify and discusses the just-released Routify 3\n- [JS Party: 1Password](https://twitter.com/geoffrich_/status/1441816829853253640?s=20) mentioned on the latest episode of The Changelog's JS Party that they use Svelte to power their in-page suggestions\n\n**Educational Content**\n\n- [How I built a blog with Svelte and SvelteKit](https://fantinel.dev/blog-development-sveltekit/) is an introduction to Svelte, SvelteKit and Progressive Enhancement with code examples\n- [I built a decentralized chat dapp](https://www.youtube.com/watch?v=J5x3OMXjgMc) is a tutorial on how to use popular web3 technologies like GUN to build a decentralized web app (dapp)\n- [Writing a Svelte Store with TypeScript](https://javascript.plainenglish.io/writing-a-svelte-store-with-typescript-22fa1c901a4) is a deep dive into writing Svelte stores with TypeScript\n- [How Svelte scopes component styles](https://geoffrich.net/posts/svelte-scoped-styles/) explains scoping using classes and more complex CSS specifiers\n- [SvelteKit Hooks](https://www.youtube.com/watch?v=RarufLoEL08) shows how to use hooks.js in Sveltekit.. When you're done, check out [Part 2](https://www.youtube.com/watch?v=RmIBG3G0-VY)\n- [An early look at SvelteKit](https://www.infoworld.com/article/3630395/an-early-look-at-sveltekit.html) is a post from Infoworld walking through the features and onboarding of SvelteKit\n\n**Libraries, Tools & Components**\n\n- [sveltekit-netlify-cms](https://github.com/buhrmi/sveltekit-netlify-cms) is a SvelteKit skeleton app configured for use with Netlify CMS\n- [SvelteFireTS](https://github.com/jacobbowdoin/sveltefirets) is a SvelteKit + TypeScript + Firebase library inspired by Fireship.io\n- [stores-x](https://github.com/Anyass3/stores-x) lets you use Svelte stores just like vueX\n- [sveltekit-snippets](https://github.com/stordahl/sveltekit-snippets) is a VSCode extension that provides snippets for common patterns in SvelteKit & Vanilla Svelte\n- [svelte-xactor](https://github.com/wobsoriano/svelte-xactor) is a middleware that allows you to easily convert your xactor machines into a global store that implements the store contract\n- [vite-plugin-pages-svelte](https://github.com/a",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-10-01-whats-new-in-svelte-october-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e3687ca3-c407-48ee-8520-de2389108f01-1",
    "text": "---\ntitle: Svelte for new developers\ndescription: Never used Node.js or the command line? No problem\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\nThis short guide is designed to help you \u2014 someone who has looked at the [tutorial](/tutorial) and wants to start creating Svelte apps, but doesn't have a ton of experience using JavaScript build tooling \u2014 get up and running.\n\nIf there are things that don't make sense, or that we're glossing over, feel free to [raise an issue](https://github.com/sveltejs/svelte/issues) or [suggest edits to this page](https://github.com/sveltejs/svelte/blob/master/site/content/blog/2019-04-16-svelte-for-new-developers.md) that will help us help more people.\n\nIf you get stuck at any point following this guide, the best place to ask for help is in the [chatroom](https://svelte.dev/chat).\n\n## First things first\n\nYou'll be using the _command line_, also known as the terminal. On Windows, you can access it by running **Command Prompt** from the Start menu; on a Mac, hit `Cmd` and `Space` together to bring up **Spotlight**, then start typing `Terminal.app`. On most Linux systems, `Ctrl-Alt-T` brings up the command line.\n\nThe command line is a way to interact with your computer (or another computer! but that's a topic for another time) with more power and control than the GUI (graphical user interface) that most people use day-to-day.\n\nOnce on the command line, you can navigate the filesystem using `ls` (`dir` on Windows) to list the contents of your current directory, and `cd` to change the current directory. For example, if you had a `Development` directory of your projects inside your home directory, you would type\n\n```bash\ncd Development\n```\n\nto go to it. From there, you could create a new project directory with the `mkdir` command:\n\n```bash\nmkdir svelte-projects\ncd svelte-projects\n```\n\nA full introduction to the command line is out of the scope of this guide, but here are a few more useful commands:\n\n- `cd ..` \u2014 navigates to the parent of the current directory\n- `cat my-file.txt` \u2014 on Mac/Linux (`type my-file.txt` on Windows), lists the contents of `my-file.txt`\n- `open .` (or `start .` on Windows) \u2014 opens the current directory in Finder or File Explorer\n\n## Installing Node.js\n\n[Node](https://nodejs.org/en/) is a way to run JavaScript on the command line. It's used by many tools, including Svelte. If you don't yet have it installed, the easiest way is to download the latest version straight from the [website](https://nodejs.org/en/).\n\nOnce installed, you'll have access to three new commands:\n\n- `node my-file.js` \u2014 runs the JavaScript in `my-file.js`\n- `npm [subcommand]` \u2014 [npm](https://www.npmjs.com/) is a way to install 'packages' that your application depends on, such as the [svelte](https://www.npmjs.com/package/svelte) package\n- `npx [subcommand]` \u2014 a convenient way to run programs available on npm without permanently installing them\n\n## Installing a text editor\n\nTo write code, you need a good ed",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2019-04-16-svelte-for-new-developers.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e3687ca3-c407-48ee-8520-de2389108f01-2",
    "text": "com/package/svelte) package\n- `npx [subcommand]` \u2014 a convenient way to run programs available on npm without permanently installing them\n\n## Installing a text editor\n\nTo write code, you need a good editor. The most popular choice is [Visual Studio Code](https://code.visualstudio.com/) or VSCode, and justifiably so \u2014 it's well-designed and fully-featured, and has a wealth of extensions ([including one for Svelte](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode), which provides syntax highlighting and diagnostic messages when you're writing components).\n\n## Creating a project\n\nWe're going to use the [Svelte + Vite](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-svelte) template. You don't have to use a project template, but it means you have to do a lot less setup work.\n\nOn the command line, navigate to where you want to create a new project, then type the following lines (you can paste the whole lot, but you'll develop better muscle memory if you get into the habit of writing each line out one at a time then running it):\n\n```bash\nnpm create vite@latest my-svelte-project -- --template svelte\ncd my-svelte-project\nnpm install\n```\n\n> You can replace `--template svelte` with `--template svelte-ts`, if you prefer TypeScript.\n\nThis creates a new directory, `my-svelte-project`, adds files from the [create-vite/template-svelte](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-svelte) template, and installs a number of packages from npm. Open the directory in your text editor and take a look around. The app's 'source code' lives in the `src` directory, while the files your app can load are in `public`.\n\nIn the `package.json` file, there is a section called `\"scripts\"`. These scripts define shortcuts for working with your application \u2014 `dev`, `build` and `preview`. To launch your app in development mode, type the following:\n\n```bash\nnpm run dev\n```\n\nRunning the `dev` script starts a program called [Vite](https://vitejs.dev/). Vite's job is to take your application's source files, pass them to other programs (including Svelte, in our case) and convert them into the code that will actually run when you open the application in a browser.\n\nSpeaking of which, open a browser and navigate to http://localhost:5173. This is your application running on a local _web server_ (hence 'localhost') on port 5173.\n\nTry changing `src/App.svelte` and saving it. The application will update with your changes.\n\n## Building your app\n\nIn the last step, we were running the app in 'development mode'. In dev mode, Svelte adds extra code that helps with debugging, and Vite skips the final step where your app's JavaScript is compressed.\n\nWhen you share your app with the world, you want to build it in 'production mode', so that it's as small and efficient as possible for end users. To do that, use the `build` command:\n\n```bash\nnpm run build\n```\n\nYour `dist` directory now contains an optimised version of your app. You c",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2019-04-16-svelte-for-new-developers.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "076b364d-4b1e-484d-8c43-d944db0889d2-1",
    "text": "---\ntitle: The zen of Just Writing CSS\ndescription: I would say this is the future, but we're already doing it.\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\nIt's fashionable to dislike CSS. There are lots of reasons why that's the case, but it boils down to this: CSS is _unpredictable_. If you've never had the experience of tweaking a style rule and accidentally breaking some layout that you thought was completely unrelated \u2014 usually when you're trying to ship \u2014 then you're either new at this or you're a much better programmer than the rest of us.\n\nSo the JavaScript community rolled up its sleeves and got to work. Over the last couple of years, there's been a Cambrian explosion of libraries aimed at making CSS behave, collectively referred to as _CSS-in-JS_.\n\nWhat you might not realise is that **the biggest problems with CSS can be solved without CSS-in-JS**. Without those problems, writing CSS isn't just tolerable \u2014 it's enjoyable. And you don't have to find solutions to the additional problems that CSS-in-JS introduces.\n\nThis article isn't in any way intended as criticism of the hard work the CSS-in-JS community has done. It's one of the most active corners of the JS ecosystem, and new ideas are springing up every week. Instead, my purpose is to illustrate why an alternative approach \u2014 based on Single File Components with real CSS \u2014 is so damn delightful.\n\n## The biggest problem with CSS\n\nEverything in CSS is global. Because of that, styles intended for one bit of markup often end up affecting another. Because of _that_, developers often resort to wild namespacing conventions (not 'rules', since they're very difficult to enforce) that mostly just increase your risk of RSI.\n\nIt gets worse when you're working on a team. No-one dares touch styles authored by someone else, because it's often unclear what they're doing, what markup they apply to, and what disasters will unfold if you remove them.\n\nThe consequence of all this is the **append-only stylesheet**. There's no way of knowing which code can safely be removed, so it's common to undo some existing style with another, more specific style \u2014\u00a0even on relatively small projects.\n\n## Single File Components change all that\n\nThe idea behind SFCs is simple: you write your components in an HTML file that (optionally) contains a `<style>` and `<script>` attribute describing the component's styles and behaviour. Svelte, Ractive, Vue and Polymer all follow this basic pattern.\n\n<aside>\n\t<p><a href=\"/blog/frameworks-without-the-framework\">Read the introductory blog post</a> if you're new to Svelte. Or <a href=\"https://twitter.com/padolsey/status/899717303234908160\">read</a> <a href=\"https://twitter.com/sveltejs/status/901818357644701696\">the</a> <a href=\"https://twitter.com/sveltejs/status/901818106309476352\">testimonials</a>.</p>\n</aside>\n\n(For the rest of this article we'll be using Svelte, obviously. But if the idea of using a template language makes you shudder \u2014 your fears are mis",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2017-09-06-the-zen-of-just-writing-css.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "076b364d-4b1e-484d-8c43-d944db0889d2-2",
    "text": "/901818106309476352\">testimonials</a>.</p>\n</aside>\n\n(For the rest of this article we'll be using Svelte, obviously. But if the idea of using a template language makes you shudder \u2014 your fears are misplaced, but that's a topic for another day \u2014 then just use Vue which lets you use JSX in your SFCs.)\n\nSeveral wonderful things happen as a result:\n\n- Your styles are _scoped to the component_. No more leakage, no more unpredictable cascade. And no more sesquipedalian classnames designed to prevent conflicts.\n- You don't need to go spelunking through your folder structure to find the rules that are breaking your stuff.\n- The compiler (in Svelte's case) can **identify and remove unused styles**. No more append-only stylesheets!\n\nLet's see what that looks like in practice.\n\n<figure>\n\t<video controls poster='https://svelte-technology-assets.surge.sh/just-write-css.jpg'>\n\t\t<source type='video/mp4' src='https://svelte-technology-assets.surge.sh/just-write-css.mp4'>\n\t</video>\n\n<!-- prettier-ignore -->\n<figcaption>\n\tIs this what they mean by 'use the platform'?\n</figcaption>\n\n</figure>\n\nEvery code editor already knows about CSS, so there's a good chance that you'll get autocomplete, linting, syntax highlighting and so on \u2014 all without additional JS-fatigue-inducing tools.\n\nAnd because it's real CSS, rather than some camelCased quotes-everywhere impostor, we can take advantage of the 'tweak in devtools, paste back into our source code' workflow, which I personally couldn't live without. Notice that we get CSS sourcemaps out of the box, so you can instantly pinpoint the lines in question. It's hard to overstate the importance of this: when you're in WYSIWYG mode, you're not thinking in terms of your component tree, so having a robust way to figure out _where these damn styles came from_ is essential. Doubly so if someone else originally wrote the component. (I promise you, this is the single biggest productivity boost to your CSS workflow. If you're writing styles without sourcemaps, you are almost certainly wasting a lot of time. I know I was.)\n\nSvelte transforms your selectors (using an attribute that's also applied to affected elements, though the exact mechanism is unimportant and subject to change) to achieve the scoping. It warns on and removes any unused rules, then it minifies the result and lets you write it out to a `.css` file. There's also an experimental new option to compile to web components, using shadow DOM to encapsulate the styles, if that's your jam.\n\nThis is all possible because your CSS is parsed (with [css-tree](https://github.com/csstree/csstree)) and statically analysed in the context of your markup. Static analysis opens the doors to all kinds of exciting future possibilities \u2014 smarter optimisations, a11y hints \u2014 that are much harder if your styles are computed dynamically at runtime. We're just getting started.\n\n## But we can add tools to do [x]!\n\nIf your reaction to the video was 'fine, but if we use TypeScript and write plugins for",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2017-09-06-the-zen-of-just-writing-css.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1dcaefce-6dd3-495d-badf-952d2cc4b57c-1",
    "text": "---\ntitle: 'svelte.dev: A complete overhaul'\ndescription: 'The new site comes with accessibility fixes, new features and bottom navbar'\nauthor: Puru Vijay\nauthorURL: https://puruvj.dev\n---\n\nWhen the initial version of Svelte v3 was released four years ago, it included the single-page documentation that folks have been familiar with. That documentation structure had stayed the same as Svelte's API surface increased steadily and more details were added. As a result, the single page got larger and larger to the point where it was becoming difficult to find things. The community had been asking for a revamp, and now it's here!\n\nMeet the new [svelte.dev](https://svelte.dev) \u2014 a complete overhaul of the old website.\n\n## Multi-page docs\n\nThe table of contents had grown to be quite large and you had to scroll across half a dozen screens to see the whole thing. We heard you! The docs are all split up into multiple pages now and all pages list their sections in the righthand sidebar.\n\nAll modules exposed by Svelte are also listed in the sidebar under the `Runtime` section:\n\n- [svelte](/docs/svelte)\n- [svelte/store](/docs/svelte-store)\n- [svelte/motion](/docs/svelte-motion)\n- [svelte/transition](/docs/svelte-transition)\n- [svelte/animate](/docs/svelte-animate)\n- [svelte/easing](/docs/svelte-easing)\n- [svelte/action](/docs/svelte-action)\n\n> [svelte/compiler](/docs/svelte-compiler) is under **Compiler and API** section\n\nWe've also taken extra care to ensure that all the links from the old website will be redirected to the correct new page.\n\n## Search\n\nThe lack of search functionality could make finding stuff a nuisance as <kbd>Ctrl+F</kbd> only returns results in order of occurrence and not order of importance. While <kbd>Ctrl+F</kbd> did have its benefits such as not requiring JS, now that the site has multiple pages, it's not an option anymore.\n\nAnd for that, the new website comes with a search bar, which searches through the docs and the API surface. Hit <kbd>Ctrl+K</kbd> (or <kbd>CMD+F</kbd> for Mac users) and start searching \u2014 it even works without JavaScript!\n\n## Lights, TypeScript, Action!\n\nThe new website comes with a JavaScript / TypeScript toggle, so you can view the docs in your preferred flavour. Every module's exported types are listed at the bottom of the page for easy reference. The types are automatically generated from Svelte's source code, so they're always up to date.\n\nAll the JavaScript and TypeScript code snippets have type hints available. Just hover over the variable to see its type. This allows the docs to be type checked at build time, which ensures they're never out of date.\n\nWe also (finally!) added documentation for [Actions](/docs/svelte-action). Svelte Actions are a way to interact with the DOM, and are a great way to add interactivity to your app. The docs for Actions are also available in TypeScript.\n\n```svelte\n<script lang=\"ts\">\n\timport type { Action } from 'svelte/action';\n\n\tconst foo: Action = (node) => {\n\t\t// the node has b",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-29-svelte-dev-overhaul.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1dcaefce-6dd3-495d-badf-952d2cc4b57c-2",
    "text": "ty to your app. The docs for Actions are also available in TypeScript.\n\n```svelte\n<script lang=\"ts\">\n\timport type { Action } from 'svelte/action';\n\n\tconst foo: Action = (node) => {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t};\n</script>\n\n<div use:foo />\n```\n\n## Dark mode\n\nAfter many years of users asking for dark mode on the website so they can read the docs for their night-time coding sessions, we finally added it! The website now has a dark mode toggle, which is also synced with your OS's dark mode settings. It can be toggled from the top navbar (bottom navbar on mobile).\n\n## Updated REPL\n\nThe REPL has been rewritten from scratch to be fully typesafe and comes with features like dark mode. It was reimplemented to upgrade to CodeMirror 6 which comes with many accessibility improvements, multi-select mode, performance improvements, tree-shaking, and many more features.\n\n## Redesigned homepage\n\nIs it a website redesign if the homepage doesn't get the same amount of love? \ud83d\ude43\n\nThe homepage has also been updated to align with [kit.svelte.dev](https://kit.svelte.dev) and features the beautiful Svelte Machine by [@vedam](https://github.com/vedam).\n\n## Bottom navigation!\n\nWe sent out a [tweet](https://twitter.com/Rich_Harris/status/1664712880791404546) about experimenting with bottom navigation bar on mobile rather than the conventional top navbar. The response was overwhelmingly positive, so we went ahead and added it! This makes it easier to navigate the website on mobile with just one hand. We also made sure that you'll get to where you want with as few interactions as possible. If you're in the docs section of the site, you'll likely want to browse other documentation pages, which is why the navbar will show these by default when opening it with the option to go one level up to the general site navigation.\n\nIf you're on mobile, you can already see it at the bottom. If you're on desktop, you can see it by resizing your browser window to a smaller size.\n\n## Unification of Svelte websites\n\nNow [svelte.dev](https://svelte.dev), [kit.svelte.dev](https://kit.svelte.dev), and [learn.svelte.dev](https://learn.svelte.dev) all use the same design system and are more consistent with each other. This makes it easier to navigate between the websites and also makes it easier to maintain them. We have a package shared across the sites called `@sveltejs/site-kit`, which went through rigorous changes over last 4 months as we have been moving all common code into this package.\n\nFor example, we implemented the dark mode toggle in `@sveltejs/site-kit`. We then simply updated the package on [learn.svelte.dev](https://learn.svelte.dev) and [kit.svelte.dev](https://kit.svelte.dev) and those sites got the dark mode toggle automatically (this is also the reason why those sites got the dark mode toggle before the [svelte.dev](https://svelte.dev) relaunch).\n\n## What's next\n\nWe have many more thi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-29-svelte-dev-overhaul.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "02ecda37-fae3-46bb-949b-1c4e44a4b15f-1",
    "text": "---\ntitle: \"What's new in Svelte: November 2020\"\ndescription: Slot forwarding fixes, SvelteKit for faster local development, and more from Svelte Summit\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWelcome back to the \"What's new in Svelte\" series! This month, we're covering new features & bug fixes, last month's Svelte Summit and some stand-out sites and libraries...\n\n## New features & impactful bug fixes\n\n1. Destructuring Promises now works as expected by using the `{#await}` syntax\n   (**3.29.3**, [Example](https://svelte.dev/repl/3fd4e2cecfa14d629961478f1dac2445?version=3.29.3))\n2. Slot forwarding (released in 3.29.0) should no longer hang during compilation (**3.29.3**, [Example](https://svelte.dev/repl/29959e70103f4868a6525c0734934936?version=3.29.3))\n3. Better typings for the `get` function in `svelte/store` and on lifecycle hooks (**3.29.1**)\n\n**What's going on in Sapper?**\n\nSapper got some new types in its `preload` function, which will make typing easier if you are using TypeScript. See the [Sapper docs](https://sapper.svelte.dev/docs#Typing_the_function) on how to use them. There also were fixes to `preload` links in exported sites. Route layouts got a few fixes too - including ensuring CSS is applied to nested route layouts. You can also better organize your files now that extensions with multiple dots are supported. (**0.28.10**)\n\nFor all the features and bugfixes see the CHANGELOGs for [Svelte](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md) and [Sapper](https://github.com/sveltejs/sapper/blob/master/CHANGELOG.md).\n\n## [Svelte Summit](https://sveltesummit.com/) was Svelte-tacular!\n\n- Rich Harris demoed the possible future of Svelte development in a talk titled \"Futuristic Web Development\". The not-yet-public project is called SvelteKit (name may change) and will bring a first-class developer experience and more flexibility for build outputs. If you want to get the full sneak-peek, [check out the video](https://www.youtube.com/watch?v=qSfdtmcZ4d0).\n- 17 speakers made the best of the conference's virtual format... From floating heads to seamless demos, Svelte developers from every skill level will find something of interest in this year's [YouTube playlist](https://www.youtube.com/playlist?list=PL8bMgX1kyZThM1sbYCoWdTcpiYysJsSeu)\n\n---\n\n## Community Showcase\n\n- [Svelte Lab](https://sveltelab.app/) showcases a variety of components, visualizations and interactions that can be achieved in Svelte. You can click into any component to see its source or edit it, using the site's built-in REPL\n- [svelte-electron-boilerplate](https://github.com/hjalmar/svelte-electron-boilerplate) is a fast way to get up and running with a Svelte app built in the desktop javascript framework, Electron\n- [React Hooks in Svelte](https://github.com/joshnuss/react-hooks-in-svelte) showcases examples of common React Hooks ported to Svelte.\n- [gurlic](https://gurlic.com/) is a social network and internet experiment that is super snappy ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-11-01-whats-new-in-svelte-november-2020.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f49337fc-e2a3-4e41-bc03-1272cd303c7a-1",
    "text": "---\ntitle: \"What's new in Svelte: June 2022\"\ndescription: 'Cancellable dispatched events, deeper {@const} declarations and more!'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWith last month's [Svelte Summit](https://www.youtube.com/watch?v=qqj2cBockqE) behind us, we're ready to apply everything we learned in this new month of June! Also new this month are some quality-of-life changes to `createEventDispatcher`, `@const` declarations and tons of progress toward SvelteKit 1.0.\n\nLet's dive in!\n\n## What's new in Svelte\n\n- Custom events can now be cancelled in the `createEventDispatcher` function (**3.48.0**, [Docs](https://svelte.dev/docs#run-time-svelte-createeventdispatcher), [PR](https://github.com/sveltejs/svelte/pull/7064))\n- The `{@const}` tag can now be used in `{#if}` blocks to conditionally define variables (**3.48.0**, [Docs](https://svelte.dev/docs#template-syntax-const), [PR](https://github.com/sveltejs/svelte/pull/7451))\n- Lots of bug fixes across `<svelte:element>`, animations and various DOM elements. Check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3480) for a deeper dive!\n\n## What's new in SvelteKit\n\n- Vite 2.9.9 was released as one of the last Vite 2 releases. The Svelte team has been hard at work contributing to the Vite 3 release to make the integration between SvelteKit and Vite smoother than ever ([Vite 3.0 Milestone](https://github.com/vitejs/vite/milestone/5))\n- `config.kit.alias` lets you more easily declare a custom alias to replace values in `import` statements ([Docs](https://kit.svelte.dev/docs/configuration#alias), [PR](https://github.com/sveltejs/kit/pull/4964))\n- Pages marked for prerendering will now fail during SSR at runtime ([PR](https://github.com/sveltejs/kit/pull/4812))\n\n**Breaking Changes**\n\n- Node 14 is no longer supported ([PR](https://github.com/sveltejs/kit/pull/4922))\n- Requests to `/favicon.ico` will no longer be suppressed and will instead be handled as a valid route ([PR](https://github.com/sveltejs/kit/pull/5046))\n- AMP support has been moved to a separate `@sveltejs/amp` package ([Docs](https://kit.svelte.dev/docs/seo#manual-setup-amp), [PR](https://github.com/sveltejs/kit/pull/4710))\n- Generated types are now written to `_types` directories - update your imports accordingly ([PR](https://github.com/sveltejs/kit/pull/4705))\n- `%svelte.head%` and `%svelte.body%` are now `%sveltekit.head%` and `%sveltekit.body%` in `app.html` ([Docs](https://kit.svelte.dev/docs/migrating#project-files-src-template-html), [PR](https://github.com/sveltejs/kit/pull/5016/))\n- `LoadInput` is now `LoadEvent`\n- Dropped support for Wrangler 1 in favor of Wrangler 2 ([PR](https://github.com/sveltejs/kit/pull/4887))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Plantarium](https://github.com/jim-fx/plantarium) is a tool for the procedural generation of 3D plants.\n- [SPATULA](https://github.com/AlexWarnes/lamina-spatula) is a tool for building shading mat",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-06-01-whats-new-in-svelte-june-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f49337fc-e2a3-4e41-bc03-1272cd303c7a-2",
    "text": "\n- [Plantarium](https://github.com/jim-fx/plantarium) is a tool for the procedural generation of 3D plants.\n- [SPATULA](https://github.com/AlexWarnes/lamina-spatula) is a tool for building shading materials that are exportable as code material in any project that uses lamina and threejs\n- [Waaard](https://waaard.com/) lets you create and send protected links with a variety of SSO providers\n- [Magidoc](https://github.com/magidoc-org/magidoc) is a fast and highly customizable GraphQL documentation generator\n- [myMarkmap](https://github.com/eyssette/myMarkmap) is a custom editor for Markmap, built with SvelteKit\n- [PassShare](https://passshare.mynt.pw/) is a way for you to share your passwords to your friends, securely and effortlessly\n- [DashingOS](https://beta.dashingos.com/) is a tool (like Notion + CodeSandbox) to make it quick and easy to prototype and document your work all in one place\n- [worker-kit-email](https://github.com/miunau/worker-kit-email) helps you develop transactional emails quickly using regular SvelteKit routes\n- [kaios-weather-svelte](https://github.com/cyan-2048/kaios-weather-svelte) is a very familiar looking weather app for KaiOS\n- [svelte-gantt](https://github.com/ANovokmet/svelte-gantt) is a lightweight and fast interactive gantt chart/resource booking component\n- [Miru](https://github.com/ThaUnknown/miru) is a BitTorrent streaming software for cats\n\nLooking for a great SvelteKit website to contribute to? [Help build the Svelte Society site](https://github.com/svelte-society/sveltesociety.dev/issues)!\n\n**Learning Resources**\n\n_To Read_\n\n- [Component party](https://component-party.dev/) is a site that compares common patterns in different frameworks\n- [Quick tip: style prop defaults](https://geoffrich.net/posts/style-prop-defaults/) by Geoff Rich\n- [Working with reduced motion in Svelte](https://ghostdev.xyz/posts/working-with-reduced-motion-in-svelte) by GHOST\n- [Building a Musical Instrument with the Web Audio API](https://www.taniarascia.com/musical-instrument-web-audio-api/) by Tania Rascia\n- [Svelte-Cubed: Creating an Accessible and Consistent Experience Across Devices](https://dev.to/alexwarnes/svelte-cubed-creating-an-accessible-and-consistent-experience-across-devices-42ae) and [Svelte-Cubed: Loading Your glTF Models](https://dev.to/alexwarnes/svelte-cubed-loading-your-gltf-models-14lf) by Alex Warnes\n\n_To Watch_\n\nFrom Svelte Society:\n\n- [The Svelte Summit Spring 2022 stream recording](https://www.youtube.com/watch?v=qqj2cBockqE) has been updated with chapter markers to make it easy to watch again and again\n- [The full recording of Svelte London, April 2022](https://www.youtube.com/watch?v=zIxzJzTnoxA) is up! Check out the amazing talks from across the Svelte London community\n- [Persian Svelte Society](https://www.youtube.com/channel/UCfWH9lCsXN3j8oXq8dru82Q) is making Persian-language videos about Svelte\n- Svelte Sirens has been talking monthly to creators and contributors across the Svelte Community:\n  - [SvelteK",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-06-01-whats-new-in-svelte-june-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f49337fc-e2a3-4e41-bc03-1272cd303c7a-3",
    "text": "ube.com/channel/UCfWH9lCsXN3j8oXq8dru82Q) is making Persian-language videos about Svelte\n- Svelte Sirens has been talking monthly to creators and contributors across the Svelte Community:\n  - [SvelteKit + Sanity.io: a match made in heaven](https://www.youtube.com/watch?v=j0_1hfiEVWA&list=PL8bMgX1kyZThkJ_Rk6AAFI4eY24g5XKwK&index=5) on May 13\n  - [Slicing up your Svelte Sites with Prismic](https://www.youtube.com/watch?v=FUbHwwMALkk) on May 20\n  - [Rendering your Svelte apps on Render](https://www.youtube.com/watch?v=SnV_hMLVyqs) on May 24\n  - [The story behind the (unofficial) Svelte newsletter](https://www.youtube.com/watch?v=aK0xXm3hPxk&list=PL8bMgX1kyZThkJ_Rk6AAFI4eY24g5XKwK&index=7) on May 27\n\nAcross the Web:\n\n- [Building vite-plugin-svelte-inspector](https://www.youtube.com/watch?v=udYB24IMtsY), [What is Singleton?](https://www.youtube.com/watch?v=xhi0m1QZue0) and [What is Navigation?](https://www.youtube.com/watch?v=Ym-OnGUps2c) by lihautan\n- [Auto Import Components In Svelte Kit - Weekly Svelte](https://www.youtube.com/watch?v=JXvKBtTPr64) by LevelUpTuts\n- [\ud83e\uddea Test SvelteKit with TDD & VITEST \ud83e\uddea](https://www.youtube.com/watch?v=5bQD3dCoyHA) by Johnny Magrippis\n- [Google Analytics With SvelteKit](https://www.youtube.com/watch?v=l-x6H0fnqqQ), [Using WebSockets With SvelteKit](https://www.youtube.com/watch?v=mAcKzdW5fR8), [SvelteKit Authentication Using Cookies](https://www.youtube.com/watch?v=T935Ya4W5X0) and [Svelte Headless UI Component Library](https://www.reddit.com/r/sveltejs/comments/ueu849/svelte_headless_ui_component_library/) by Joy of Code\n- [Named Layouts In Nested Routes in SvelteKit](https://www.youtube.com/watch?v=hKg_V3jouLk) by The Svelte Junction\n- [SvelteKit Shiki Syntax Highlighting: Markdown Codeblocks](https://rodneylab.com/sveltekit-shiki-syntax-highlighting/) and [Svelte Capsize Styling: Typography Tooling](https://rodneylab.com/svelte-capsize-styling/) by Rodney Lab\n\n_To Hear_\n\n- Svelte Radio has been putting out weekly episodes:\n  - [The Adventures of Running a Svelte Meetup](https://www.svelteradio.com/episodes/the-adventures-of-running-a-svelte-meetup)\n  - [The other Rich! Geoff! (feat. Geoff Rich)](https://www.svelteradio.com/episodes/the-other-rich-geoff)\n  - [Inspecting Svelte Code with Dominik G.](https://www.svelteradio.com/episodes/inspecting-svelte-code-with-dominik-g)\n  - [Stores Galore](https://www.svelteradio.com/episodes/stores-galore)\n- [Svelte and the Future of Frontend Development (feat. Rich Harris)](https://thenewstack.io/svelte-and-the-future-of-front-end-development/) from The New Stack\n\n**Libraries, Tools & Components**\n\n- [vite-plugin-svelte-console-remover](https://github.com/jhubbardsf/vite-plugin-svelte-console-remover) is a Vite plugin that removes all console statements (log, group, dir, error, etc) from Svelte, JS, and TS files during build so they don't leak into production\n- [Svelte Headless Tables](https://github.com/bryanmylee/svelte-headless-table) is an unopinionated and extensible data",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-06-01-whats-new-in-svelte-june-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e84e5ae1-9077-45ef-a2c5-1495521e65a3-1",
    "text": "---\ntitle: \"What's new in Svelte: December 2021\"\ndescription: 'Svelte Summit Fall 2021 Recap, Rich Harris joins Vercel, and Kevin goes full-time on Svelte Society'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWith SvelteKit getting more and more stable each day, there's not much to cover in terms of code changes other than bug fixes... So, in this month's newsletter, we'll be covering Svelte Summit Fall 2021!\n\nIf you want to dive deep into the last month's worth of bug fixes, check out the [Svelte](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md) and [SvelteKit](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md) changelogs, respectively.\n\n## What happened at Svelte Summit?\n\nIf you missed Svelte Summit, you can watch the entire live stream on [YouTube](https://www.youtube.com/watch?v=1Df-9EKvZr0) and catch a recap in the [#svelte-summit channel on Discord](https://discord.gg/YmHcdnhu).\n\nHere are the highlights:\n\n- [Rich Harris](https://twitter.com/rich_harris) took us through a tour of Svelte's history and announced [his move to Vercel](https://vercel.com/blog/vercel-welcomes-rich-harris-creator-of-svelte) - where he will be helping maintain Svelte full-time! ([20:00](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=1200s))\n- [Steph Dietz](https://twitter.com/steph_dietz_) explained how Svelte's simple abstractions makes it easy for beginners and experts alike to learn and use JavaScript - without the boilerplate ([29:00](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=1740s))\n- [Kevin Bridges](https://twitter.com/kevinast) dove deep into Svelte's reactivity logic by visualizing it through `ReflectiveCounter` and showing how to \"fine tune\" it, as needed. A full \"syllabus\" for the presentation is available on [Kevin's site](https://wiibridges.com/presentations/ResponsiveSvelte/). ([42:55](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=2575s))\n- [Mateo Morris](https://twitter.com/_mateomorris) launched [Primo](https://primo.af/), an all-in-one SvelteKit CMS to help build and manage static sites ([1:12:34](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=4354s))\n- [Guillermo Rauch](https://vercel.com/about/rauchg) explained Vercel's commitment to Svelte, what it means to have Rich on the team, and what's coming next from the company... ([1:21:54](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=4914s))\n- [Geoff Rich](https://twitter.com/geoffrich_) introduced various ways to modify motion and transitions within Svelte to be more accessible to all users of the web. Slides and a full transcription of the talk are available on [Geoff's site](https://geoffrich.net/posts/svelte-summit-2021/). ([1:32:30](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=5550s))\n- [Dean Fogarty](https://df.id.au/) demoed a number of different use-cases for custom stores - transforming data to and from storage mechanisms within Svelte. Transcript and code is available on [Dean's GitHub](https://github.com/angrytongan/svelte-summit-2021). ([1:",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-12-01-whats-new-in-svelte-december-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e84e5ae1-9077-45ef-a2c5-1495521e65a3-2",
    "text": "e-cases for custom stores - transforming data to and from storage mechanisms within Svelte. Transcript and code is available on [Dean's GitHub](https://github.com/angrytongan/svelte-summit-2021). ([1:43:06](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=6186s))\n- [Kellen Mace](https://twitter.com/kellenmace) shared how we can let content creators keep using WordPress, while leveraging Svelte on the frontend to provide a phenomenal user experience ([1:49:30](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=6570ss))\n- [Ben Holmes](https://twitter.com/bholmesdev) explained the \"islands\" architecture and how 11ty + [Slinkity](https://slinkity.dev/) can bring these islands to any HTML template ([2:17:15](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=8235s))\n- [Scott Tolinski](https://twitter.com/stolinski) shared the lessons learned from rewriting the React-based LevelUpTutorials in Svelte and \"found developer bliss\" ([3:16:35](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=11795s))\n- [Svelte Sirens](https://sveltesirens.dev) was announced as the new Svelte community for women, non-binary and allies. Their first event was on November 29th - all future events can be found on [the Svelte Sirens website](https://sveltesirens.dev/events) ([3:50:45](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=13845s))\n- [Rich Harris](https://twitter.com/rich_harris) discussed creating libraries with SvelteKit, better ways to link packages when developing, and how SvelteKit helps with modern JavaScript library development ([3:56:00](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=14160s))\n- [Ken Kunz](https://twitter.com/kennethkunz) explained how finite state machines (and the svelte-fsm library) can make managing Svelte component states more... manageable. Examples from the talk are available on [Ken's GitHub](https://github.com/kenkunz/svelte-fsm/wiki/Examples). ([4:07:18](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=14838s))\n- [Austin Crim](https://twitter.com/crim_codes) connected learning to code on the web to learning how to play an instrument. By giving learners early wins and introducing the fundamentals through real-world apps, learning Svelte (and the fundamentals underneath) doesn't have to be a chore ([4:21:50](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=15710s))\n- [Jesse Skinner](https://twitter.com/JesseSkinner) brought our legacy apps into the future by explaining how to use (and reuse) Svelte components within React (and even jQuery!) projects ([4:32:30](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=16350s))\n- [Jim Fisk](https://twitter.com/jimafisk) and [Stephanie Luz](https://stephanie-luz.medium.com/) introduced [Plenti](https://plenti.co/) and its theming tools to make building new Svelte sites much faster ([4:59:00](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=17940s))\n- [Evyatar Alush](https://twitter.com/evyataral) helped us all make (and maintain) better forms using a powerful validation library called [Vest](https://github.com/ealush/vest) ([5:08:55",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-12-01-whats-new-in-svelte-december-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e84e5ae1-9077-45ef-a2c5-1495521e65a3-3",
    "text": "0&t=17940s))\n- [Evyatar Alush](https://twitter.com/evyataral) helped us all make (and maintain) better forms using a powerful validation library called [Vest](https://github.com/ealush/vest) ([5:08:55](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=18535s))\n- Dominik G. presented a fresh take on icon libraries - one that reduces the bundle size of applications and opens up the entire iconify library for use in any Svelte app ([5:30:04](https://www.youtube.com/watch?v=1Df-9EKvZr0&t=19804s))\n\nThanks to [Kevin](https://twitter.com/kevmodrome) and all the Svelte Society volunteers for pulling together such an amazing event! Excitingly, [Kevin announced](https://twitter.com/kevmodrome/status/1463151477174714373) after the event that he will now be working full-time on Svelte Society! You can check out all the talks, broken up into individual videos for convenience, in [this Svelte Society YouTube Playlist](https://www.youtube.com/playlist?list=PL8bMgX1kyZTg2bI9IOMgfBc8lrU3v2itt).\n\nIf you have feedback on the Svelte Summit, Kev is [looking for feedback on the Svelte subreddit](https://www.reddit.com/r/sveltejs/comments/qzgo3k/svelte_summit_feedback/) \ud83d\udc40\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [pixeldrain](https://github.com/Fornaxian/pixeldrain_web) is a free-to-use file sharing platform\n- [LifeHash](http://lifehash.info/) generates beautiful visual hashes from Blockchain Commons\n- [simple-cloud-music](https://github.com/dufu1991/simple-cloud-music) is a lightweight third-party NetEase cloud music player for modern browsers (likely only works on Chrome)\n- [palette.rocks](https://palette.rocks/) is a color palette generator with contrast-checking built-in\n- [Kadium](https://github.com/probablykasper/kadium) is an app for staying on top of YouTube channel uploads\n- [Multi-Monitor Calculator](https://multimonitorcalculator.com/) is a tool for planning your multi-monitor setup\n- [Your Home](https://yourhome.fb.com/) is an interactive overview of Facebook's privacy settings\n- [Svelte Crush](https://svelte-crush.netlify.app/) is a Candy Crush style match-3 game\n- [100.000 Corona deaths in Germany](https://twitter.com/h_i_g_s_c_h/status/1463767113563353089?s=20) is a visualization made for Spiegel Gesundheit\n\n**Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better?** Check out [the list of open issues](https://github.com/svelte-society/sveltesociety-2021/issues) if you'd like to contribute to the Svelte Society rewrite in SvelteKit.\n\n**Videos, Blogs and Podcasts**\n\n- [How To Make and Publish a Svelte Library](https://www.youtube.com/watch?v=_TymiadmPrc)\n- [SvelteKit is now fully supported in WebContainers](https://blog.stackblitz.com/posts/sveltekit-supported-in-webcontainers/)\n- [Introducing Svelte, and Comparing Svelte with React and Vue](https://joshcollinsworth.com/blog/introducing-svelte-comparing-with-react-vue)\n- [Testing a Svelte app with Jest](https://www.roboleary.net/2021/11/18/svelte-app-tes",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-12-01-whats-new-in-svelte-december-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "e84e5ae1-9077-45ef-a2c5-1495521e65a3-4",
    "text": "mparing Svelte with React and Vue](https://joshcollinsworth.com/blog/introducing-svelte-comparing-with-react-vue)\n- [Testing a Svelte app with Jest](https://www.roboleary.net/2021/11/18/svelte-app-testing-jest.html)\n- [How to create a toast notification library package with SvelteKit](https://www.sarcevic.dev/blog/toasting-in-svelte)\n- [Svelte training: Here you can learn Svelte](https://sustainablewww.org/principles/svelte-training-here-you-can-learn-svelte)\n- [Introduction to Svelte Actions](https://blog.logrocket.com/svelte-actions-introduction/)\n- [Enjoy making DAPPs using SvelteWeb3](https://chiuzon.medium.com/enjoy-making-dapps-using-svelteweb3-b78dfea1d902)\n- [Svelte creator: Web development should be more fun](https://www.infoworld.com/article/3639521/svelte-creator-web-development-should-be-more-fun.html)\n- [Svelte Radio: Rich Harris is now working full-time on Svelte \ud83e\udd2f](https://share.transistor.fm/s/d9b04961)\n- [Web Rush: Svelte and Elder.js with Nick Reese](https://webrush.io/episodes/episode-158-svelte-and-elderjs-with-nick-reese)\n- [Building SvelteKit applications with Serverless Redis](https://blog.upstash.com/svelte-with-serverless-redis)\n\n**Libraries, Tools & Components**\n\n- [svelte-cubed](https://github.com/Rich-Harris/svelte-cubed) is a Three.js component library for Svelte - created by Rich Harris for his presentation at Svelte Summit Fall 2021\n- [svelte-fsm](https://github.com/kenkunz/svelte-fsm) is a tiny, simple, expressive, pragmatic Finite State Machine (FSM) library, optimized for Svelte\n- [bromb](https://github.com/samuelstroschein/bromb) is a feedback widget for websites/web apps that is small and easy to integration/self-host\n- [Spaper](https://github.com/Oli8/spaper) is a set of PaperCSS components for Svelte\n- [svelte-intl-precompile](https://github.com/cibernox/svelte-intl-precompile) is an i18n library for Svelte that analyzes and compiles your translations at build time\n- [svelte-preprocess-svg](https://github.com/svitejs/svelte-preprocess-svg) automatically optimizes inline svg in Svelte components for better performance and reduced file size\n- [svelte-subcomponent-preprocessor](https://github.com/srmullen/svelte-subcomponent-preprocessor) allows you to write more than one component within a svelte file\n- [svelte-pdfjs](https://github.com/gtm-nayan/svelte-pdfjs) is a crude implementation of a Svelte PDF viewer component\n- [svelte-inview](https://github.com/maciekgrzybek/svelte-inview) is a Svelte action that monitors an element enters or leaves the viewport/parent element\n- [sveltekit-adapter-wordpress-shortcode](https://github.com/tomatrow/sveltekit-adapter-wordpress-shortcode) is an adapter for SvelteKit which turns your app into a wordpress shortcode\n- [svelte-websocket-store](https://github.com/arlac77/svelte-websocket-store) is a Svelte store with a websocket backend\n- [Svelte Auto Form](https://github.com/leveluptuts/auto-form) is a fast and fun form library focused on ease of use, rather than flexibility.\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-12-01-whats-new-in-svelte-december-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f51066e3-f1ec-4e80-a666-9298068b4b56-1",
    "text": "---\ntitle: SvelteKit is in public beta\ndescription: And we'd love to have your feedback\nauthor: Rich Harris\nauthorURL: https://twitter.com/rich_harris\n---\n\n<aside><p>Previously: <a href=\"/blog/whats-the-deal-with-sveltekit\">What's the deal with SvelteKit?</a></p></aside>\n\nIt's time. After five months and hundreds of commits, you're finally invited to try out the SvelteKit beta. It's not finished \u2014 there are a few known bugs and several missing features \u2014 but we're really happy with how it's shaping up and can't wait for you to try it.\n\nStarting a new project is easy:\n\n```bash\n# create the project\nmkdir my-app\ncd my-app\nnpm init svelte@next\n\n# install dependencies\nnpm install\n\n# start dev server and open a browser tab\nnpm run dev -- --open\n```\n\nYou'll find documentation at [kit.svelte.dev/docs](https://kit.svelte.dev/docs). If you have a [Sapper](https://sapper.svelte.dev) app that you'd like to migrate to SvelteKit, you'll find instructions at [kit.svelte.dev/docs/migrating](https://kit.svelte.dev/docs/migrating).\n\nThe source code is available at [github.com/sveltejs/kit](https://github.com/sveltejs/kit). Issues and pull requests are disabled while we finish getting our house in order, but we'll be making it fully open in the near future.\n\n## Wait, what is SvelteKit?\n\nThink of it as [Next](https://nextjs.org/) for Svelte. It's a framework for building apps with Svelte, complete with server-side rendering, routing, code-splitting for JS and CSS, adapters for different serverless platforms and so on.\n\nIf you're familiar with [Sapper](https://sapper.svelte.dev), SvelteKit is Sapper's successor.\n\n## From Snowpack to Vite\n\nOne thing that might seem surprising after the [announcement video](/blog/whats-the-deal-with-sveltekit), in which I waxed lyrical about [Snowpack](https://www.snowpack.dev/), is that SvelteKit uses [Vite](https://vitejs.dev) under the hood. When we tried Snowpack back when we started thinking about what form SvelteKit should take, it was love at first sight.\n\nSnowpack created an entirely new category of dev tooling. Rather than _bundling_ your app in development, as we've been doing with webpack and Rollup for the last several years, Snowpack is an _unbundled dev server_ that uses the browser's native `import` and does 1:1 transformations of things like Svelte components on the fly. As a result you get quick startup, simple caching and instant hot module reloading. Once you experience this way of working, it will ruin you for anything else.\n\nVite falls into the same category as Snowpack. While Vite 1 wasn't suitable for SvelteKit \u2014 it was Vue-centric (Vite and Vue are both created by [Evan You](https://twitter.com/youyuxi)) and made server-side rendering difficult \u2014 Vite 2 is framework-agnostic and designed with SSR at the core. It also has powerful features, like CSS code-splitting, that we previously had to implement ourselves. When we evaluated the two technologies side-by-side we were forced to conclude that Vite is a closer ma",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-03-23-sveltekit-beta.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "09f121a6-e7b7-4b2c-a860-c5143b75247b-1",
    "text": "---\ntitle: \"What's new in Svelte: March 2021\"\ndescription: Call for Svelte Summit Speakers! Improved SSR, non-HTML5 compilation targets, and ESLint TypeScript support\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nLots to cover this month with releases from across the Svelte ecosystem. Most importantly, Svelte Summit Spring 2021 has an [Open Call for Speakers](https://sessionize.com/svelte-summit-spring-2021). **The deadline is March 14** so if you have an idea for a talk, submit it now!\n\nLet's dive into the news \ud83d\udc2c\n\n## What's new in `sveltejs/svelte`\n\n- SSR store handling has been reworked to subscribe and unsubscribe as in DOM mode. SSR stores should work much more consistently now (**3.31.2**, see [custom stores](https://svelte.dev/examples/custom-stores) and [Server-side component API ](https://svelte.dev/docs#run-time-server-side-component-api))\n- Multiple instances of the same action are now allowed on an element (**3.32.0**, [example](https://svelte.dev/repl/01a14375951749dab9579cb6860eccde?version=3.32.0))\n- The new `foreign` namespace should make it easier for alternative compile targets (like Svelte Native and SvelteGUI) by disabling certain HTML5-specific behaviour and checks (**3.32.0**, [more info](https://github.com/sveltejs/svelte/pull/5652))\n- Support for inline comment sourcemaps in code from preprocessors (**3.32.0**)\n- Destructured defaults are now allowed to refer to other variables (**3.33.0**, [example](https://svelte.dev/repl/0ee7227e1b45465b9b47d7a5ae2d1252?version=3.33.0))\n- Custom elements will now call `onMount` functions when connecting and clean up when disconnecting (**3.33.0**, checkout [this PR](https://github.com/sveltejs/svelte/pull/4522) for an interesting conversation on how folks are using Svelte with Web Components)\n- A `cssHash` option has been added to the compiler options to control the classname used for CSS scoping (**3.34.0**, [docs](https://svelte.dev/docs#compile-time-svelte-compile))\n- Continued improvement to TypeScript definitions\n\nFor a complete list of changes, including bug fixes and links to PRs, check out [the CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md)\n\n## New from `sveltejs/language-tools`\n\n- For language server clients that don't support `didChangeWatchedFiles`, a fallback file watcher will be used instead\n- New highlighting rules for store accessors and element directives (like `bind:` and `class:`)\n- HTML tags can now be renamed together\n- Mustache tags parsing is now more robust and will provide better intellisense in more situations\n\nHaven't tried the language-tools yet? Check out [Svelte Extension for VSCode](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) or find a plugin for your favorite IDE!\n\n## Other changes from `sveltejs/*`\n\n- [eslint-plugin-svelte3](https://github.com/sveltejs/eslint-plugin-svelte3) now supports TypeScript as of 3.1.0\n- [prettier-plugin-svelte](https://github.com/sveltejs/prettier-plugin-svelte",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-03-01-whats-new-in-svelte-march-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "09f121a6-e7b7-4b2c-a860-c5143b75247b-2",
    "text": "ltejs/*`\n\n- [eslint-plugin-svelte3](https://github.com/sveltejs/eslint-plugin-svelte3) now supports TypeScript as of 3.1.0\n- [prettier-plugin-svelte](https://github.com/sveltejs/prettier-plugin-svelte/) released a number of minor versions to address whitespace and comment trimming issues.\n- [svelte-preprocess](https://github.com/sveltejs/svelte-preprocess/) bug fixes this month include fixes to postcss transformations and support for both v2 and v3 of `postcss-load-config`\n- [sapper](https://github.com/sveltejs/sapper/)'s 0.29.1 release fixes some bad imports in type definitions, updates typings to be compatible with express/polka, and restores hashing of all CSS file names.\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [Tracking the Coronavirus](https://www.nytimes.com/interactive/2021/us/new-york-city-new-york-covid-cases.html) from NYTimes is an example of SvelteKit in production\n- [Budibase](https://github.com/Budibase/budibase) is an open-source low-code platform, helping developers and IT professionals build, automate, and ship internal tools 50x faster on their own infrastructure.\n- [Track the Parcel](https://tracktheparcel.com/) is a one-stop tool for tracking parcel status with all major package shippers.\n- [Memo](https://sendmemo.app/features/) is a replacement for email that uses Svelte for modern messaging\n- [Userscripts Safari](https://github.com/quoid/userscripts) is an open-source userscript editor for Safari... a native Svelte app for Mac OS!\n- [SVGX](https://svgx.app/) is \"the desktop SVG asset manager designers and developers wished they had.\"\n- [Armoria](https://azgaar.github.io/Armoria/) is a procedural heraldry generator and editor\n- [FictionBoard](https://www.fictionboard.com) is a virtual table top (VTT) platform that just released fillable and responsive character sheets\n- [Castles & Crusades Treasure Generator](https://treasure.playaheadgames.com/) is a treasure generator for the table top RPG: Castles and Crusades.\n- [NESBit Studio](https://jensa.org/NESBitStudio-web/graphics/spritesheets) is a toolkit to help the development of homebrew NES games\n- [ElectroBlocks](https://electroblocks.org/) is an online Arduino IDE with a built-in simulator (Chrome Only)\n- [Goblin.life](https://store.steampowered.com/app/552180/GoblinLife/) is a 3D world builder whose UI is built with Svelte\n- [farmbox](https://farmbox.ae/) is a UAE-based grocery delivery services\n- [heroeswearmasks.fun](https://heroeswearmasks.fun/) is a client-side machine learning tool that determines whether or not you're wearing a mask.\n- [weatherify](https://brdtheo-weatherify.netlify.app/) is a very pretty (and [open source](https://github.com/brdtheo/weatherify)) weather app\n- [DSN Live](https://dsn-live.netlify.app/#/) lets you monitor connections between NASA/JPL and interplanetary spacecraft missions in real time.\n\n**Demos, Libraries, Tools & Components**\n\n- [spc](https://github.com/khang-nd/spc) is a special characters picker component for the web\n- [sve",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-03-01-whats-new-in-svelte-march-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "09f121a6-e7b7-4b2c-a860-c5143b75247b-3",
    "text": "JPL and interplanetary spacecraft missions in real time.\n\n**Demos, Libraries, Tools & Components**\n\n- [spc](https://github.com/khang-nd/spc) is a special characters picker component for the web\n- [svelte-injector](https://www.npmjs.com/package/svelte-injector) lets you inject Svelte components in React, Angular, Vue, jQuery, Vanilla JS.\n- [Felte](https://felte.dev/) is a form library for Svelte with simple validation reporting.\n- [svelte-use-form](https://github.com/noahsalvi/svelte-use-form#readme) is form library that \"is easy to use and has 0 boilerplate.\"\n- [Formula](https://formula.svelte.codes/) provides \"Zero Configuration Reactive Forms for Svelte.\"\n- [Houdini](https://github.com/AlecAivazis/houdini) is \"the disappearing GraphQL client built for Sapper and Sveltekit.\"\n- [svelte-split-pane](https://www.reddit.com/r/sveltejs/comments/leoe33/sveltesplitpane/) is a draggable split pane component\n- [svelte-virtualized-auto-sizer](https://github.com/micha-lmxt/svelte-virtualized-auto-sizer) is a high-order component that automatically adjusts the width and height of a single child.\n- [svelte-window](https://github.com/micha-lmxt/svelte-window) are components for efficiently rendering large, scrollable lists and tabular data.\n- [Svelte Persistent store](https://github.com/MacFJA/svelte-persistent-store) is a Svelte store that keep its value through pages and reloads\n- [Svelte Dark](https://marketplace.visualstudio.com/items?itemName=NickScialli.svelte-dark) is a VSCode theme inspired by the svelte.dev REPL\n- [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost) has been updated to support Svelte libraries and help developers keep their bundle size under control.\n- [Tree-sitter-svelte](https://github.com/Himujjal/tree-sitter-svelte) provides tree-sitter grammar for svelte\n- [Svelte Ripple](https://svelte.dev/repl/b73224a0fd4248178e3eab41943d41a9?version=3.31.2) is a Material Design ripple effect that doesn't depend on `@material/ripple` (made by @karakara in the Svelte Discord)\n- [Analog SVG Clock](https://svelte.dev/repl/270e83f43e7a48918d8f2d497760904f?version=3.32.1) is a great example of easing functions (made by @tonmcg in the Svelte Discord)\n- [Console Log Styler](https://svelte.dev/repl/11f609d0d90746f08da6d3d90bba84fc?version=3.32.0) lets you generate a styled console log using pseudo HTML and CSS (made by @EmNudge in the Svelte Discord)\n- [svelte-heroicons](https://github.com/martinse/svelte-heroicons) is a handy wrapper for the Heroicons icon library\n- [supabase-ui-svelte](https://github.com/joshnuss/supabase-ui-svelte) are UI components for Supabase authentication\n\n**Have your own Svelte Component to share?** Check out the [Components](https://sveltesociety.dev/components) page on the Svelte Society site. You can contribute by making [a PR to this file](https://github.com/svelte-society/sveltesociety.dev/blob/master/src/pages/components/components.json).\n\n**Learning Resources & Starters**\n\n- [The **u",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-03-01-whats-new-in-svelte-march-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1ecd5870-d81e-4dd3-b7ad-826ebe235013-1",
    "text": "---\ntitle: \"What's new in Svelte: January 2023\"\ndescription: 'SvelteKit 1.0, learn.svelte.dev, and type definitions for Svelte elements.'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nIt's been just two weeks since the release of [SvelteKit 1.0](https://svelte.dev/blog/announcing-sveltekit-1.0)! If you haven't yet, check out the [livestream](https://www.youtube.com/watch?v=N4BRVkQVoMc), [new website](https://kit.svelte.dev/) and [learn.svelte.dev](https://learn.svelte.dev/) to learn all the features of SvelteKit step-by-step.\n\nLet's dive into the details...\n\n## What's new in SvelteKit\n\n- `@sveltejs/kit` 1.0 is out! All future releases will follow semver and changes will be listed as major/minor/patch in the [CHANGELOG](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md#100).\n- Improved support for Storybook and Histoire ([#7990](https://github.com/sveltejs/kit/pull/7990)). Work is ongoing to fully support those tools ([storybook#20239](https://github.com/storybookjs/storybook/pull/20239)).\n- `vitePreprocess` is now the default preprocessor. Please see [the docs](https://kit.svelte.dev/docs/integrations#preprocessors) for differences between `vitePreprocess` and `svelte-preprocess` ([#8036](https://github.com/sveltejs/kit/pull/8036)).\n\n**Breaking changes:**\n\n- Unknown exports (except when starting with an underscore) are no longer allowed from `+(layout|page)(.server)?.js` and `+server.js` files ([#7878](https://github.com/sveltejs/kit/pull/7878))\n- `__data.json` is now stripped from URL ([#7979](https://github.com/sveltejs/kit/pull/7979))\n- `sveltekit()` will now return a promise for an array of Vite plugins ([#7994](https://github.com/sveltejs/kit/pull/7994))\n- A new `embedded` option, turned off by default, helps with link clicks when embedding SvelteKit ([docs](https://kit.svelte.dev/docs/configuration), [#7969](https://github.com/sveltejs/kit/pull/7969))\n- Automatic fallback generation has been replaced with `builder.generateFallback(fallback)` ([#8013](https://github.com/sveltejs/kit/pull/8013))\n- `invalid()` is now `fail()` and `ValidationError` is now `ActionFailure` ([#8012](https://github.com/sveltejs/kit/pull/8012))\n- SvelteKit will now throw an error on invalid load response ([#8003](https://github.com/sveltejs/kit/pull/8003))\n- SvelteKit is now using Vite 4 and requires a Svelte `peerDependency` of `^3.54.0` ([#7543](https://github.com/sveltejs/kit/pull/7543))\n- Shells are now prerendered when `ssr` is false and `prerender` is not false - ensure prerender is false when ssr is also false ([#8131](https://github.com/sveltejs/kit/pull/8131))\n- Warnings and errors about removed/changed APIs have been removed ([#8019](https://github.com/sveltejs/kit/pull/8019))\n\n## What's new in Svelte\n\n- The `options.direction` argument can now be passed to custom transition functions (**3.54.0**, [#3918](https://github.com/sveltejs/svelte/issues/3918))\n- Variables can now be updated from a `@const` declared function (**",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-01-01-whats-new-in-svelte-january-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1ecd5870-d81e-4dd3-b7ad-826ebe235013-2",
    "text": "on` argument can now be passed to custom transition functions (**3.54.0**, [#3918](https://github.com/sveltejs/svelte/issues/3918))\n- Variables can now be updated from a `@const` declared function (**3.54.0**, [#7843](https://github.com/sveltejs/svelte/issues/7843))\n- `svelte/elements` has been added for Svelte/HTML type definitions (**3.55.0**, [#7649](https://github.com/sveltejs/svelte/pull/7649))\n\n## What's new in Language Tools\n\nThe Svelte extension and language tools now have a few new minimum version requirements:\n\n- Node version is now 16\n- TypeScript version is now 4.9\n- Svelte version is now 3.55\n\nThe following features have also been released:\n\n- missing handler quick fix ([#1731](https://github.com/sveltejs/language-tools/pull/1731))\n- add Svelte anchor missing attribute code action ([#1730](https://github.com/sveltejs/language-tools/pull/1730))\n- better commit characters handling ([#1742](https://github.com/sveltejs/language-tools/pull/1742))\n- add `--preserveWatchOutput` option ([#1715](https://github.com/sveltejs/language-tools/pull/1715))\n- enhance Quickfixes to include Svelte Stores ([#1789](https://github.com/sveltejs/language-tools/pull/1789))\n- only show SvelteKit files context menu in SvelteKit projects ([#1771](https://github.com/sveltejs/language-tools/pull/1771))\n- use the `satisfies` operator if possible ([#1770](https://github.com/sveltejs/language-tools/pull/1770))\n\nFor all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Svelte Recipes \ud83e\uddd1\u200d\ud83c\udf73](https://svelte.recipes/) provides code snippets for common data visualization problems\n- [Everything Svelte](https://www.everythingsvelte.com/) is a new course teaching everything you need to know to build a modern web application\n- [CSS Timeline](https://css-timeline.vercel.app/) is a Timeline of the history and evolution of CSS\n- [GitBar](https://github.com/mikaelkristiansson/gitbar) is a system tray app for showing your pull requested reviews\n- [Texture Lab](https://www.texturelab.xyz/) generates instant textures for games from any text\n- [Totems](https://totems-soclage.com/) is a studio creating custom-made stands and supports\n- [PeopletoNotion](https://www.peopletonotion.com/) is a Chrome Extension that adds LinkedIn profiles to Notion in one click\n- [DeckDev](https://deckdev.com/) is a deck builder for Magic: The Gathering\n- [Default Shortcuts](https://www.defaultshortcuts.com/) is a tool for searching keyboard shortcuts across browsers.\n\n**Learning Resources**\n\n_From Svelte Society_\n\n- [Svelte Society - London December 2022](https://www.youtube.com/watch?v=2ijSarsHfN0) featuring two talks by Antony and Rich, respectively. Rich's talk, \"Mistakes were made\" is a SvelteKit 1.0 retrospective.\n- [SvelteKit with Netlify Edge Functions](https://twitter.com/BrittneyPostma/status/1603402599742537729?s=20&t=Lw08QNMpd",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-01-01-whats-new-in-svelte-january-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1ecd5870-d81e-4dd3-b7ad-826ebe235013-3",
    "text": "spectively. Rich's talk, \"Mistakes were made\" is a SvelteKit 1.0 retrospective.\n- [SvelteKit with Netlify Edge Functions](https://twitter.com/BrittneyPostma/status/1603402599742537729?s=20&t=Lw08QNMpdEP1JZzMQGXLDA) by Brittney Postma\n- [Sirens Stream: Skeleton - A fully featured UI Toolkit](https://www.youtube.com/watch?v=2OnJYCXJPK4) with Chris Simmons and Brittney Postma\n- [Sirens: SvelteKit for Enterprise](https://www.youtube.com/watch?v=_0ijqV0DmNQ) - Lacey Pevey joins the Sirens to talk through using SvelteKit at the Enterprise level\n- [Sirens: Form Actions](https://www.youtube.com/watch?v=2OISk5-EHek) - Kev joins the Sirens again to chat about Form actions in SvelteKit and create a new form for speaker submissions on SvelteSirens.dev\n\n_To Watch_\n\n- [SvelteKit is my mistress](https://www.youtube.com/watch?v=uEJ-Rnm2yOE) by Fireship\n- [Sveltekit 1.0 in under 3 minutes](https://www.youtube.com/watch?v=3KGKDgwIrkE) by Gui Bibeau\n- [What Svelte UI Library Should You Use?](https://www.youtube.com/watch?v=O0mNU0maItY) and [The Best Icon Library For Svelte (Iconify)](https://www.youtube.com/watch?v=iGVhzsTZSa8) by Joy of Code\n\n_To Read_\n\n- [Rendering emails with Svelte](https://escape.tech/blog/sveltemails/) by Gautier Ben A\u00efm\n- [Now That React is Dead, What\u2019s the Next Big Thing?](https://javascript.plainenglish.io/now-that-react-js-is-dead-whats-the-next-big-thing-7fa72a36a69b) by Somnath Singh\n- [What is SvelteKit? And Why Should You Care?](https://blog.tiia.rocks/what-is-sveltekit-and-why-should-you-care) by Tila\n- [Sveltekit API endpoints](https://www.jefmeijvis.com/post/006-sveltekit-api-endpoints) by Jef Meijvis\n- [Chart.js 4.0](https://github.com/chartjs/Chart.js/discussions/10977) has been released, with updated Svelte support\n- [Creating A Custom Svelte Media Query Store](https://pqina.nl/blog/svelte-media-query-store/) by Rik Schennink\n\n**Libraries, Tools & Components**\n\n- [Konsta UI](https://konstaui.com/) is a library of pixel perfect mobile UI components built with Tailwind CSS for React, Vue & Svelte\n- [probablykasper/modal-svelte](https://github.com/probablykasper/modal-svelte) is a modal component for Svelte\n- [deepcrayon/scrolltron](https://spacecruft.org/deepcrayon/scrolltron) is a news ticker overlay for OBS Studio\n- [JetBrains WebStorm 2022.3](https://www.jetbrains.com/webstorm/whatsnew/#:~:text=Update%20about%20Svelte%20support) now has built-in support for Svelte\n- [NextAuth.js](https://vercel.com/blog/announcing-sveltekit-auth) is now available for SvelteKit\n- [SvelteKit CAS authentication](https://www.npmjs.com/package/@macfja/sveltekit-cas) is a set of functions to ease usage of a CAS/SSO in SvelteKit\n- [@macfja/sveltekit-session](https://www.npmjs.com/package/@macfja/sveltekit-session) is an easy way to do session management for SvelteKit\n- [@svelte-plugins/tooltips](https://svelte-plugins.github.io/tooltips/) is a basic tooltip component written in Svelte\n- [tRPC-SvelteKit](https://github.com/icflorescu/trpc-sveltekit) pr",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-01-01-whats-new-in-svelte-january-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8c229e5d-bb8c-4cab-8619-b147099b107e-1",
    "text": "---\ntitle: Zero-effort type safety\ndescription: More convenience and correctness, less boilerplate\nauthor: Simon Holthausen\nauthorURL: https://twitter.com/dummdidumm_\n---\n\nBy sprinkling type annotations into your SvelteKit apps, you can get full type safety across the network \u2014 the `data` in your page has a type that's inferred from the return values of the `load` functions that generated that data, without you having to explicitly declare anything. It's one of those things that you come to wonder how you ever lived without.\n\nBut what if we didn't even need the annotations? Since `load` and `data` are part of the framework, can't the framework type them for us? This is, after all, what computers are for \u2014 doing the boring bits so we can focus on the creative stuff.\n\nAs of today, yes: it can.\n\n<video src=\"https://sveltejs.github.io/assets/video/zero-config-types.mp4\" controls muted playsinline></video>\n\nIf you're using VSCode, just upgrade the Svelte extension to the latest version, and you'll never have to annotate your `load` functions or `data` props again. Extensions for other editors can also use this feature, as long as they support the Language Server Protocol and TypeScript plugins. It even works with the latest version of our CLI diagnostics tool `svelte-check`!\n\nBefore we dive in, let's recap how type safety works in SvelteKit.\n\n## Generated types\n\nIn SvelteKit, you get the data for a page in a `load` function. You _could_ type the event by using `ServerLoadEvent` from `@sveltejs/kit`:\n\n```ts\nconst database = {\n\tgetPost(slug: string | undefined): Promise<string> {\n\t\treturn Promise.resolve('hello world');\n\t}\n};\n// ---cut---\n// src/routes/blog/[slug]/+page.server.ts\nimport type { ServerLoadEvent } from '@sveltejs/kit';\n\nexport async function load(event: ServerLoadEvent) {\n\treturn {\n\t\tpost: await database.getPost(event.params.post)\n\t};\n}\n```\n\nThis works, but we can do better. Notice that we accidentally wrote `event.params.post`, even though the parameter is called `slug` (because of the `[slug]` in the filename) rather than `post`. You could type `params` yourself by adding a generic argument to `ServerLoadEvent`, but that's brittle.\n\nThis is where our automatic type generation comes in. Every route directory has a hidden `$types.d.ts` file with route-specific types:\n\n```diff\n// src/routes/blog/[slug]/+page.server.ts\n-import type { ServerLoadEvent } from '@sveltejs/kit';\n+import type { PageServerLoadEvent } from './$types';\n\nexport async function load(event: PageServerLoadEvent) {\n    return {\n-        post: await database.getPost(event.params.post)\n+        post: await database.getPost(event.params.slug)\n    };\n}\n```\n\nThis reveals our typo, as it now errors on the `params.post` property access. Besides narrowing the parameter types, it also narrows the types for `await event.parent()` and the `data` passed from a server `load` function to a universal `load` function. Notice that we\u2019re now using `PageServerLoadEvent`, to distinguish it fro",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-09-zero-config-type-safety.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8c229e5d-bb8c-4cab-8619-b147099b107e-2",
    "text": "arrows the types for `await event.parent()` and the `data` passed from a server `load` function to a universal `load` function. Notice that we\u2019re now using `PageServerLoadEvent`, to distinguish it from `LayoutServerLoadEvent`.\n\nAfter we have loaded our data, we want to display it in our `+page.svelte`. The same type generation mechanism ensures that the type of `data` is correct:\n\n```svelte\n<!-- src/routes/blog/[slug]/+page.svelte -->\n<script lang=\"ts\">\n\timport type { PageData } from './$types';\n\n\texport let data: PageData;\n</script>\n\n<h1>{data.post.title}</h1>\n\n<div>{@html data.post.content}</div>\n```\n\n## Virtual files\n\nWhen running the dev server or the build, types are auto-generated. Thanks to the file-system based routing, SvelteKit is able to infer things like the correct parameters or parent data by traversing the route tree. The result is outputted into one `$types.d.ts` file for each route, which looks roughly like this:\n\n```ts\n// @errors: 2344 2694 2307\n// $types.d.ts\nimport type * as Kit from '@sveltejs/kit';\n\n// types inferred from the routing tree\ntype RouteParams = { slug: string };\ntype RouteId = '/blog/[slug]';\ntype PageParentData = {};\n\n// PageServerLoad type extends the generic Load type and fills its generics with the info we have\nexport type PageServerLoad = Kit.ServerLoad<RouteParams, PageParentData, RouteId>;\n\n// The input parameter type of the load function\nexport type PageServerLoadEvent = Parameters<PageServerLoad>[0];\n\n// The return type of the load function\nexport type PageData = Kit.ReturnType<\n\ttypeof import('../src/routes/blog/[slug]/+page.server.js').load\n>;\n```\n\nWe don't actually write `$types.d.ts` into your `src` directory \u2014 that would be messy, and no-one likes messy code. Instead, we use a TypeScript feature called [`rootDirs`](https://www.typescriptlang.org/tsconfig#rootDirs), which lets us map \u2018virtual\u2019 directories to real ones. By setting `rootDirs` to the project root (the default) and additionally to `.svelte-kit/types` (the output folder of all the generated types) and then mirroring the route structure inside it we get the desired behavior:\n\n```\n// on disk:\n.svelte-kit/\n\u251c types/\n\u2502 \u251c src/\n\u2502 \u2502 \u251c routes/\n\u2502 \u2502 \u2502 \u251c blog/\n\u2502 \u2502 \u2502 \u2502 \u251c [slug]/\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514 $types.d.ts\nsrc/\n\u251c routes/\n\u2502 \u251c blog/\n\u2502 \u2502 \u251c [slug]/\n\u2502 \u2502 \u2502 \u251c +page.server.ts\n\u2502 \u2502 \u2502 \u2514 +page.svelte\n\n\n// what TypeScript sees:\nsrc/\n\u251c routes/\n\u2502 \u251c blog/\n\u2502 \u2502 \u251c [slug]/\n\u2502 \u2502 \u2502 \u251c $types.d.ts\n\u2502 \u2502 \u2502 \u251c +page.server.ts\n\u2502 \u2502 \u2502 \u2514 +page.svelte\n```\n\n## Type safety without types\n\nThanks to the automatic type generation we get advanced type safety. Wouldn't it be great though if we could just omit writing the types at all? As of today you can do exactly that:\n\n```diff\n// src/routes/blog/[slug]/+page.server.ts\n-import type { PageServerLoadEvent } from './$types';\n\n-export async function load(event: PageServerLoadEvent) {\n+export async function load(event) {\n    return {\n        post: await database.getPost(event.params.post)\n    };\n}\n```\n\n```diff\n<!-- src/routes/blog/[slug]/+page.svel",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-09-zero-config-type-safety.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b3cd1277-c33c-40d3-bb44-06fa248b433a-1",
    "text": "---\ntitle: \"What's new in Svelte: September 2021\"\ndescription: StackOverflow's most loved web framework\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nThis month, Svelte was [voted StackOverflow's most loved web framework](https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-web-frameworks), Tan Li Hau [talked to Svelte Radio](https://share.transistor.fm/s/84c7521b) about his [Svelte-filled YouTube channel](https://www.youtube.com/channel/UCbmC3HP3FaAFdcZkui8YoMQ), and SvelteKit made even more progress towards its 1.0 release!\n\n## New in Svelte\n\n- `use:actions` can now be used on `<svelte:body>` (**3.42.0**)\n- `HTMLElement`, `SVGElement` (**3.42.2**) and `BigInt` (**3.42.3**) are now known globals\n- There is less code in Svelte's output thanks to the following improvements in **3.42.2**:\n  - Whitespace is now collapsed in class and style attributes\n  - Hydrated components have been updated to only rely upon helpers for creating the types of elements present in the component\n- Scaling is now accounted for in `flip` animations (**3.42.2**)\n- All `<option>`s in a `<select>` are now deselected when the bound value doesn't match any of them (**3.42.2**)\n\nFor a full list of features and bug fixes, check out the [Svelte changelog](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## SvelteKit Updates\n\nSvelte maintainers are [looking for help getting SvelteKit to 1.0](https://github.com/sveltejs/kit/issues/2100). We've knocked out over 100 issues that were on the 1.0 milestone. There's only a couple dozen left and we'd love a hand making that list a bit shorter!\n\nIf you'd like to help, please consider working on any of the [1.0 milestone issues](https://github.com/sveltejs/kit/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0).\n\nThe focus this past month was on continuing to iron out any kinks, with well over 100 PRs merged. A few new features went in as well...\n\n- SvelteKit will now detect if a prerendered app is trying to access a query parameter and return an error instead of failing silently ([#2104](https://github.com/sveltejs/kit/pull/2104))\n- `adapter-node` now lets you [add the Kit middleware to your own server](https://kit.svelte.dev/faq#integrations) for use with other middleware. You can also [add middleware in dev mode](https://kit.svelte.dev/faq#how-do-i-use-x-with-sveltekit-how-do-i-use-middleware) with more improvements to come in this area\n- The new [`sequence` helper lets you chain together multiple `handle` calls](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks)\n- A new [`handleError` hook](https://kit.svelte.dev/docs/hooks#handleerror) gives you the option to send data to an error tracking service, or to customise the formatting before printing the error to the console.\n- `adapter-node` can now listen on socket path ([#2048](https://github.com/sveltejs/kit/pull/2048))\n\nTo see all updates to SvelteKit, check out the [SvelteKit changelog](https://github.com/sveltejs/kit/blob/",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-09-01-whats-new-in-svelte-september-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b3cd1277-c33c-40d3-bb44-06fa248b433a-2",
    "text": "ter-node` can now listen on socket path ([#2048](https://github.com/sveltejs/kit/pull/2048))\n\nTo see all updates to SvelteKit, check out the [SvelteKit changelog](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [macos-web](https://github.com/PuruVJ/macos-web) by @puruvjdev has been rebuilt with Svelte from the ground up. Check out all the details in this [Twitter thread](https://twitter.com/puruvjdev/status/1426267327687847939)\n- [Brave Search](https://search.brave.com/) is using Svelte\n- [exatorrent](https://github.com/varbhat/exatorrent) is a self-hostable, easy-to-use, lightweight and feature-rich torrent client written in Go and Svelte\n- [json2TsTypes](https://github.com/jatinhemnani01/json2TsTypes) is a simple tool which will convert your JSON to TypeScript Types/Interfaces\n- [Histogram.dev](https://histogram.dev/) generates histograms for each feature in a CSV\n- [cybernetic.dev](https://cybernetic.dev/) is a collection of data-centric UI experiments made while learning Svelte\n- [LunaNotes](https://chrome.google.com/webstore/detail/lunanotes-youtube-video-n/oehoffnnkgcdacmbkhmlbjedinpampak?hl=en) is a Chrome extension to help with taking YouTube video notes\n- [theia.games](https://theia.games/#dev)'s built-in 3D environment editor lets you create a VR world with a menu built in Svelte\n- [Ferrum](https://github.com/probablykasper/ferrum) is a music library and player available for Mac, Windows or Linux\n- [Fluid Earth](https://github.com/byrd-polar/fluid-earth) is an interactive WebGL application for visualizing Earth's atmosphere and oceans\n\n**Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better?** Check out [the list of open issues](https://github.com/svelte-society/sveltesociety-2021/issues) if you'd like to contribute to the Svelte Society rewrite in SvelteKit.\n\n**Educational Content**\n\n- [Tauri with Standard Svelte or SvelteKit](https://medium.com/@cazanator/tauri-with-standard-svelte-or-sveltekit-ad7f103c37e7) walks through how to setup Svelte with Tauri, a new light-weight framework for developing cross-platform hybrid desktop applications\n- [Svelte - Web App Development Reimagined [An Intro to Svelte]](https://www.youtube.com/watch?v=4CGzFwHoD0A&list=PLEx5khR4g7PKSASVAXXiAhkyx02_OeruP) is a great intro talk from the goto; conference\n- [LevelUpTuts - Even More 5 Things I Like More In Svelte Than React](https://www.youtube.com/watch?v=ISmnG2sIOeM) highlights Svelte's approach to refs (don't need them), meta tags and more\n- [State Management in Svelte Applications](https://auth0.com/blog/state-management-in-svelte-applications/) is a tutorial on how to use the Svelte state management store to manage state in Svelte applications\n- [Migrating from Sapper to SvelteKit](https://shipbit.de/blog/migrating-from-sapper-to-svelte-kit/) is a review and retrospective of ShipBit's migration from Sapper\n\n**Libraries, Tools & Comp",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-09-01-whats-new-in-svelte-september-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1b6662c5-3121-4d7c-ac2d-c46e10daa30a-1",
    "text": "---\ntitle: \"What's new in Svelte: October 2020\"\ndescription: New object methods, in-depth learning resources and tons of integration examples!\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWelcome to the first edition of our \"What's new in Svelte\" series! We'll try to make this a monthly blog post in which you'll find out about new features, bug fixes, and a showcase of Svelte projects from around the community.\n\n## New features\n\n1. `use:obj.method` allows functions defined within objects to be used within actions ([Example](https://svelte.dev/repl/c305722adb4a4545b27b198ea8ff9bde?version=3.27.0), **3.26.0**, warning removed in **3.27.0**)\n2. `_` is now supported as a \"numerical separator\", similar to a `.` or `,` ([Example](https://svelte.dev/repl/844c39e91d1248649fe54af839fab570?version=3.26.0), **3.26.0**)\n3. `import.meta` now works in template expressions ([Example](https://svelte.dev/repl/9630de41957a4c80a4fce264360a6bc7?version=3.26.0), **3.26.0**)\n4. CSS Selectors with `~` and `+` combinators are now supported ([Example](https://svelte.dev/repl/91ad9257d2d1430185a504a18cc60172?version=3.29.0), **3.27.0**, with a compiler fix in **3.29.0**)\n5. The `{#key}` block is now available to key arbitrary content on an expression. Whenever the expression changes, the contents inside the `{#key}` block will be destroyed and recreated. For an in-depth explanation and to find out how it's implemented, check out the [new blog post](https://lihautan.com/contributing-to-svelte-implement-key-block/) of Svelte Team member Tan Li Hau. ([More info](https://github.com/sveltejs/svelte/issues/1469), **3.29.0**)\n6. Slots can now be forwarded through child components! This used to only be possible by adding extra wrapper `<div>`s ([More info](https://github.com/sveltejs/svelte/issues/2079), **3.29.0**)\n7. When using TypeScript, you can now type the `createEventDispatcher` method:\n\n```svelte\n<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher<{\n\t\t/**\n\t\t * you can also add docs\n\t\t */\n\t\tchecked: boolean; // Will translate to `CustomEvent<boolean>`\n\t\thello: string;\n\t}>();\n\n\t// ...\n</script>\n```\n\nThis will make sure that you can invoke dispatch only with the specified event names and its types. The Svelte for VS Code extension was also updated to deal with this new feature. It will provide strong typings for these events as well as autocompletion and hover information.\n\n**New from Sapper!**\nSapper 0.28.9 just came out. The highlights from it include much better support for CSP nonces, asset preload support for exported pages, and error details are now available in the `$page` store on error pages.\n\nIn addition, Sapper's CSS handling has been rewritten over the course of recent releases in order to fix existing CSS handling bugs, refactor the CSS handling to occur entirely within a Rollup plugin, and remove the need internally to register CSS in the routing system. Congrats and thank you to the folk",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-10-01-whats-new-in-svelte-october-2020.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "1b6662c5-3121-4d7c-ac2d-c46e10daa30a-2",
    "text": "existing CSS handling bugs, refactor the CSS handling to occur entirely within a Rollup plugin, and remove the need internally to register CSS in the routing system. Congrats and thank you to the folks working on Sapper for all their solid work!\n\n## Impactful bug fixes\n\n- CSS compilation will no longer remove rules for the `open` attribute on `<details>` elements ([Example](https://svelte.dev/repl/ab4c0c177d1f4fab92f46eb8539cea9a?version=3.26.0), **3.26.0**)\n- `prettier-plugin-svelte` will do a better job now at dealing with whitespaces, especially around inline elements. It will also preserve formatting inside `<pre>` tags and will no longer format languages which are not supported by Prettier, like SASS, Pug or Stylus.\n\n## Coming up\n\n- [Svelte Summit](https://sveltesummit.com/), Svelte's second global online conference, is taking place on October 18! Sign up for free to get reminders and talk updates!\n\nFor all the features and bugfixes see the CHANGELOG for [Svelte](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md) and [Sapper](https://github.com/sveltejs/sapper/blob/master/CHANGELOG.md).\n\n---\n\n## Svelte Showcase\n\n- [This CustomMenu example](https://svelte.dev/repl/3a33725c3adb4f57b46b597f9dade0c1?version=3.25.0) demos how to replace the OS right-click menu\n- [GitHub Tetris](https://svelte.dev/repl/cc1eaa7c66964fedb5e70e3ecbbaa0e1?version=3.25.1) lets you play a Tetris-like game in a git commit history\n- [Who are my representatives?](https://whoaremyrepresentatives.us/) is a website built with Svelte to help US residents get more info on their congressional representatives\n- [Pick Palette](https://github.com/bluwy/pick-palette) is a color palette manager made with Svelte!\n\n### In-depth learning:\n\n- [Svelte 3 Up and Running](https://www.amazon.com/dp/B08D6T6BKS/ref=cm_sw_r_tw_dp_x_OQMtFb3GPQCB2) is a new book about building production-ready static web apps with Svelte 3\n- [Sapper Tutorial (Crash Course)](https://www.youtube.com/playlist?list=PL4cUxeGkcC9gdr4Qhx83gBBcID-KMe-PQ) walks through the ins-and-outs of Sapper, the Svelte-powered application framework\n- [Svelte Society Day France](https://france.sveltesociety.dev/) happened September 27th featuring a wide variety of topics all in French! You can find the full recording [here](https://www.youtube.com/watch?v=aS1TQ155JK4).\n\n### Plug-and-play components:\n\n- [svelte-zoom](https://github.com/vaheqelyan/svelte-zoom) brings \"nearly native\" pan-and-zoom to images on desktop and mobile\n- [svelte-materialify](https://github.com/TheComputerM/svelte-materialify) is a Material component library for Svelte with over 50 components\n- [svelte-undoable](https://github.com/macfja/svelte-undoable) makes it easy to introduce undo and redo functionality using `bind:`\n- [This Tilt component](https://svelte.dev/repl/7b23ad9d2693424482cd411b0378b55b?version=3.24.1) implements a common UX pattern where the hovered element tilts to follow the mouse\n\n### Lots of examples of how use JS tech came out this m",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-10-01-whats-new-in-svelte-october-2020.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "71a83e3d-149f-471e-8db6-0ae680bbadfd-1",
    "text": "---\ntitle: Streaming, snapshots, and other new features since SvelteKit 1.0\ndescription: Exciting improvements in the latest version of SvelteKit\nauthor: Geoff Rich\nauthorURL: https://geoffrich.net\n---\n\nThe Svelte team has been hard at work since the release of SvelteKit 1.0. Let\u2019s talk about some of the major new features that have shipped since launch: [streaming non-essential data](https://kit.svelte.dev/docs/load#streaming-with-promises), [snapshots](https://kit.svelte.dev/docs/snapshots), and [route-level config](https://kit.svelte.dev/docs/page-options#config).\n\n## Stream non-essential data in load functions\n\nSvelteKit uses [load functions](https://kit.svelte.dev/docs/load) to retrieve data for a given route. When navigating between pages, it first fetches the data, and then renders the page with the result. This could be a problem if some of the data for the page takes longer to load than others, especially if the data isn\u2019t essential \u2013 the user won\u2019t see any part of the new page until all the data is ready.\n\nThere were ways to work around this. In particular, you could fetch the slow data in the component itself, so it first renders with the data from `load` and then starts fetching the slow data. But this was not ideal: the data is even more delayed since you don\u2019t start fetching until the client renders, and you\u2019re also having to break SvelteKit\u2019s `load` convention.\n\nNow, in SvelteKit 1.8, we have a new solution: you can return a nested promise from a server load function, and SvelteKit will start rendering the page before it resolves. Once it completes, the result will be [streamed](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) to the page.\n\nFor example, consider the following `load` function:\n\n```ts\n// @errors: 2304\nexport const load: PageServerLoad = () => {\n\treturn {\n\t\tpost: fetchPost(),\n\t\tstreamed: {\n\t\t\tcomments: fetchComments()\n\t\t}\n\t};\n};\n```\n\nSvelteKit will automatically await the `fetchPost` call before it starts rendering the page, since it\u2019s at the top level. However, it won\u2019t wait for the nested `fetchComments` call to complete \u2013 the page will render and `data.streamed.comments` will be a promise that will resolve as the request completes. We can show a loading state in the corresponding `+page.svelte` using Svelte\u2019s [await block](https://svelte.dev/docs#template-syntax-await):\n\n```svelte\n<script lang=\"ts\">\n\timport type { PageData } from './$types';\n\texport let data: PageData;\n</script>\n\n<article>\n\t{data.post}\n</article>\n\n{#await data.streamed.comments}\n\tLoading...\n{:then value}\n\t<ol>\n\t\t{#each value as comment}\n\t\t\t<li>{comment}</li>\n\t\t{/each}\n\t</ol>\n{/await}\n```\n\nThere is nothing unique about the property `streamed` here \u2013 all that is needed to trigger the behavior is a promise outside the top level of the returned object.\n\nSvelteKit will only be able to stream responses if your app\u2019s hosting platform supports it. In general, any platform built around AWS Lambda (e.g. serverless functions) will not support str",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-21-streaming-snapshots-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "71a83e3d-149f-471e-8db6-0ae680bbadfd-2",
    "text": "d object.\n\nSvelteKit will only be able to stream responses if your app\u2019s hosting platform supports it. In general, any platform built around AWS Lambda (e.g. serverless functions) will not support streaming, but any traditional Node.js server or edge-based runtime will. Check your provider\u2019s documentation for confirmation.\n\nIf your platform does not support streaming, the data will still be available, but the response will be buffered and the page won\u2019t start rendering until all data has been fetched.\n\n## How does it work?\n\nIn order for data from a server `load` function to get to the browser, we have to _serialize_ it. SvelteKit uses a library called [devalue](https://github.com/Rich-Harris/devalue), which is like `JSON.stringify` but better \u2014 it can handle values that JSON can't (like dates and regular expressions), it can serialize objects that contain themselves (or that exist multiple times in the data) without breaking identity, and it protects you against [XSS vulnerabilities](https://github.com/rich-harris/devalue#xss-mitigation).\n\nWhen we server-render a page, we tell devalue to serialize promises as function calls that create a _deferred_. This is a simplified version of the code SvelteKit adds to the page:\n\n```js\n// @errors: 2339 7006\nconst deferreds = new Map();\n\nwindow.defer = (id) => {\n\treturn new Promise((fulfil, reject) => {\n\t\tdeferreds.set(id, { fulfil, reject });\n\t});\n};\n\nwindow.resolve = (id, data, error) => {\n\tconst deferred = deferreds.get(id);\n\tdeferreds.delete(id);\n\n\tif (error) {\n\t\tdeferred.reject(error);\n\t} else {\n\t\tdeferred.fulfil(data);\n\t}\n};\n\n// devalue converts your data into a JavaScript expression\nconst data = {\n\tpost: {\n\t\ttitle: 'My cool blog post',\n\t\tcontent: '...'\n\t},\n\tstreamed: {\n\t\tcomments: window.defer(1)\n\t}\n};\n```\n\nThis code, along with the rest of the server-rendered HTML, is sent to the browser immediately, but the connection is kept open. Later, when the promise resolves, SvelteKit pushes an additional chunk of HTML to the browser:\n\n```html\n<script>\n\twindow.resolve(1, {\n\t\tdata: [{ comment: 'First!' }]\n\t});\n</script>\n```\n\nFor client-side navigation, we use a slightly different mechanism. Data from the server is serialized as [newline delimited JSON](https://dataprotocols.org/ndjson/), and SvelteKit reconstructs the values \u2014 using a similar deferred mechanism \u2014 with `devalue.parse`:\n\n```json\n// this is generated immediately \u2014 note the [\"Promise\",1]...\n[{\"post\":1,\"streamed\":4},{\"title\":2,\"content\":3},\"My cool blog post\",\"...\",{\"comments\":5},[\"Promise\",6],1]\n\n// ...then this chunk is sent to the browser once the promise resolves\n[{\"id\":1,\"data\":2},1,[3],{\"comment\":4},\"First!\"]\n```\n\nBecause promises are natively supported in this way, you can put them anywhere in the data returned from `load` (except at the top level, since we automatically await those for you), and they can resolve with any type of data that devalue supports \u2014 including more promises!\n\nOne caveat: this feature needs JavaScript. Because of this,",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-21-streaming-snapshots-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "71a83e3d-149f-471e-8db6-0ae680bbadfd-3",
    "text": "l, since we automatically await those for you), and they can resolve with any type of data that devalue supports \u2014 including more promises!\n\nOne caveat: this feature needs JavaScript. Because of this, we recommend that you only stream in non-essential data so that the core of the experience is available to all users.\n\nFor more on this feature, see [the documentation](https://kit.svelte.dev/docs/load#streaming-with-promises). You can see a demo at [sveltekit-on-the-edge.vercel.app](https://sveltekit-on-the-edge.vercel.app/edge) (the location data is artificially delayed and streamed in) or [deploy your own on Vercel](https://vercel.com/templates/svelte/sveltekit-edge-functions), where streaming is supported in both Edge Functions and Serverless Functions.\n\nWe're grateful for the inspiration from prior implementations of this idea including Qwik, Remix, Solid, Marko, React and many others.\n\n## Snapshots\n\nPreviously in a SvelteKit app, if you navigated away after starting to fill out a form, going back wouldn\u2019t restore your form state \u2013 the form would be recreated with its default values. Depending on the context, this can be frustrating for users. Since SvelteKit 1.5, we have a built-in way to address this: snapshots.\n\nNow, you can export a `snapshot` object from a `+page.svelte` or `+layout.svelte`. This object has two methods: `capture` and `restore`. The `capture` function defines what state you want to store when the user leaves the page. SvelteKit will then associate that state with the current history entry. If the user navigates back to the page, the `restore` function will be called with the state you previously had set.\n\nFor example, here is how you would capture and restore the value of a textarea:\n\n```svelte\n<script lang=\"ts\">\n\timport type { Snapshot } from './$types';\n\n\tlet comment = '';\n\n\texport const snapshot: Snapshot = {\n\t\tcapture: () => comment,\n\t\trestore: (value) => (comment = value)\n\t};\n</script>\n\n<form method=\"POST\">\n\t<label for=\"comment\">Comment</label>\n\t<textarea id=\"comment\" bind:value={comment} />\n\t<button>Post comment</button>\n</form>\n```\n\nWhile things like form input values and scroll positions are common examples, you can store any JSON-serializable data you like in a snapshot. The snapshot data is stored in [sessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage), so it will persist even when the page is reloaded, or if the user navigates to a different site entirely. Because it\u2019s in `sessionStorage`, you won\u2019t be able to access it during server-side rendering.\n\nFor more, see [the documentation](https://kit.svelte.dev/docs/snapshots).\n\n## Route-level deployment configuration\n\nSvelteKit uses platform-specific [adapters](https://kit.svelte.dev/docs/adapters) to transform your app code for deployment to production. Until now, you had to configure your deployment on an app-wide level. For instance, you could either deploy your app as an edge function or a serverless function, but not both. Thi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-21-streaming-snapshots-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "71a83e3d-149f-471e-8db6-0ae680bbadfd-4",
    "text": "ment to production. Until now, you had to configure your deployment on an app-wide level. For instance, you could either deploy your app as an edge function or a serverless function, but not both. This made it impossible to take advantage of the edge for parts of your app \u2013 if any route needed Node APIs, then you couldn\u2019t deploy any of it to the edge. The same is true for other aspects of deployment configuration, such as regions and allocated memory: you had to choose one value that applied to every route in your entire app.\n\nNow, you can export a `config` object in your `+server.js`, `+page(.server).js` and `+layout(.server).js` files to control how those routes are deployed. Doing so in a `+layout.js` will apply the configuration to all child pages. The type of `config` is unique to each adapter, since it depends on the environment you\u2019re deploying to.\n\n```ts\n// @errors: 2307\nimport type { Config } from 'some-adapter';\n\nexport const config: Config = {\n\truntime: 'edge'\n};\n```\n\nConfigs are merged at the top level, so you can override values set in a layout for pages further down the tree. For more details, see [the documentation](https://kit.svelte.dev/docs/page-options#config).\n\nIf you deploy to Vercel, you can take advantage of this feature by installing the latest versions of SvelteKit and your adapter. This will require a major upgrade to your adapter version, since adapters supporting route-level config require SvelteKit 1.5 or later.\n\n```bash\nnpm i @sveltejs/kit@latest\nnpm i @sveltejs/adapter-auto@latest # or @sveltejs/adapter-vercel@latest\n```\n\nFor now, only the [Vercel adapter](https://kit.svelte.dev/docs/adapter-vercel#deployment-configuration) implements route-specific config, but the building blocks are there to implement this for other platforms. If you\u2019re an adapter author, see the changes in [the PR](https://github.com/sveltejs/kit/pull/8740) to see what is required.\n\n## Incremental static regeneration on Vercel\n\nRoute-level config also unlocked another much-requested feature \u2013 you can now use [incremental static regeneration](https://kit.svelte.dev/docs/adapter-vercel#incremental-static-regeneration) (ISR) with SvelteKit apps deployed to Vercel. ISR provides the performance and cost advantages of prerendered content with the flexibility of dynamically rendered content.\n\nTo add ISR to a route, include the `isr` property in your `config` object:\n\n```ts\nexport const config = {\n\tisr: {\n\t\t// see Vercel adapter docs for the required options\n\t}\n};\n```\n\n## And much more...\n\n- The [OPTIONS method](https://kit.svelte.dev/docs/routing#server) is now supported in `+server.js` files\n- Better error messages when you [export something that belongs in a different file](https://github.com/sveltejs/kit/pull/9055) or [forget to put a slot](https://github.com/sveltejs/kit/pull/8475) in your +layout.svelte.\n- You can now [access public environment variables in app.html](https://kit.svelte.dev/docs/project-structure#project-files-src)\n- A new [text hel",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-21-streaming-snapshots-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8fbdf26b-5a73-4b40-9e85-8451a7712dfe-1",
    "text": "---\ntitle: \"What's new in Svelte: April 2022\"\ndescription: 'Goodbye fallthrough routes, hello param validators!'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nThis month, we felt a shift in the way SvelteKit handles page properties. The last holdout of the use-cases that required fallthrough routes, validating parameter properties, has been replaced by a more specific solution.\n\nMore on that, and what else is new in Svelte, as we dive in...\n\n## What's new in SvelteKit\n\n- Param matchers allow you to check if a url parameter matches before rendering a page - replacing the need for fallthrough routes for this purpose ([Docs](https://kit.svelte.dev/docs/routing#advanced-routing-matching), [#4334](https://github.com/sveltejs/kit/pull/4334))\n- Explicit redirects can now be handled directly from endpoints ([#4260](https://github.com/sveltejs/kit/pull/4260))\n- `svelte-kit sync` ([#4182](https://github.com/sveltejs/kit/pull/4182)), TypeScript 4.6 ([#4190](https://github.com/sveltejs/kit/pull/4190)) and Vite 2.9 were released - adding non-blocking dependency optimization and experimental CSS source maps in dev mode as well as a number of bug fixes contributed by the SvelteKit team ([#4468](https://github.com/sveltejs/kit/pull/4468))\n\n**New Config Options**\n\n- `outDir` fixes path issues in monorepos and other situations where the desired output directory is outside the project directory ([Docs](https://kit.svelte.dev/docs/configuration#outdir), [#4176](https://github.com/sveltejs/kit/pull/4176))\n- `endpointExtensions` prevents files other than .js and .ts files from being treated as endpoints, unless you specify endpointExtensions ([Docs](https://kit.svelte.dev/docs/configuration#endpointextensions), [#4197](https://github.com/sveltejs/kit/pull/4197))\n- `prerender.default` lets you prerender every page without having to write `export const prerender = true` in every page file ([Docs](https://kit.svelte.dev/docs/configuration#prerender), [#4192](https://github.com/sveltejs/kit/pull/4192))\n\n**Breaking Changes**\n\n- Fallthrough routes have been removed. For migration tips, check out the PR ([#4330](https://github.com/sveltejs/kit/pull/4330))\n- `tabindex=\"-1\"` is only added to `<body>` during navigation ([#4140](https://github.com/sveltejs/kit/pull/4140) and [#4184](https://github.com/sveltejs/kit/pull/4184))\n- Adapters are now required to supply a `getClientAddress` function ([#4289](https://github.com/sveltejs/kit/pull/4289))\n- `InputProps` and `OutputProps` can now be typed separately in generated `Load` ([#4305](https://github.com/sveltejs/kit/pull/4305))\n- The `\\$` character is no longer allowed in dynamic parameters ([#4334](https://github.com/sveltejs/kit/pull/4334))\n- `svelte-kit package` has been marked as experimental so changes to it after Kit 1.0 will not be considered breaking ([#4164](https://github.com/sveltejs/kit/pull/4164))\n\n## New across the Svelte ecosystem\n\n- Svelte: Lots of new types for TypeScript and Svelte plugin users - ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-04-01-whats-new-in-svelte-april-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8fbdf26b-5a73-4b40-9e85-8451a7712dfe-2",
    "text": " Kit 1.0 will not be considered breaking ([#4164](https://github.com/sveltejs/kit/pull/4164))\n\n## New across the Svelte ecosystem\n\n- Svelte: Lots of new types for TypeScript and Svelte plugin users - including `style:` directives and Svelte Actions (**3.46.4** and **3.46.5**)\n- Language Tools: Svelte project files are now importable/findable through references without having them imported in a TS file ([105.13.0](https://github.com/sveltejs/language-tools/releases/tag/extensions-105.13.0))\n- Language Tools: Region folding is now supported in html with `<!--#region-->`/`<!--#endregion-->` ([105.13.0](https://github.com/sveltejs/language-tools/releases/tag/extensions-105.13.0))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Launcher](https://launcher.team/) is an open-source app launcher powered by SvelteKit, Prisma, and Tailwind\n- [Paaster](https://paaster.io/) is a secure by default end to end encrypted pastebin built with Svelte, Vite, TypeScript, Python, Starlette, rclone & Docker.\n- [Simple AF Video Converter](https://github.com/berlyozzy/Simple-AF-Video-Converter) is an Electron wrapper around ffmpeg.wasm to make converting videos between formats easier\n- [Streamchaser](https://github.com/streamchaser/streamchaser) seeks to simplify movie, series and documentary search through a centralized entertainment technology platform\n- [Svelte Color Picker](https://github.com/V-Py/svelte-material-color-picker) is a simple color picker made with Svelte\n- [ConcertMash](https://github.com/mcmxcdev/ConcertMash) is a small website that interacts with the Spotify API and generates new playlists based on the upcoming concerts you're attending\n- [Modulus](https://modulus.vision/) is a Design+Code Think Tank conceived with the main mission to evolve design and technology\n- [Multiply](https://www.multiply.us/) is an integrated PR and Social agency moving at the speed of culture\n- [yia!](https://www.yia.co.nz/) is a Young Innovator Award competition in New Zealand\n- [Write to Russia](https://www.writetorussia.org/index) is a community email writing platform to communicate with public `.ru` email addresses\n- [Markdown Playground](https://github.com/Petros-K/markdown-playground) is an online playground dedicated for your markdown experiments.\n- [RatherMisty](https://rathermisty.com/) is a no frills weather app with weather data from Open-Meteo\n- [Minecraft Profile Pic (MCPFP)](https://github.com/MauritsWilke/mcpfp) is a site to generate Minecraft profile pictures with ease\n- [WebGL Fluid Simulation](https://github.com/jpaquim/svelte-webgl-fluid-simulation) is a configurable fluid simulation built with Svelte and WebGL\n- [This @NobelPeaceOslo exhibition](https://twitter.com/perbyhring/status/1504754949791621120) was built using printed graphics, projected motion graphics, particle animations and generative sound design\n\nItching to contribute to a modern SvelteKit website? [Help build the Svelte Society site](https://github.com/svelte-society/sve",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-04-01-whats-new-in-svelte-april-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8fbdf26b-5a73-4b40-9e85-8451a7712dfe-3",
    "text": "jected motion graphics, particle animations and generative sound design\n\nItching to contribute to a modern SvelteKit website? [Help build the Svelte Society site](https://github.com/svelte-society/sveltesociety.dev/issues)!\n\n**Learning Resources**\n\n_To Attend_\n\n- [Svelte Summit: Spring](https://www.sveltesummit.com/) will take place on April 30, 2022! Join us for the 5th virtual Svelte conference on [YouTube](https://www.sveltesummit.com/) and Discord \ud83c\udf7e\n\n_To Read_\n\n- [Svelte(Kit) TypeScript Showcase + general TypeScript tips](https://github.com/ivanhofer/sveltekit-typescript-showcase) by Hofer Ivan\n- [Local constants in Svelte with the @const tag](https://geoffrich.net/posts/local-constants/) by Geoff Rich\n- [Design Patterns for Building Reusable Svelte Components](https://render.com/blog/svelte-design-patterns) by Eric Liu\n- [Svelte is better than React](https://labs.hamy.xyz/posts/svelte-is-better-than-react/) by Hamilton Greene\n- [Making Visualizations Literally with Svelte and D3](https://www.connorrothschild.com/post/svelte-and-d3) by Connor Rothschild\n- [Coordinating Multiple Elements with Svelte Deferred Transitions](https://imfeld.dev/writing/svelte_deferred_transitions) by Daniel Imfeld\n- [Animate on scroll with Svelte Inview - Little Bits](https://dev.to/maciekgrzybek/animate-on-scroll-with-svelte-inview-266f) by Maciek Grzybek\n- [Lazy-Loading Firebase with SvelteKit](https://www.captaincodeman.com/lazy-loading-firebase-with-sveltekit) and [HeadlessUI Components with Svelte](https://www.captaincodeman.com/headlessui-components-with-svelte) by Captain Codeman\n- [SvelteKit Accessibility Testing: Automated CI A11y Tests](https://rodneylab.com/sveltekit-accessibility-testing/) by Rodney Lab\n- [Getting Started with KitQL and GraphCMS](https://scottspence.com/posts/getting-started-with-kitql-and-graphcms) by Scott Spence\n- [React \u21c6 Svelte Cheatsheet](https://dev.to/joshnuss/react-to-svelte-cheatsheet-1a2a) lists the similarities and differences between the two libraries - by Joshua Nussbaum\n\n_To Watch_\n\n- [Svelte Extravaganza | Async](https://www.youtube.com/watch?v=mT4CLVHgtSg) by pngwn\n- [6 Svelte Packages You Should Know](https://www.youtube.com/watch?v=y5SrUKcX_Co) and [Basic React To Svelte Conversion](https://www.youtube.com/watch?v=DiSuwLlhOxs) by LevelUpTuts\n- [Page/Shadow Endpoint in SvelteKit](https://www.youtube.com/watch?v=j-9D5UDyVOM) by WebJeda\n- [Custom Svelte Store: Higher Order Store](https://www.youtube.com/watch?v=p1aPfVyZ1IY) by lihautan\n- [SvelteKit For Beginners (Playlist)](https://www.youtube.com/watch?v=bLBHecY4-ak&list=PLA9WiRZ-IS_zXZZyW4qfj0akvOAtk6MFS) by Joy of Code - follow along with the [blog guide](https://joyofcode.xyz/sveltekit-for-beginners)\n- [Fullstack SvelteKit Auth \ud83d\udd10 with Firebase & Magic Links! \ud83e\ude84](https://www.youtube.com/watch?v=MAHE4iQgh5Q) by Johnny Magrippis\n- [Firebase Authentication in SvelteKit! Full Stack App](https://www.youtube.com/watch?v=N6Y3hqhZvNI) by Ryan Boddy\n\n**Libraries, Tools & Compon",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-04-01-whats-new-in-svelte-april-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fc17d89c-7ce8-45c6-9a98-5aefe166558b-1",
    "text": "---\ntitle: \"What's new in Svelte: August 2022\"\ndescription: \"Changes to SvelteKit's `load` before 1.0 plus support for Vite 3 and `vite.config.js`!\"\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nThere's a lot to cover this month... big changes are coming to SvelteKit's design before 1.0 can be completed. If you haven't already, check out Rich's Discussion, [Fixing `load`, and tightening up SvelteKit's design before 1.0 #5748](https://github.com/sveltejs/kit/discussions/5748).\n\nAlso, [@dummdidumm](https://github.com/dummdidumm) (Simon H) [has joined Vercel to work on Svelte full-time](https://twitter.com/dummdidumm_/status/1549041206348222464) and [@tcc-sejohnson](https://github.com/tcc-sejohnson) has joined the group of SvelteKit maintainers! We're super excited to have additional maintainers now dedicated to working on Svelte and SvelteKit and have already been noticing their impact. July was the third largest month for SvelteKit changes since its inception!\n\nNow onto the rest of the updates...\n\n## What's new in SvelteKit\n\n- Dynamically imported styles are now included during SSR ([#5138](https://github.com/sveltejs/kit/pull/5138))\n- Improvements to routes and prop updates to prevent unnecessary rerendering ([#5654](https://github.com/sveltejs/kit/pull/5654), [#5671](https://github.com/sveltejs/kit/pull/5671))\n- Lots of improvements to error handling ([#4665](https://github.com/sveltejs/kit/pull/4665), [#5622](https://github.com/sveltejs/kit/pull/5622), [#5619](https://github.com/sveltejs/kit/pull/5619), [#5616](https://github.com/sveltejs/kit/pull/5616))\n- Custom Vite modes are now respected in SSR builds ([#5602](https://github.com/sveltejs/kit/pull/5602))\n- Custom Vite config locations are now supported ([#5705](https://github.com/sveltejs/kit/pull/5705))\n- Private environment variables (aka \"secrets\") are now much more secure. Now if you accidentally import them to client-side code, you'll see an error ([#5663](https://github.com/sveltejs/kit/pull/5663), [Docs](https://kit.svelte.dev/docs/configuration#env))\n- Vercel's v3 build output API is now being used in `adapter-vercel` ([#5514](https://github.com/sveltejs/kit/pull/5514))\n- `vite-plugin-svelte` has reached 1.0 and now supports Vite 3. You'll notice new default ports for `dev` (port 5173) and `preview` (port 4173) ([#5005](https://github.com/sveltejs/kit/pull/5005), [vite-plugin-svelte CHANGELOG](https://github.com/sveltejs/vite-plugin-svelte/blob/main/packages/vite-plugin-svelte/CHANGELOG.md))\n\n**Breaking changes:**\n\n- `mode`, `prod` and `server` are no longer available in `$app/env` ([#5602](https://github.com/sveltejs/kit/pull/5602))\n- `svelte-kit` CLI commands are now run using the `vite` command and `vite.config.js` is required. This will allow first-class support with other projects in the Vite ecosystem like Vitest and Storybook ([#5332](https://github.com/sveltejs/kit/pull/5332), [Docs](https://kit.svelte.dev/docs/project-structure#project-files-vite-config-js))\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-08-01-whats-new-in-svelte-august-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fc17d89c-7ce8-45c6-9a98-5aefe166558b-2",
    "text": "other projects in the Vite ecosystem like Vitest and Storybook ([#5332](https://github.com/sveltejs/kit/pull/5332), [Docs](https://kit.svelte.dev/docs/project-structure#project-files-vite-config-js))\n- `endpointExtensions` is now `moduleExtensions` and can be used to filter param matchers ([#5085](https://github.com/sveltejs/kit/pull/5085), [Docs](https://kit.svelte.dev/docs/configuration#moduleextensions))\n- Node 16.9 is now the minimum version for SvelteKit ([#5395](https://github.com/sveltejs/kit/pull/5395))\n- %-encoded filenames are now allowed. If you had a `%` in your route, you must now encode it with `%25` ([#5056](https://github.com/sveltejs/kit/pull/5056))\n- Endpoint method names are now uppercased to match HTTP specifications ([#5513](https://github.com/sveltejs/kit/pull/5513), [Docs](https://kit.svelte.dev/docs/routing#endpoints))\n- `writeStatic` has been removed to align with Vite's config ([#5618](https://github.com/sveltejs/kit/pull/5618))\n- `transformPage` is now `transformPageChunk` ([#5657](https://github.com/sveltejs/kit/pull/5657), [Docs](https://kit.svelte.dev/docs/hooks#handle))\n- The `prepare` script is no longer needed in `package.json` ([#5760](https://github.com/sveltejs/kit/pull/5760))\n- `adapter-node` no longer does any compression while we wait for a [bug fix in the `compression` library](https://github.com/expressjs/compression/pull/183) ([#5560](https://github.com/sveltejs/kit/pull/5506))\n\nFor a full list of changes, check out kit's [CHANGELOG](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md).\n\n## What's new in Svelte & Language Tools\n\n- The `@layer` [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@layer) is now supported in Svelte components (**3.49.0**, [PR](https://github.com/sveltejs/svelte/issues/7504))\n- The `inert` [HTML attribute](https://html.spec.whatwg.org/multipage/interaction.html#the-inert-attribute) is now supported in Svelte's language tools and plugins (**105.20.0**, [PR](https://github.com/sveltejs/language-tools/pull/1565))\n- The Svelte plugin will now use `SvelteComponentTyped` typings, if available (**105.19.0**, [PR](https://github.com/sveltejs/language-tools/pull/1548))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [PocketBase](https://github.com/pocketbase/pocketbase) is an open source Go backend with a single file and an admin dashboard built with Svelte\n- [Hondo](https://www.playhondo.com/how-to-play) is a word guessing game with multiple rounds\n- [Hexapipes](https://github.com/gereleth/hexapipes) is a site for playing hexagonal pipes puzzle\n- [Mail Must Move](https://www.mordon.app/) is an email made for those who want to get more done\n- [Jot Down](https://github.com/brysonbw/vscode-jot-down) is a Visual Studio Code extension for quick and simple note taking\n- [Kadium](https://kadium.kasper.space/) is an app for staying on top of YouTube channels' uploads\n- [Samen zjin we #1metS10](https://1mets10.avrotros.nl/) is a campaign website",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-08-01-whats-new-in-svelte-august-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fc17d89c-7ce8-45c6-9a98-5aefe166558b-3",
    "text": "and simple note taking\n- [Kadium](https://kadium.kasper.space/) is an app for staying on top of YouTube channels' uploads\n- [Samen zjin we #1metS10](https://1mets10.avrotros.nl/) is a campaign website to support S10, the dutch Eurovision finalist, by sending a drawing or a wish\n- [On Writing Code](https://onwritingcode.com/) is an interactive website to learn programming design patterns\n- [Svelte-In-Motion](https://github.com/novacbn/svelte-in-motion) lets you create Svelte-animated videos in your browser\n- [Svelte Terminal](https://github.com/Nico-Mayer/svelte-terminal) is a terminal-like website\n- [Bulletlist](https://bulletlist.com/) is a simple tool with a single purpose: making lists\n- [Remind Me Again](https://github.com/probablykasper/remind-me-again) is an app for toggleable reminders on Mac, Linux and Windows\n- [Heyweek](https://heyweek.com/) is a timetracking app built for freelancers craving that extra pizzazz\n\n**Learning Resources**\n\n_Starring the Svelte team_\n\n- [The Svelte Documentary is out!](https://www.svelteradio.com/episodes/the-svelte-documentary-is-out) on Svelte Radio\n- [Beginner SvelteKit](https://vercel.com/docs/beginner-sveltekit) by Vercel\n- [Challenge: Explore Svelte by Building a Bubble Popping Game](https://prismic.io/blog/try-svelte-build-game) by Brittney Postma\n- [Let's write a Client-side Routing Library with Svelte](https://www.youtube.com/watch?v=3foVDSknGEY) by lihautan\n- [Svelte Sirens July Talk - Testing in Svelte with Jess Sachs](https://sveltesirens.dev/event/testing-in-svelte)\n\n_To Watch_\n\n- [10 Awesome Svelte UI Component Libraries](https://www.youtube.com/watch?v=RkD88ARvucM) by LevelUpTuts\n- [Learn How SvelteKit Works](https://www.youtube.com/watch?v=VizuTy3uSNE) and [SvelteKit Endpoints](https://www.youtube.com/watch?v=XnVxDLTgCgo) by Joy of Code\n- [SvelteKit using TS, and Storybook setup](https://www.youtube.com/watch?v=L4F5dSu0FcQ) by Jarrod Kane\n- [Building Apps with Svelte!](https://www.youtube.com/watch?v=prsXVk1fdW4) by Simon Grimm\n- [SvelteKit authentication, the better way - Tutorial](https://www.youtube.com/watch?v=Y98KipzwVdM) by Pilcrow\n\n_To Read_\n\n- [Some assorted Svelte demos](https://geoffrich.net/posts/assorted-svelte-demos/) by Geoff Rich\n- [Three ways to bootstrap a Svelte project](https://maier.tech/posts/three-ways-to-bootstrap-a-svelte-project) by Thilo Maier\n- [Design & build an app with Svelte](https://bootcamp.uxdesign.cc/design-build-an-app-with-svelte-ecd7ed0729da) by Hugo\n- [Define routes via JS in SvelteKit](https://dev.to/maxcore/define-routes-via-js-in-sveltekit-27e9) by Max Core\n- [Integrating Telegram api with SvelteKit](https://dev.to/theether0/integrating-telegram-api-with-sveltekit-5gb) by Shivam Meena\n- [SvelteKit SSG: how to Prerender your SvelteKit Site](https://rodneylab.com/sveltekit-ssg/) by Rodney Lab\n- [ADEO Design System: Building a Web Component library with Svelte and Rollup](https://medium.com/adeo-tech/adeo-design-system-building-a-web-component-library-wi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-08-01-whats-new-in-svelte-august-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fc17d89c-7ce8-45c6-9a98-5aefe166558b-4",
    "text": "ab.com/sveltekit-ssg/) by Rodney Lab\n- [ADEO Design System: Building a Web Component library with Svelte and Rollup](https://medium.com/adeo-tech/adeo-design-system-building-a-web-component-library-with-svelte-and-rollup-72d65de50163) by Mohamed Mokhtari\n- [The Svelte Handbook](https://thevalleyofcode.com/svelte/) by The Valley of Code\n- [Test Svelte Component Using Vitest & Playwright](https://davipon.hashnode.dev/test-svelte-component-using-vitest-playwright) by David Peng\n- [Transitional Apps with Phoenix and Svelte](https://nathancahill.com/phoenix-svelte) by Nathan Cahill\n\n_Tech Demos_\n\n- [Bringing the best GraphQL experience to Svelte](https://www.the-guild.dev/blog/houdini-and-kitql) by The Guild\n- [Style your Svelte website faster with Stylify CSS](https://stylifycss.com/blog/style-your-svelte-website-faster-with-stylify-css/) by Stylify\n- [Revamped Auth Helpers for Supabase (with SvelteKit support)](https://supabase.com/blog/2022/07/13/supabase-auth-helpers-with-sveltekit-support) by Supabase\n\n**Libraries, Tools & Components**\n\n- [Lucia](https://github.com/pilcrowOnPaper/lucia-sveltekit) is a simple, JWT based authentication library for SvelteKit that connects your SvelteKit app with your database\n- [Skeleton](https://github.com/Brain-Bones/skeleton) is a UI component library for use with Svelte + Tailwind\n- [pass-composer](https://pass-composer.vercel.app/) helps you compose your postprocessing passes for threlte scenes\n- [@crikey/stores-\\*](https://whenderson.github.io/stores-mono/) is a collection of libraries to extend Svelte stores for common use-cases\n- [Svelte Chrome Storage](https://github.com/shaun-wild/svelte-chrome-storage) is a lightweight abstraction between Svelte stores and Chrome extension storage\n- [Svelte Schema Form](https://github.com/restspace/svelte-schema-form) is a form generator for JSON schema\n- [svelte-gesture](https://github.com/wobsoriano/svelte-gesture) is a library that lets you bind richer mouse and touch events to any component or view\n- [Snap Layout](https://github.com/ThaUnknown/snap-layout) and [universal-title-bar](https://github.com/ThaUnknown/universal-title-bar) bring Windows 11 snap layout and title features to webapps and PWAs. Both can be imported as a `.svelte` module or as a web component\n- [svelte-adapter-bun](https://github.com/gornostay25/svelte-adapter-bun) is an adapter for SvelteKit apps that generates a standalone Bun server\n- [json2dir](https://www.npmjs.com/package/json2dir) converts JSON objects into directory trees\n- [Svelte Command Palette](https://github.com/rohitpotato/svelte-command-palette) is a drop-in command palette component\n- [svelte-use-drop-outside](https://github.com/untemps/svelte-use-drop-outside) is a Svelte action to drop an element outside an area\n- [PowerTable](https://github.com/muonw/powertable) is a JavaScript component that turns JSON data into an interactive HTML table\n- [svelte-slides](https://github.com/rajasegar/svelte-slides) is a slide show template for ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-08-01-whats-new-in-svelte-august-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "4be85edf-0ef4-4637-99a4-a68e8e2f8397-1",
    "text": "---\ntitle: \"What's new in Svelte: December 2020\"\ndescription: Better tooling, export maps and improvements to slots and context\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nIt's the last \"What's new in Svelte\" of the year and there's lots to celebrate! This month's coverage includes updates from `rollup-plugin-svelte`, `Sapper` and `SvelteKit` and a bunch of showcases from the Svelte community!\n\n## New features & impactful bug fixes\n\n1. `$$props`, `$$restProps`, and `$$slots` are all now supported in custom web components (**3.29.5**, [Example](https://svelte.dev/repl/ad8e6f39cd20403dacd1be84d71e498d?version=3.29.5)) and `slot` components now support spread props: `<slot {...foo} />` (**3.30.0**)\n2. A new `hasContext` lifecycle function makes it easy to check whether a `key` has been set in the context of a parent component (**3.30.0** & **3.30.1**, [Docs](https://svelte.dev/docs#run-time-svelte-hascontext))\n3. There is now a new `SvelteComponentTyped` class which makes it easier to add strongly typed components that extend base Svelte components. Component library and framework authors rejoice! An example: `export class YourComponent extends SvelteComponentTyped<{aProp: boolean}, {click: MouseEvent}, {default: {aSlot: string}}> {}` (**3.31.0**, [RFC](https://github.com/sveltejs/rfcs/pull/37))\n4. Transitions within `{:else}` blocks should now complete successfully (**3.29.5**, [Example](https://svelte.dev/repl/49cef205e5da459594ef2eafcbd41593?version=3.29.5))\n5. Svelte now includes an export map, which explicitly states which files can be imported from its npm package (**3.29.5** with some fixes in **3.29.6**, **3.29.7** and **3.30.0**)\n6. `rollup-plugin-svelte` had a new [7.0.0 release](https://github.com/sveltejs/rollup-plugin-svelte/blob/master/CHANGELOG.md). The biggest change is that the `css` option was removed. Users who were using that option should add another plugin like `rollup-plugin-css-only` as demonstrated [in the template](https://github.com/sveltejs/template/blob/5b1135c286f7a649daa99825a077586655051649/rollup.config.js#L48)\n\n## What's going on in Sapper?\n\nLots of new TypeScript definition improvements to make editing Sapper apps even easier! CSS for dynamic imports also should now work in `client.js` files. (Unreleased)\n\n## What's the deal with SvelteKit?\n\nWe're glad you asked! If you didn't catch Rich's blog post from early last month, [you can find it here](https://svelte.dev/blog/whats-the-deal-with-sveltekit)!\n\nFor all the features and bugfixes see the CHANGELOGs for [Svelte](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md) and [Sapper](https://github.com/sveltejs/sapper/blob/master/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [narration.studio](https://narration.studio/) (Chrome Only) is an automatic in-browser audio recording & editing platform for voice over narration.\n- [Vippet](https://vippet.netlify.app/) is a video recording and editing tool for the browser.\n- [Pattern M",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-12-01-whats-new-in-svelte-december-2020.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "4be85edf-0ef4-4637-99a4-a68e8e2f8397-2",
    "text": "nly) is an automatic in-browser audio recording & editing platform for voice over narration.\n- [Vippet](https://vippet.netlify.app/) is a video recording and editing tool for the browser.\n- [Pattern Monster](https://pattern.monster/) is a simple online pattern generator to create repeatable SVG patterns.\n- [Plant-based diets](https://planetbaseddiets.panda.org/) is a website from the World Wildlife Foundation (WWF) built with Svelte.\n- [johnells.se](https://www.johnells.se/) is a Swedish fashion e-commerce site, built with [Crown](https://crownframework.com/) - a Svelte-powered framework.\n- [sentence-length](https://sentence-length.netlify.app/) is a learning and analysis tool to show how some authors play with different lengths, while others stick with one.\n- [svelte-presenter](https://github.com/stephane-vanraes/svelte-presenter) lets you quickly make good looking presentations using Svelte and mdsvex.\n\n**Demos**\n\n- [u/loopcake got SSR working in Java Spring Boot](https://www.reddit.com/r/sveltejs/comments/jkh5up/svelte_ssr_but_its_java_spring_boot_and_its_native/) for all the Java shops out there looking to render Svelte server-side.\n- [svelte-liquid-swipe](https://github.com/tncrazvan/svelte-liquid-swipe) shows off a fancy interaction pattern using svg paths.\n- [Crossfade Link Animation](https://svelte.dev/repl/7f68e148caf04b2787bb6f296208f870?version=3.29.7) demonstrates how to animate between navigation links using a crossfade (made by Blu, from the Discord community)\n- [Clip-Path Transitions](https://svelte.dev/repl/b5ad281ae8024b629b545c70c9e8764d?version=3.29.7) showcases how to use clip paths and custom transitions to create magical in-and-out transitions (made by Faber, from the Discord community)\n\n**Learning Resources**\n\n- [lihautan](https://www.youtube.com/channel/UCbmC3HP3FaAFdcZkui8YoMQ/featured) has been making easy-to-follow videos to share his in-depth knowledge of Svelte.\n- [Lessons From Building a Static Site Generator](https://nicholasreese.com/lessons-from-building-a-static-site-generator/) shares the backstory and thinking behind Elder.js - and the design decision made along the way.\n- [Svelte Tutorial and Projects Course ](https://www.udemy.com/course/svelte-tutorial-and-projects-course/) is a udemy course by John Smilga where students learn Svelte.js by building interesting projects.\n- [Building Pastebin on IPFS - with FastAPI, Svelte, and IPFS](https://amalshaji.wtf/building-pastebin-on-ipfs-with-fastapi-svelte-and-ipfs) explains how to make a distributed pastebin-like application.\n\n**Components, Libraries & Tools**\n\n- [svelte-crossword](https://russellgoldenberg.github.io/svelte-crossword/) is a customizable crossword puzzle component for Svelte.\n- [svelte-cloudinary](https://github.com/cupcakearmy/svelte-cloudinary) makes it easy to integrate Cloudinary with Svelte (including TypeScript and SSR support)\n- [Svelte Nova](https://extensions.panic.com/extensions/sb.lao/sb.lao.svelte-nova/) extends the new Nova editor to su",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-12-01-whats-new-in-svelte-december-2020.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2dd33a22-be86-432b-b372-95b40be88fb6-1",
    "text": "---\ntitle: \"What's new in Svelte: May 2021\"\ndescription: Working toward SvelteKit 1.0 and a showcase full of SvelteKit sites!\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nLast week, Svelte Summit blew us away with a mountain of content! [Check out the full recording](https://www.youtube.com/watch?v=fnr9XWvjJHw) or an audio-only (p)review [on Svelte Radio](https://www.svelteradio.com/episodes/svelte-summit-party-episode). Now let's get into this month's news...\n\n## New features in the Svelte Compiler\n\n- `:global()` is now supported as part of compound CSS selectors (**3.38.0**, [Example](https://svelte.dev/repl/54148fd2af484f2c84977c94e523c7c5?version=3.38.0))\n- CSS custom properties can now be passed to components for use cases such as theming (**3.38.0**, [Docs coming soon](https://github.com/sveltejs/svelte/issues/6268))\n\n## New in SvelteKit\n\n- [kit.svelte.dev](https://kit.svelte.dev/) has a fresh new look and the [SvelteKit Demo Site](https://netlify.demo.svelte.dev/) got a fresh set of paint. Check it out by running `npm init svelte@next`\n- You can now use `@sveltejs/adapter-static` to create a single-page app or SPA by specifying a fallback page ([PR](https://github.com/sveltejs/kit/pull/1181), [Docs](https://github.com/sveltejs/kit/tree/master/packages/adapter-static))\n- Disable Server-side Rendering (SSR) app-wide or on a page-by-page basis ([PR](https://github.com/sveltejs/kit/pull/713))\n- Error messages thrown during pre-rendering are now much more informative and readable ([PR](https://github.com/sveltejs/kit/pull/1062), [Docs](https://kit.svelte.dev/docs/layouts#error-pages))\n- Layouts can now be reset to prevent pages from inheriting the root layout. This is useful if you have a specific layout for a page or i18n variation ([PR](https://github.com/sveltejs/kit/pull/1061), [Docs](https://kit.svelte.dev/docs/layouts#resets))\n- `fetch` in SvelteKit code will now use the environment-provided implementation, whenever possible. If `fetch` is unavailable, it will be polyfilled by adapters ([PR](https://github.com/sveltejs/kit/pull/1066), [Docs](https://kit.svelte.dev/docs/loading#input-fetch))\n\n## New in Svelte & Language Tools\n\n- `svelte-preprocess` now supports the \"extends\" field of the tsconfig.json (4.7.2)\n- HTML `style` attributes now have hover & auto-complete. Foreign namespaces and ESM configs are now supported in the Svelte language server & extensions\n- The Svelte language tools can now infer slot/event types from their props if a generic relationship between them was defined\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [gitpod.io](https://github.com/gitpod-io/website) recently rewrote its site with SvelteKit\n- [highlight eel](https://highlighteel.com/) is a web-based editor to mark your favorite parts of any YouTube video to clip and share with anyone\n- [The Far Star Mission](https://thefarstar.apotheus.net/) is an interactive audiobook companion to the album, The Far Star by Apotheus\n- [JavaScript quiz](http",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-05-01-whats-new-in-svelte-may-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2dd33a22-be86-432b-b372-95b40be88fb6-2",
    "text": "ube video to clip and share with anyone\n- [The Far Star Mission](https://thefarstar.apotheus.net/) is an interactive audiobook companion to the album, The Far Star by Apotheus\n- [JavaScript quiz](https://github.com/nclskfm/javascript-quiz) is a small quiz application that saves your answers locally\n- [ExtensionPay](https://extensionpay.com/) lets developers accept secure payments in browser extensions with no backend server code.\n- [mk48.io](https://mk48.io/) is a naval warship game made with SvelteKit\n- [Frog Safety](https://frog-safety.vercel.app/) is a guide for African Dwarf Frogs and the API freshwater master kit\n- [Stardew Valley Character Preview](https://github.com/overscore-media/stardew-valley-character-preview) loads your character's attributes from your Stardew Valley savefile and lets you play around with different outfits, colours, and accessories.\n\n**Demos, Libraries, Tools & Components**\n\n- [svelte-parallax](https://github.com/kindoflew/svelte-parallax) is a spring-based parallax component for Svelte\n- [@svelte-plugins/viewable](https://github.com/svelte-plugins/viewable) is a simple rule-based approach to tracking element viewability.\n- [Sveltekit-JUI](https://github.com/Wolfr/sveltekit-jui) is a kit of UI components to be used in conjunction with Svelte and Svelte Kit.\n- [EZGesture](https://github.com/mhmd-22/ezgesture#integrating-with-other-frameworks) makes it easy to add gestures functionality with simple native DOM events\n\n**Want to contribute your own component?** Submit a [Component](https://sveltesociety.dev/components) to the Svelte Society site by making [a PR to this file](https://github.com/svelte-society/sveltesociety.dev/blob/master/src/pages/components/components.json).\n\n**Starters**\n\n- [How to use Vercel Analytics with SvelteKit](https://ivoberger.com/posts/using-vercel-analytics-with-svelte-kit) teaches how to track Web Vitals across your users' devices\n- [Asp.NETCore + Svelte + Vite](https://github.com/Kiho/aspcore-spa-cli/tree/master/samples/SviteSample) connects the three frameworks with SpaCliMiddleware (VS2019)\n- [Add CoffeeScript to Svelte](https://github.com/Leftium/coffeescript-adder) is an experimental command to run to add CoffeeScript to your SvelteKit project or Vite-powered Svelte app\n- [Adds Supabase to Svelte](https://github.com/joshnuss/svelte-supabase) is an experimental command to run to add Supabase to your SvelteKit project\n- [svelte-babylon](https://github.com/SectorXUSA/svelte-babylon) lets you use BabylonJS like A-Frame through reactive Svelte Components\n\n**Looking for a starter or integration?** Check out [svelte-adders](https://github.com/svelte-add/svelte-adders) and a number of other template examples at the community site [sveltesociety.dev](https://sveltesociety.dev/templates)\n\n**Learning Resources**\n\n- [Amazing macOS Dock animation in Svelte](https://dev.to/puruvj/amazing-macos-dock-animation-in-svelte-5hfb) demonstrates how nice Svelte and popmotion look together\n- [Solving the Towe",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-05-01-whats-new-in-svelte-may-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "032135ce-2f77-462e-b24e-88c8fca2501a-1",
    "text": "---\ntitle: Announcing SvelteKit 1.0\ndescription: Web development, streamlined\nauthor: The Svelte team\nauthorURL: https://svelte.dev/\n---\n\nAfter two years in development, [SvelteKit](https://kit.svelte.dev) has finally reached 1.0. As of today, it\u2019s the recommended way to build Svelte apps of all shapes and sizes.\n\nWe\u2019re so excited to share this release with you. It\u2019s the culmination of thousands of hours of work, both from the Svelte core team and the wider community, and we think it\u2019s the most enjoyable way to build production-grade websites, whether you\u2019re a solo developer working on a small project or part of a large team.\n\nTo get started, run `npm create svelte@latest`, and visit the [docs](https://kit.svelte.dev/docs) and (experimental!) [interactive tutorial](https://learn.svelte.dev).\n\n<div class=\"max\">\n<figure style=\"max-width: 960px; margin: 0 auto\">\n<div style=\"height: 0; padding: 0 0 57.1% 0; position: relative; margin: 0 auto;\">\n\t<iframe style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0; margin: 0;\" src=\"https://www.youtube-nocookie.com/embed/N4BRVkQVoMc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<figcaption>Svelte Radio Live: the Christmas special</figcaption>\n</figure>\n</div>\n\n## What is SvelteKit?\n\nSvelteKit is a framework for building web applications on top of [Svelte](https://svelte.dev), a UI component framework [that](https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-web-frameworks) [developers](https://2021.stateofjs.com/en-US/libraries/front-end-frameworks/) [love](https://twitter.com/Rich_Harris/status/1589675637195042817) for its performance and ease of use.\n\nIf you\u2019ve used component frameworks like Svelte, you\u2019ll know that they make it much easier to build user interfaces than working with the DOM directly. But they leave a lot of questions unanswered:\n\n- How do I structure my source code?\n- How do I add server-side rendering?\n- How do I add routing that works on the server and in the browser?\n- How do I make client-side routing accessible?\n- How do I fetch data?\n- How do I mutate data?\n- How do I handle errors?\n- How do I optimise my production build?\n- How do I handle environment variables sensibly and securely?\n- How do I add CSP headers and CSRF protection?\n- How do I add a service worker that knows what to cache?\n- How do I prepare my application for deployment?\n\nAn application framework is designed to answer these questions. SvelteKit does so with a design informed by the real world needs of an army of beta testers (many of whom have been running SvelteKit in production for some time \u2014 we salute your courage and thank you for the invaluable feedback) and the best ideas from other application frameworks including [Next.js](https://nextjs.org/) and [Remix](https://remix.run/).\n\n## How is it different?\n\nWeb developers today are spoiled for choice. Aside from the aforementioned f",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-12-14-announcing-sveltekit-1.0.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "032135ce-2f77-462e-b24e-88c8fca2501a-2",
    "text": " application frameworks including [Next.js](https://nextjs.org/) and [Remix](https://remix.run/).\n\n## How is it different?\n\nWeb developers today are spoiled for choice. Aside from the aforementioned frameworks, there are options like [Astro](https://astro.build/), battle-tested server frameworks like [Rails](https://rubyonrails.org/) and [Laravel](https://laravel.com/), and a million static site generators. These are all wonderful tools, and you should feel good about choosing them.\n\nSvelteKit does things a little differently, however:\n\n**Unlike traditional \u2018multi-page app\u2019 or MPA frameworks,** it defaults to client-side navigation after the initial server-rendered page load. This enables faster page transitions, state that persists between pages (such as a sidebar\u2019s scroll position), and less data usage. It also avoids re-running third party scripts like analytics on every single page load.\n\n**Unlike traditional server frameworks,** it allows you to use one language, instead of effectively having two tightly-coupled apps (one to generate HTML, one to handle client-side interaction). Because SvelteKit runs wherever JavaScript runs, you can deploy your app as a traditional Node server, or using serverless functions \u2014 including at the edge.\n\n**Unlike static site generators,** you can build apps with personalised or dynamic data \u2014 without the performance-killing, layout-shifting effects of fetching it from the browser after the page loads.\n\nWith SvelteKit, you have flexibility. Many frameworks assume there\u2019s one correct way to build an app, but reality is more nuanced. It\u2019s not true, for example, that prerendering static pages is just a poor man\u2019s `cache-control` \u2014 it also lets you do build-time validation or render data from the filesystem that your edge functions can\u2019t access, and acts as a hedge against flaky databases. It\u2019s not true that everything needs server-side rendering \u2014 it\u2019s the right default if you want robust, performant apps with good SEO, but there are countless exceptions.\n\nIn a SvelteKit app, you can make these choices with as much granularity as you need \u2014 for example the page you\u2019re looking at is prerendered, but the [REPL](/repl) is rendered with dynamic data. Switching between the two is a single line of code. We call apps built with this approach \u2018[transitional apps](https://www.youtube.com/watch?v=860d8usGC0o)\u2019.\n\n## What can I use with SvelteKit?\n\nBecause SvelteKit uses [Vite](https://vitejs.dev/), the lightning-fast build tool, it has out-of-the-box support for hot module reloading, TypeScript, and many other things that developers rely on. You can install plugins from the vast Vite and Rollup ecosystems to add support for other tools.\n\nWhen creating a SvelteKit project you\u2019ll be asked if you want to add [TypeScript](https://www.typescriptlang.org/), [ESLint](https://eslint.org/), [Prettier](https://prettier.io/), [Playwright](https://playwright.dev/) (for end-to-end browser tests) and [Vitest](https://vitest.dev/) (for unit",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-12-14-announcing-sveltekit-1.0.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "032135ce-2f77-462e-b24e-88c8fca2501a-3",
    "text": ".typescriptlang.org/), [ESLint](https://eslint.org/), [Prettier](https://prettier.io/), [Playwright](https://playwright.dev/) (for end-to-end browser tests) and [Vitest](https://vitest.dev/) (for unit tests). Integration guides already exist for many popular projects \u2014 [Tailwind](https://tailwindcss.com/docs/guides/sveltekit) and [Supabase](https://supabase.com/docs/guides/getting-started/tutorials/with-sveltekit), for example. You can use [Storybook](https://github.com/storybookjs/storybook/blob/next/code/frameworks/sveltekit/README.md) and [Histoire](https://histoire.dev/guide/svelte3/getting-started.html) for your component stories. The community-maintained [svelte-add](https://github.com/svelte-add/svelte-add) lets you add a growing list of other integrations with a single command.\n\nAnd of course you have access to everything [npm](https://npmjs.com/) has to offer. (Note that some packages require Node.js, and so can only be used when deployed to Node-based platforms.)\n\n## Where can I deploy my apps?\n\nAnywhere! The SvelteKit CLI needs Node.js installed locally, but the framework itself has no dependencies on any platform. This means you can deploy it wherever JavaScript runs.\n\nThis is made possible by [adapters](https://kit.svelte.dev/docs/adapters). The default adapter, [adapter-auto](https://github.com/sveltejs/kit/tree/master/packages/adapter-auto), provides zero-config support for Vercel, Netlify, Cloudflare Pages and Azure Static Web Apps, with more platforms coming in the future. Community-provided adapters add support for Deno, Bun, Firebase, App Engine, AWS Lambda and many others.\n\nYou can also deploy your app as a Node.js server using [adapter-node](https://github.com/sveltejs/kit/tree/master/packages/adapter-node).\n\nIf your entire app is suitable for prerendering, or is a single-page app (SPA), you can use [adapter-static](https://github.com/sveltejs/kit/tree/master/packages/adapter-static) \u2014 which turns SvelteKit into a static site generator \u2014 with any web server including [GitHub Pages](https://pages.github.com/).\n\n## Acknowledgements\n\nThis release was made possible by the hard work of a great many people. First and foremost, we\u2019d like to thank the Svelte community, whose insightful feedback and myriad contributions large and small have shaped this project into something we\u2019re truly proud to share with the wider community of web developers.\n\nWe\u2019re also indebted to [Svelte Society](https://sveltesociety.dev/) and the community ambassadors, who, through initiatives like [Svelte Summit](https://www.sveltesummit.com/) and [Svelte Sirens](https://sveltesirens.dev/), have created a lively and welcoming space for Svelte developers, both online and IRL.\n\nThere are too many content creators to name without leaving people left out, but to everyone who has released courses and produced educational content around SvelteKit: thank you.\n\nBack in early 2021, when we adopted Vite, we were the first major application framework to do so. At the tim",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-12-14-announcing-sveltekit-1.0.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "6db07a56-f876-4a95-9e03-02692f1b68b1-1",
    "text": "---\ntitle: \"What's new in Svelte: November 2021\"\ndescription: Over 5000 stars to light up the showcase\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWith SvelteKit crossing the [80% complete mark](https://github.com/sveltejs/kit/milestone/2), over [5000 stars](https://github.com/sveltejs/kit) on GitHub, and now having more usage than Sapper, there's never been a better time to try it out! Many in the community have, making for quite a large showcase this month...\n\nAlso, don't miss out on [Svelte Summit](https://sveltesummit.com/) on November 20th - featuring speakers from around the world. Keep an eye out for a watch party in your area \ud83d\udc40\n\nNow onto what's new!\n\n## New in Svelte and SvelteKit\n\n- [svelte.dev](https://svelte.dev/) now runs on SvelteKit alongside [sveltesociety.dev](https://sveltesociety.dev). svelte.dev is a relatively complicated site with live code editing, authentication, and a markdown-based blog - making it a great way for us to really test out SvelteKit\n- A new compiler option, `enableSourcemap`, provides more control over the compiler output for JS and CSS sourcemaps (**3.44.0**). With this new feature, SvelteKit and the Vite Svelte plugin can now properly handle environment variables in `.svelte` templates (See [sveltejs/kit#720](https://github.com/sveltejs/kit/issues/720) and [sveltejs/vite-plugin-svelte#201](https://github.com/sveltejs/vite-plugin-svelte/pull/201))\n- The Svelte Language Tools now support reading the configuration of the VS Code CSS settings ([#1219](https://github.com/sveltejs/language-tools/issues/1219))\n- `vite-plugin-svelte` added a new `experimental.prebundleSvelteLibraries` option that makes it much faster to load Svelte libraries with many components like icon libraries and UI frameworks. The option can be set in the root of `svelte.config.js`. Please test it out and give us feedback!\n- SvelteKit will only route endpoints on the client, unless marked as `rel=\"external\"` - reducing the size of the client JS and making it easier to refactor the router in the future ([2656](https://github.com/sveltejs/kit/pull/2656))\n- SvelteKit no longer supports Node 12 ([2604](https://github.com/sveltejs/kit/pull/2604))\n- SvelteKit was upgraded from Vite 2.6.0 to Vite 2.6.12 fixing an issue where Vite would corrupt the Svelte runtime (https://github.com/vitejs/vite/issues/4306). It also included two fixes from the SvelteKit team to avoid or make diagnosing Vite issues in SvelteKit templates easier (https://github.com/vitejs/vite/pull/5192 and https://github.com/vitejs/vite/pull/5193). Vite 2.7 is currently available in beta with additional fixes for SSR\n\nTo see all updates to Svelte and SvelteKit, check out the [Svelte](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md) and [SvelteKit changelog](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md), respectively.\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [Tangent](http://tangentnotes.com/) is a clean and powerful notes",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-11-01-whats-new-in-svelte-november-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "6db07a56-f876-4a95-9e03-02692f1b68b1-2",
    "text": "https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md), respectively.\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [Tangent](http://tangentnotes.com/) is a clean and powerful notes app for Mac & Windows\n- [The Pudding](https://pudding.cool/) is a digital publication that explains ideas debated in culture with visual essays - rebuilt in SvelteKit\n- [Power Switcher](https://powerswitcher.axpo.com/) is an interactive overview of the development of the power supply in Switzerland, as energy sources migrate to cleaner sources\n- [Sublive](https://sub.live/) is a new way of making music by connecting musicians all over the world with a low-latency and high-quality audio network\n- [Vibify](https://www.vibify.me/) helps you find hidden playlists within your music using your Spotify listening history\n- [Browse Marvel Unlimited by Year](https://marvel.geoffrich.net/) is a SvelteKit site to see what issues are available on Marvel Unlimited for a given year\n- [Files](https://files.community/), a modern file explorer for Windows, has a new site rebuilt with SvelteKit\n- [lil-hash](https://github.com/jackbow/lil-hash) is a simple URL shortener that produces easily rememberable and speakable shortened URLs\n- [PWA Haven](https://github.com/ThaUnknown/pwa-haven) is a collection of small, fast, simple PWAs to replace native OS apps\n- [DottoBit](https://dottobit.com/) is a multi-color 16-bit drawing program with URL sharing built-in\n- [Former Fast Document for Print](https://github.com/zummon/former) is an invoice generator with beautiful designs, abilities for international languages and auto calculation\n- [Helvetikon](https://github.com/noahsalvi/helvetikon) is a community maintained dictionary for the Swiss German language\n- [Palitra App](https://palitra.app/) is a search-based color palette generator\n\n**Podcasts Featuring Svelte**\n\n- [Svelte Radio](https://www.svelteradio.com/episodes/svelte-summit-is-coming-up-and-svelte-is-growing) dives into the tech behind the recently released Svelte Summit website and a bunch of other fun stuff!\n- [PodRocket](https://podrocket.logrocket.com/rich-harris), LogRocket's podcast, talks Svelte with Rich Harris\n- [PodRocket also dove deep](https://podrocket.logrocket.com/elderjs) into Elder.js with Nick Reese\n- [Web Rush](https://webrush.io/episodes/episode-153-single-page-application-vs-multi-page-application-with-rich-harris) and Rich Harris talk about the differences between a SPA and MPA, what role the server rendering plays, what client side hydration is, and the state of modern tooling for developing an SPA or MPA\n- [devtools.fm](https://devtools.fm/episode/15) talks with Rich Harris about developing engaging data visualizations and building the tools of tomorrow\n\n**Educational Content**\n\n- [Have Single-Page Apps Ruined the Web?](https://www.youtube.com/watch?v=860d8usGC0o) Rich Harris answers the controversial question at this year's Jamstack Conf\n- [Svelte vs SvelteKit - What's The Difference?](https://",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-11-01-whats-new-in-svelte-november-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "6db07a56-f876-4a95-9e03-02692f1b68b1-3",
    "text": "Apps Ruined the Web?](https://www.youtube.com/watch?v=860d8usGC0o) Rich Harris answers the controversial question at this year's Jamstack Conf\n- [Svelte vs SvelteKit - What's The Difference?](https://www.youtube.com/watch?v=IKhtnhQKjxQ) LevelUpTuts provides a quick guide to explaining the relationship between the two projects. You can check out the rest of Scott Tolinski's guides to Svelte in his new series, [\"Weekly Svelte\"](https://www.youtube.com/playlist?list=PLLnpHn493BHF-Onm1MQgKC1psvW-rJuYi)\n- [WebJeda's SvelteKit Hooks](https://www.youtube.com/watch?v=RarufLoEL08&list=PLm_Qt4aKpfKgzcTiMT2cgWGBDBIPK06DQ) series continues this month with Part 3 - Cookie Session Authentication\n- [Writing Context Aware Styles in a Svelte App](https://www.ryanfiller.com/blog/tips/svelte-contex-aware-styles) is a guide to writing self-contained components that are able to dynamically adapt to their parents\n- [A Beginner\u2019s Guide to SvelteKit](https://www.sitepoint.com/a-beginners-guide-to-sveltekit/) takes a beginner-friendly look at both Svelte and SvelteKit and build out a simple web app showing profile pages of imaginary users\n- [Svelte vs React: Ending the Debate](https://massivepixel.io/blog/svelte-vs-react/) is a historical take on the age-old argument\n- [Svelte Snacks | Custom Events for Modal Actions](https://jeremydayslice.hashnode.dev/svelte-snacks-or-custom-events-for-modal-actions) walks through a solid implementation of Svelte's handy custom event system\n- [What Svelte's accessibility warnings won't tell you](https://geoffrich.net/posts/svelte-a11y-limits/) explains how Svelte's a11y warnings work and why you shouldn't count on them to make your app accessible\n\n**Libraries, Tools & Components**\n\n- [svelte-adapter-azure-swa](https://github.com/geoffrich/svelte-adapter-azure-swa) is an adapter for Svelte apps that creates an Azure Static Web App, using an Azure function for dynamic server rendering\n- [Inlang](https://docs.inlang.dev/getting-started/svelte-kit) is a localization and internationalization toolkit that now supports SvelteKit\n- [svelte-translate-tools](https://github.com/noelmugnier/svelte-translate-tools) extract/generate/compile translation files for your Svelte App at build time\n- [@egjs/svelte-infinitegrid](https://github.com/naver/egjs-infinitegrid/tree/master/packages/svelte-infinitegrid) lets you implement various grids composed of different card elements whose sizes vary\n- [svelte-reactive-css-preprocess](https://github.com/srmullen/svelte-reactive-css-preprocess) makes it easier to update css variable values whenever your component state changes\n- [Sveltegen](https://github.com/snuffyDev/sveltegen) is a CLI for simple and easy creation of actions, components, and routes\n- [svelte-advanced-multistep-form](https://www.npmjs.com/package/svelte-advanced-multistep-form) helps to wrap form elements passing down styles to the component to be rendered, also it presents each form step in a ordered and stylish way\n- [gQuery](https://github.",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-11-01-whats-new-in-svelte-november-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "44d7337b-44e5-4fc6-aa59-67547c2165d8-1",
    "text": "---\ntitle: \"What's new in Svelte: October 2022\"\ndescription: 'Svelte Summit, `use:enhance`, and a SvelteKit Release Candidate!'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nThere's a bunch of updates this month... from new features in Svelte and SvelteKit to a whole 2-day _summit_! Plus, the Svelte extension gets some helpful new tools, new accessibility (a11y) warnings, and Tan Li Hau teaches us how to build our own Svelte and a Svelte spreadsheet \ud83d\ude0e\n\n## What happened at Svelte Summit?\n\nA lot! Below you can find all the talks, by timestamp, from each livestream. Bite-size videos of the event will be coming soon to the Svelte Society channel, so be sure to [Subscribe](https://www.youtube.com/c/SvelteSociety), if you haven't already!\n\n_Day One_\n\n- [12:31](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=751s) - How to get Svelte adopted at work\n- [33:21](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=2001s) - Animating Data Visualization in Svelte\n- [2:20:36](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=8436s) - Red flags & code smells\n- [2:53:42](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=10422s) - Enhance your DX\n- [4:42:41](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=16961s) - Svelte in UBS\u2019 knowledge graph\n- [5:06:42](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=18402s) - How to migrate react libraries to svelte\n- [5:45:27](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=20727s) - DX magic in the world of Svelte\n- [7:25:39](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=26739s) - Data visualizations powered by Svelte\n- [7:59:38](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=28778s) - Partial Hydration in Svelte for Increased Performance\n- [8:20:49](https://www.youtube.com/watch?v=pJcbZr5VlV4&t=30049s) - Building the future, faster\n\n_Day Two_\n\n- [24:09](https://www.youtube.com/watch?v=A8jkJTWacow&t=1449s) - Scrollytell me why: Ain't nothing but a piece of cake\n- [2:02:40](https://www.youtube.com/watch?v=A8jkJTWacow&t=7360s) - I told you my dog wouldn\u2019t run\n- [2:29:43](https://www.youtube.com/watch?v=A8jkJTWacow&t=8983s) - 10Xing Svelte\n- [3:04:56](https://www.youtube.com/watch?v=A8jkJTWacow&t=11096s) - Svemix? Re-svmix? Re-svelte?: Bringing Svelte to Remix Router\n- [5:09:39](https://www.youtube.com/watch?v=A8jkJTWacow&t=18579s) - Having fun with stores: an interactive demo of Svelte\u2019s built in state management library\n- [5:37:06](https://www.youtube.com/watch?v=A8jkJTWacow&t=20226s) - When Keeping it Svelte Goes Wrong. An Analysis of Some of the Worst Svelte I Have Ever Coded\n- [7:22:05](https://www.youtube.com/watch?v=A8jkJTWacow&t=26525s) - Getting started with Hooks\n- [7:38:14](https://www.youtube.com/watch?v=A8jkJTWacow&t=27494s) - Special Announcement\\*\n\n\\*In the final talk of the summit, Rich Harris announces the first Release Candidate of SvelteKit! With no planned breaking changes left, the team is hard at work squashing bugs and adding the remaining features for 1.0...\n\n## More SvelteKit Updates\n\n- `use:enhance` is the ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-10-01-whats-new-in-svelte-october-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "44d7337b-44e5-4fc6-aa59-67547c2165d8-2",
    "text": " Candidate of SvelteKit! With no planned breaking changes left, the team is hard at work squashing bugs and adding the remaining features for 1.0...\n\n## More SvelteKit Updates\n\n- `use:enhance` is the easiest way to progressively enhance a form ([Docs](https://kit.svelte.dev/docs/form-actions#progressive-enhancement-use-enhance), [#6633](https://github.com/sveltejs/kit/pull/6633), [#6828](https://github.com/sveltejs/kit/pull/6828), [#7012](https://github.com/sveltejs/kit/pull/7012))\n- The demo app has been updated to add the Sverdle game, which Rich demoed at Svelte Summit and demonstrates `use:enhance` ([#6979](https://github.com/sveltejs/kit/pull/6979))\n- Cloudflare Pages `_routes.json` specification is now supported by `adapter-cloudflare` ([#6530](https://github.com/sveltejs/kit/pull/6530))\n- Improved build performance by running asset and page compression in parallel ([#6710](https://github.com/sveltejs/kit/pull/6710))\n\n**Breaking changes:**\n\n- Node 16.14 is now the minimum version to run SvelteKit ([#6388](https://github.com/sveltejs/kit/pull/6388))\n- `App.PrivateEnv` and `App.PublicEnv` have been removed in favour of generated types ([#6413](https://github.com/sveltejs/kit/pull/6413))\n- `%sveltekit.message%` has been replaced with `%sveltekit.error.message%` ([6659](https://github.com/sveltejs/kit/pull/6659))\n- `App.PageError` is now `App.Error` - check for it in your hooks ([Docs](https://kit.svelte.dev/docs/hooks#shared-hooks-handleerror), [#6963](https://github.com/sveltejs/kit/pull/6963))\n- `externalFetch` is now `handleFetch` and will run for all fetch calls in `load` that run on the server ([#6565](https://github.com/sveltejs/kit/pull/6565))\n\nFor a full list of changes, check out SvelteKit's [CHANGELOG](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md).\n\n## Svelte Updates\n\n- New a11y warnings for `incorrect-aria-attribute-type`, `no-abstract-role`, `interactive-element-to-noninteractive-role` and `role-has-required-aria-props`.`no-noninteractive-tabindex` and `click-events-have-key-events` coming soon! (**3.50.0**)\n- New types for `ComponentEvents` and `SveltePreprocessor` (**3.50.0**)\n- Improved parsing speed when encountering large blocks of whitespace (**3.50.0**)\n- All global JavaScript objects and functions are now recognized as known globals (**3.50.1**)\n\nFor all the changes to the Svelte compiler, including upcoming changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## New in Language Tools\n\n- Better code formatting for editor suggestion (**106.0.0**, [#1598](https://github.com/sveltejs/language-tools/pull/1598))\n- Easily create SvelteKit route files from the context menu or command palette (**106.1.0**, [#1620](https://github.com/sveltejs/language-tools/pull/1620))\n\n---\n\n## Ask Questions in the Svelte Discord\n\nIn case you missed the announcement, the Svelte Discord has an exciting new update... a forum! The new [questions channel](https://discord.com/channels/",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-10-01-whats-new-in-svelte-october-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "44d7337b-44e5-4fc6-aa59-67547c2165d8-3",
    "text": ")\n\n---\n\n## Ask Questions in the Svelte Discord\n\nIn case you missed the announcement, the Svelte Discord has an exciting new update... a forum! The new [questions channel](https://discord.com/channels/457912077277855764/1023340103071965194) utilizes Discord's new forums feature to help the community better ask, find and answer questions!\n\nIt can be used for anything you may be trying to accomplish using Svelte including using SvelteKit, community libraries, tools, etc. So ask away!\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Timeflow](https://www.timeflow.site/) is a smart calendar & task manager that dynamically schedules your tasks between your events\n- [GeoQuest](https://github.com/woutdp/geoquest) is an open source geography game\n- [Houses Of](https://housesof.world/) is a project showcasing charismatic houses around the world\n- [Greenfield Brewery](https://greenfield-brewery.vercel.app/) is a tool for quickly installing a lot of homebrew casks\n- [Gram Jam](https://gramjam.app/) is a word puzzle game inspired by match three games and Scrabble\n- [Beatbump](https://github.com/snuffyDev/Beatbump) is a privacy-respecting alternative frontend for YouTube Music\n- [RoomOS Device Widgets](https://github.com/wxsd-sales/roomos-device-widgets) is an app for demoing RoomOS device capabilities in Kiosk/PWA mode\n- [World Seed](https://store.steampowered.com/app/1870320/World_Seed/) is a full blown online multiplayer game\n- [Lirify](https://lirify-tan.vercel.app/) is a song lyrics writing web app tool made in Latvia\n- [Splet Tech Konferencija](https://www.splet.rs/) is a tech conference in Serbia with a _very_ fancy website\n- [Unbounded](https://unbounded.polkadot.network/) is an open-source variable font - funded by blockchain (and an awesome-looking website)\n- [Porter's Paints](https://shop.porterspaints.com/) is an eCommerce site for (you guessed it) paints built with Svelte\n- [CRAN/E](https://www.cran-e.com/) is a search engine for modern R-packages\n\n**Learning Resources**\n\n_Starring the Svelte team_\n\n- [Upgrading SvelteKit](https://www.youtube.com/watch?v=vzeZskhjoeQ) by Svelte Sirens (with Brittney, Kev, and GHOST!)\n- [Build your own Svelte](https://www.youtube.com/watch?v=mwvyKGw2CzU) by lihautan\n- [Native Page Transitions in SvelteKit: Part 1](https://geoffrich.net/posts/page-transitions-1/) by Geoff Rich\n- [Build a cross platform app with Tauri](https://ghostdev.xyz/posts/build-a-cross-platform-app-with-tauri/) by GHOST\n\n_To Watch_\n\n- [How To Use Future CSS In Svelte](https://www.youtube.com/watch?v=eqwtoaP-0pk) and [Master Animation With Svelte](https://www.youtube.com/watch?v=3RlBfUQCiAQ) by Joy of Code\n- [Svelte Kit Form Actions 101 - New Svelte Kit API](https://www.youtube.com/watch?v=i5zdnv83mxY) and [Svelte Kit Form Actions - Real World Examples - Q&A](https://www.youtube.com/watch?v=PK2Mpt1q6K8) by LevelUpTuts\n\n_To Read_\n\n- [What's new in `svelte-kit, 1.0.0-next.445`: (group) layout](https://dev.to/parables/whats-new-i",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-10-01-whats-new-in-svelte-october-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "44d7337b-44e5-4fc6-aa59-67547c2165d8-4",
    "text": " - Real World Examples - Q&A](https://www.youtube.com/watch?v=PK2Mpt1q6K8) by LevelUpTuts\n\n_To Read_\n\n- [What's new in `svelte-kit, 1.0.0-next.445`: (group) layout](https://dev.to/parables/whats-new-in-svelte-kit-100-next445-group-layout-1ld5) by Parables\n- [Handling breaking changes in SvelteKit pre-1.0](https://maier.tech/posts/handling-breaking-changes-in-sveltekit-pre-1-0) by Thilo Maier\n- [Svelte Custom Stores Demystified](https://raqueebuddinaziz.com/blog/svelte-custom-stores-demystified/) by Raqueebuddin Aziz\n- Sveltekit Changes: [Advanced Layouts](https://dev.to/theether0/sveltekit-changes-advanced-layouts-3id4), [Form Actions and Progressive Enhancement](https://dev.to/theether0/sveltekit-changes-form-actions-and-progressive-enhancement-31h9) and [Cookies and Authentication](https://dev.to/theether0/sveltekit-changes-session-and-cookies-enb) by Shivam Meena\n- [How to add an Emoji Picker to Sveltekit](https://xvrc.net/) by Xavier Coiffard\n- [Get Started with SvelteKit Headless WordPress](https://plus.rodneylab.com/tutorials/get-started-sveltekit-headless-wordpress) by Rodney Lab\n- [Speed up SvelteKit Pages With a Redis Cache](https://www.captaincodeman.com/speed-up-sveltekit-pages-with-a-redis-cache) and [How to await Firebase Auth with SvelteKit](https://www.captaincodeman.com/how-to-await-firebase-auth-with-sveltekit) by Captain Codeman\n- [Deploying SvelteKit with NodeJS to a Server Using GitLab and PM2](https://abyteofcoding.com/blog/deploying-sveltekit-with-nodejs-pm2-to-server/) by A Byte of Coding\n- [Quality of Life Tips when using SvelteKit in VS Code](https://www.reddit.com/r/sveltejs/comments/xltgyp/quality_of_life_tips_when_using_sveltekit_in_vs/) by doa-doa\n\n**Libraries, Tools & Components**\n\n- [Svelte Fit](https://github.com/leveluptuts/svelte-fit) is an extremely simple, no dependency fit text library\n- [svelte-switch-case](https://github.com/l-portet/svelte-switch-case) is a switch case syntax for your Svelte components\n- [svelte-canvas-confetti](https://github.com/andreasmcdermott/svelte-canvas-confetti) uses a single canvas to render full-screen confetti\n- [@slidy/svelte](https://github.com/Valexr/Slidy/tree/master/packages/svelte) is a simple, configurable & reusable carousel component built with Svelte - based on `@slidy/core`\n- [svelte-currency-input](https://github.com/canutin/svelte-currency-input) is a form input that converts numbers to localized currency formats as you type\n- [Adria](https://github.com/pilcrowOnPaper/adria) is a super simple form validation library, with autocomplete and value/type checking\n- [Canopy](https://github.com/oslabs-beta/canopy) is a Svelte debugging app for the Chrome devtools panel\n- [MenuFramework](https://github.com/MyHwu9508/altv-os-menu-framework) is a menu framework written for [alt:V](https://altv.mp/#/)\n- [whyframe](https://whyframe.dev/) gives iframes superpowers, making it easy to render anything in isolation\n- [@svelte-put/modal](https://github.com/vnphanquang/svelte-put/tree",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-10-01-whats-new-in-svelte-october-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "26935e6c-f973-426c-8e31-8183011b87a9-1",
    "text": "---\ntitle: \"What's new in Svelte: April 2023\"\ndescription: 'Loads of new Svelte compiler features, plus Svelte Summit and SvelteHack'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nHappy April, everyone! This month, we're covering all the new features in the Svelte compiler, some quality-of-life improvements in SvelteKit and a huge showcase (like always).\n\nIn core team news, Dominic Gannaway has joined Vercel to work on Svelte full-time! Dominic is a world-class expert on wringing performance out of javascript engines, on the DOM, on reactivity, on accessibility, and more! You might know him as the creator of the [Inferno](https://www.infernojs.org/) UI framework or [Lexical](https://lexical.dev/), Meta's WYSIWYG editor. It'll be great to see his talents at work across the Svelte ecosystem \ud83c\udf31\n\nDon't forget! Svelte Summit Spring, Svelte's 6th virtual conference, will be happening on May 6th. Also, there's just two weeks left until the end of [SvelteHack](https://hack.sveltesociety.dev/)... It's a great opportunity to share your creations with the community and maybe even earn a prize!\n\nNow let's jump into this month's changes...\n\n## What's new in Svelte\n\n- A bunch of new features are now available as of **3.56.0**!\n  - Add `|stopImmediatePropagation` event modifier for `on:eventname` ([#5085](https://github.com/sveltejs/svelte/issues/5085), [Docs](https://svelte.dev/docs#template-syntax-element-directives-on-eventname))\n  - Add `axis` parameter to `slide` transition ([#6182](https://github.com/sveltejs/svelte/issues/6182), [Docs](https://svelte.dev/docs#run-time-svelte-transition-slide))\n  - Add `readonly` utility to convert `writable` store to readonly ([#6518](https://github.com/sveltejs/svelte/pull/6518), [Docs](https://svelte.dev/docs#run-time-svelte-store-writable))\n  - Add `readyState` binding for media elements ([#6666](https://github.com/sveltejs/svelte/issues/6666), [Docs](https://svelte.dev/docs#template-syntax-element-directives-bind-property-media-element-bindings))\n  - Add `naturalWidth` and `naturalHeight` bindings to images ([#7771](https://github.com/sveltejs/svelte/issues/7771), [Docs](https://svelte.dev/docs#template-syntax-element-directives-bind-property-image-element-bindings))\n- Support `<!-- svelte-ignore ... -->` on components ([#8082](https://github.com/sveltejs/svelte/issues/8082))\n- Inputs in a `bind:group` will clear when their value is set to `undefined` (**3.56.0**, [#8214](https://github.com/sveltejs/svelte/issues/8214))\n- `<input>` values will now persist when swapping elements with spread attributes in an `{#each}` block (**3.56.0**, [#7578](https://github.com/sveltejs/svelte/issues/7578))\n- Better warnings across the board - from `noreferrer` to `aria` rules (**3.56.0**)\n- Add <svelte:document> (**3.57.0**, [#3310](https://github.com/sveltejs/svelte/issues/3310))\n- The `style:` directive will now take precedence over a `style=` attribute (**3.57.0**, [#7475](https://github.com/sveltejs/svelte/issues/",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-04-01-whats-new-in-svelte-april-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "26935e6c-f973-426c-8e31-8183011b87a9-2",
    "text": "**, [#3310](https://github.com/sveltejs/svelte/issues/3310))\n- The `style:` directive will now take precedence over a `style=` attribute (**3.57.0**, [#7475](https://github.com/sveltejs/svelte/issues/7475))\n- CSS units are now supported in the `fly` and `blur` transitions (**3.57.0**, [#7623](https://github.com/sveltejs/svelte/pull/7623), [Docs](https://svelte.dev/docs#run-time-svelte-transition))\n\nFor all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## What's new in SvelteKit\n\n- You can now get all cookies for a request with `cookies.getAll` (**1.10.0**, [#9287](https://github.com/sveltejs/kit/pull/9287), [Docs](https://kit.svelte.dev/docs/types#public-types-cookies))\n- Easily manage the submission status of (multiple) forms with the new exposed `submitter` parameter in `use:enhance` (**1.12.0**, [#9425](https://github.com/sveltejs/kit/pull/9425), [Docs](https://kit.svelte.dev/docs/types#public-types-submitfunction))\n- The default error page now has dark mode styles (**1.13.0**, [#9460](https://github.com/sveltejs/kit/pull/9460))\n- You can now omit types on all methods and variables with special meaning to SvelteKit and still benefit from full type safety! Read more about it in the [announcement blog post](https://svelte.dev/blog/zero-config-type-safety)\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Peerbeer](https://peer.beer/) lets you share files peer-to-peer (p2p) without any third parties or data limits\n- [unplaneted](https://unplaneted.com/) is an interface for exploring very large space images\n- [PokeBook](https://github.com/pokegh0st/pokebook) is a digital notebook for writing poetry that provides a beautiful distraction-free environment and autosave\n- [papi](https://papi.run/) lets you create prompts for AI models and share them with others with a unique link\n- [Mathesar](https://github.com/centerofci/mathesar) is a straightforward open source tool that provides a spreadsheet-like interface to a PostgreSQL database\n- [SQLite Playground](https://neil.macmunn.com/sqlite#) lets you learn how SQLite runs and stores data in the browser\n- [svgl](https://github.com/pheralb/svgl) is a beautiful library with SVG logos\n- [Swehl](https://swehl.com/) is an eCommerce store, community and tutorial site for breastfeeding mothers\n- [Codeverter](https://github.com/TGlide/codeverter) is a GPT-powered code converter, allowing you to convert between different languages and frameworks\n- [Game On Or Not](https://gameonornot.com/) is a free web app that helps you organize sports with your friends\n- [Sveltia CMS](https://github.com/sveltia/sveltia-cms) is a Git-based lightweight headless CMS\n\n**Learning Resources**\n\n_Featuring Svelte Contributors and Ambassadors_\n\n- [Streaming, snapshots, and other new features since SvelteKit 1.0](https://svelte.dev/blog/streaming-snapshots-sveltekit) by Geoff Rich on the svelte.dev Blog\n- [Dev V",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-04-01-whats-new-in-svelte-april-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "26935e6c-f973-426c-8e31-8183011b87a9-3",
    "text": "Contributors and Ambassadors_\n\n- [Streaming, snapshots, and other new features since SvelteKit 1.0](https://svelte.dev/blog/streaming-snapshots-sveltekit) by Geoff Rich on the svelte.dev Blog\n- [Dev Vlog: Rich Harris shows us what's new in Svelte and Kit, March 2023](https://www.youtube.com/watch?v=vgXgex5E-8g) from Svelte Society\n  - If you missed this one live, check out [the next one](https://www.youtube.com/watch?v=MJHO6FSioPI) - scheduled for April 5th\n- [Svelte Society - London February 2023](https://www.youtube.com/watch?v=RkQ_f7XxdMI)\n- Svelte Radio episodes from this month:\n  - [We all live in a Svelte Submarine](https://www.svelteradio.com/episodes/we-all-live-in-a-svelte-submarine)\n  - [Building furniture using Svelte with Bert Bengtson](https://www.svelteradio.com/episodes/building-furniture-using-svelte-with-bert-bengtson)\n  - [Svelte Hackathon Announcement](https://www.svelteradio.com/episodes/svelte-hackathon-announcement)\n  - [LevelUpTuts 6 months later with Scott Tolinski](https://www.svelteradio.com/episodes/leveluptuts-6-months-later-with-scott-tolinski)\n  - [I got a cold and had fever dreams about React \ud83d\ude31](https://www.svelteradio.com/episodes/i-got-a-cold-and-had-fever-dreams-about-react)\n- This Week In Svelte videos:\n  - [2023 March 10 - New prompts! Underline your links!](https://www.youtube.com/watch?v=WiCjQVoE-3k)\n  - [2023 March 17 - More a11y warnings! How to: Dynamic Form Actions!](https://www.youtube.com/watch?v=sRhZQ-2VxVU)\n  - [2023 March 23 - SvelteKit 1.13.0, Vitest and Playwright overview](https://www.youtube.com/watch?v=vpbhsbg2otg)\n\n_To Watch or Hear_\n\n- [Full Stack SvelteKit App Deployment Using Vercel And Supabase For $0](https://www.youtube.com/watch?v=uAF4Yd-gddo) by Joy of Code\n- [Why Is Svelte.js so Popular?](https://www.youtube.com/watch?v=73Y8Yyg54zc) by Prismic\n- [Interactive Tables in SvelteKit with TanStack Table](https://www.youtube.com/watch?v=-Zuo3UWjjI8) by hartenfellerdev\n- [SvelteKit + GraphQL with Houdini](https://www.youtube.com/watch?v=ADnaRwQZfqw&list=PLm0ILX0LGQk_220vvpsbyXH2VesRlCm-E) by Aftab Alam\n\n_To Read_\n\n- [Thoughts on Svelte](https://tyhopp.com/notes/thoughts-on-svelte) by Ty Hopp\n- [Storybook](https://storybook.js.org/blog/storybook-for-sveltekit/) on why (and how) it supports SvelteKit\n- [Svelte Authentication Tutorial with Authorizer](https://thethinks.vercel.app/blog/svelte-authorizer) by The Thinks\n- [Use Zod to Validate Forms on the Server with SvelteKit](https://blog.robino.dev/posts/svelte-zod-error) by Ross Robino\n- [Do I need a sitemap for my SvelteKit app, and how do I create it?](https://maier.tech/posts/do-i-need-a-sitemap-for-my-sveltekit-app-and-how-do-i-create-it) and [Complement zero-effort type safety in SvelteKit with Zod for even more type safety](https://maier.tech/posts/complement-zero-effort-type-safety-in-sveltekit-with-zod-for-even-more-type-safety) and [Configuring Turborepo for a SvelteKit monorepo](https://maier.tech/posts/configuring-turborepo-for-a-svel",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-04-01-whats-new-in-svelte-april-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8b58d1bd-1146-4f18-9d4b-c8217a1cf0ba-1",
    "text": "---\ntitle: \"What's new in Svelte: February 2023\"\ndescription: 'Minor versions and major satisfaction'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nSince last month, we've seen a couple of minor versions across Svelte and SvelteKit, a bunch of educational content to support the 1.0 release, as well as the [State of JS survey](https://stateofjs.com) results...\n\nSvelte, once again, increased in satisfaction and interest, so thanks to everyone who voted!\n\nLet's dive into the updates...\n\n## What's new in SvelteKit\n\nWork in the Svelte ecosystem this month has been focused on SvelteKit bug fixes and addressing feedback from the 1.0 launch. One of the more awaited [bug fixes to SvelteKit's base path support](https://github.com/sveltejs/kit/issues/2958) landed, which means that you can now create SvelteKit projects on remote development environments. There have been several [new releases](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md) with these fixes as well as a handful of new features such as:\n\n- The submitter's value will now be included automatically when progressively enhancing <form method=\"get\"> (**1.0.3**, [#8273](https://github.com/sveltejs/kit/pull/8273))\n- Added an error in dev mode if global fetch is used with relative URL (**1.0.8**, [#8370](https://github.com/sveltejs/kit/pull/8370))\n- A warning will now indicated that hydration may break if comments are removed from HTML (**1.0.11**, [#8423](https://github.com/sveltejs/kit/pull/8423))\n- A warning will occur when of page options are used in `.svelte` files or a missing `<slot />` in layout is detected (**1.1.0**, [#8475](https://github.com/sveltejs/kit/pull/8475))\n- The new `text(...)` helper makes it easy to generate text responses (**1.2.0**, [#8371](https://github.com/sveltejs/kit/pull/8371))\n- The public env can now be accessed within app.html (**1.2.0**, [Docs](https://kit.svelte.dev/docs/project-structure#project-files-src), [#8449](https://github.com/sveltejs/kit/pull/8449))\n- An error will now be thrown if cookie exceeds size limit (**1.2.1**, [#8591](https://github.com/sveltejs/kit/pull/8591))\n- The generated `tsconfig` can now be modified (**1.3.0**, [#8606](https://github.com/sveltejs/kit/pull/8606))\n\n## What's new in Svelte and Language Tools\n\n- Added support for `html.customData` from the VS Code HTML language service (**extensions-107.0.0**, [#1824](https://github.com/sveltejs/language-tools/pull/1824))\n- Autocompletion for stores that need to be imported ([#1823](https://github.com/sveltejs/language-tools/pull/1823)) and object/class member snippets ([#1817](https://github.com/sveltejs/language-tools/pull/1817)) has been added to the Svelte extension (**extensions-107.0.0**)\n- Improve detection of promises that are also functions (**Svelte 3.55.1**, [#8162](https://github.com/sveltejs/svelte/pull/8162))\n- Add missing types and properties for the global `part` attribute and `on:submit`, respectively (**Svelte 3.55.1**, [#8181](https://g",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-01-whats-new-in-svelte-february-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8b58d1bd-1146-4f18-9d4b-c8217a1cf0ba-2",
    "text": " 3.55.1**, [#8162](https://github.com/sveltejs/svelte/pull/8162))\n- Add missing types and properties for the global `part` attribute and `on:submit`, respectively (**Svelte 3.55.1**, [#8181](https://github.com/sveltejs/svelte/issues/8181))\n- Lots of performance and bug fixes (**Svelte 3.55.1\\*** and **extensions-107.0.x**)\n\n\\*for all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Titowest.com](https://titowest.com/) is a series of photographic films by the writer & photographer, Tito West\n- [Verve](https://github.com/ParthJadhav/verve) is a lightweight and blazingly fast launcher for accessing and opening applications, files and documents\n- [Round The World](https://rtw.voyage/) is an interactive guide to the travels of Andrew Carnegie\n- [Linear Regression](https://mlu-explain.github.io/linear-regression/) is an interactive blog post visual introduction to (almost) everything you should know about linear regression\n- [Flotes](https://flotes.app/) is a free note taking app enhanced with flashcard features\n- [nomie](https://github.com/open-nomie/nomie6-oss) is a Daily Journal for short attention spans\n- [nocode.gallery](https://nocode.gallery/) is a collection of stunning websites made with no code\n- [Whom to Follow](https://whomtofollow.com/) helps you find accounts you'll love by searching the network of accounts you already follow\n- [poker-simulator](https://github.com/hucancode/poker-simulator) is a poker simulation and evaluation tool\n- [Pixelicious](https://www.pixelicious.xyz/) converts your images into pixel art\n- [Apple Music](https://music.apple.com/us/browse) is now built with Svelte ([proof](https://twitter.com/BrittneyPostma/status/1615381017300271104))\n\n**Learning Resources**\n\n_Featuring Svelte Contributors and Ambassadors_\n\n- [SvelteKit | Rich Harris | ViteConf 2022](https://www.youtube.com/watch?v=-OMPfr56kXI)\n- [Talking Gradio and AI with pngwn \ud83d\udc27](https://www.svelteradio.com/episodes/gradio-with-pngwn) from Svelte Radio\n- [Progressively enhancing the Marvel By Year filter](https://geoffrich.net/posts/marvel-filter-state/) and [Advent of SvelteKit 2022: my favorite demos](https://geoffrich.net/posts/advent-of-sveltekit-2022/) by Geoff Rich\n- [EP 13: Contributing more to open source + a Svelte Newsletter showcase rewind \u23ea](https://bookmarkbeat.substack.com/p/contributing-more-to-open-source) by Dani Sandoval\n\n_To Watch or Hear_\n\n- [I built a $5 chat app with Pocketbase & Svelte. Will it scale?](https://www.youtube.com/watch?v=gUYBFDPZ5qk) by Fireship\n- [The Comprehensive Introduction To SvelteKit](https://www.youtube.com/watch?v=obmiLi3bhkQ), [What Svelte UI Library Should You Use?](https://www.youtube.com/watch?v=O0mNU0maItY) and [Learn Everything About SvelteKit Routing (Pages, Layout, Nested Routes)](https://www.youtube.com/watch?v=7hXHbGj6iE0) by Joy of Code",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-01-whats-new-in-svelte-february-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "8b58d1bd-1146-4f18-9d4b-c8217a1cf0ba-3",
    "text": " Should You Use?](https://www.youtube.com/watch?v=O0mNU0maItY) and [Learn Everything About SvelteKit Routing (Pages, Layout, Nested Routes)](https://www.youtube.com/watch?v=7hXHbGj6iE0) by Joy of Code\n- [Progressive Enhancement in SvelteKit (use:enhance)](https://www.youtube.com/watch?v=jXtzWMhdI2U), [Are Your Routes Actually Protected?](https://www.youtube.com/watch?v=UbhhJWV3bmI) and [10X Your SvelteKit Developer Experience in VSCode](https://www.youtube.com/watch?v=13v50nLh67Q) by Huntabyte\n- [The easiest realtime app I\u2019ve ever built](https://www.youtube.com/watch?v=UbOaAtHWidc) by Beyond Fireship\n- [Angular developers can learn Svelte so fast...](https://www.youtube.com/watch?v=lKdw_z9qmPU) by Joshua Morony\n- [SvelteKit + PocketBase Integration: User Login and Registration](https://www.youtube.com/watch?v=AxPB3e-3yEM) by Jian Yuan Lee\n- [Marvels Of Using Svelte and SvelteKit - JSJ 566](https://topenddevs.com/podcasts/javascript-jabber/episodes/marvels-of-using-svelte-and-sveltekit-jsj-566) with Tracey Lee and Adam L Barrett\n\n_To Read_\n\n- [A practical first look at the Svelte framework](https://mainmatter.com/blog/2023/01/24/sveltekit-super-rentals/) by Daniel Beer\n- [State Modeling in Svelte with XState](https://github.com/annaghi/xstate-svelte-workshop) is the port of the Frontend Masters React + XState workshop written in Svelte and built with SvelteKit!\n- [\ud83d\ude80 Code your SvelteKit website faster with Stylify CSS](https://stylifycss.com/blog/code-your-sveltekit-website-faster-with-stylify-css/) by Stylify CSS\n- [\ud83c\udfae Five Svelte Games To Learn How To Code](https://tomaszs2.medium.com/five-svelte-games-to-learn-how-to-code-f36ae6e58923) by Tom Smykowski\n- [How to make declarative (code-based) router instead of file-based router in SvelteKit](https://dev.to/devpunk/how-to-make-declarativecode-based-router-instead-of-file-based-router-in-sveltekit-2-3dd4) by Dev Punk\n- [How to import tailwindcss custom config in JS/TS parts of a SvelteKit app](https://gist.github.com/0gust1/aa8c8b831428cdd7a5535e92cbf02f04) by 0gust1\n- [SvelteKit Internals: Load function](https://www.okupter.com/blog/sveltekit-internals-load-function) and [Svelte and CSS](https://www.okupter.com/blog/svelte-and-css) by Justin Ahinon\n- [Internationalization Formatting with Intl + SSR + SvelteKit](https://www.captaincodeman.com/internationalization-formatting-with-intl-ssr-sveltekit) by Captain Codeman\n- [Typesafe i18n with SvelteKit](https://blog.encodeart.dev/typesafe-i18n-with-sveltekit) by Andreas S\u00f6derlund\n- [Authorization in your SvelteKit app](https://cerbos.dev/blog/authorization-in-your-sveltekit-app) by Adam Barrett\n- [Validate your form using Sveltekit, Tailwindcss, Felte and Yup](https://medium.com/@Heesel/validate-your-form-using-sveltekit-tailwindcss-felte-and-yup-ddc11cd04717) by Hessel\n- [SvelteKit Form Actions bound to TypeScript class + Validation (yup) w/dynamic array](http://enehana.nohea.com/general/sveltekit-form-actions-bound-to-typescript-class-validation-yup-w",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-02-01-whats-new-in-svelte-february-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2a16f23e-979c-43cf-a2ac-c59101444fde-1",
    "text": "---\ntitle: \"What's new in Svelte: January 2021\"\ndescription: A Svelte-packed showcase to kick-off the new year!\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nHappy new year from Svelte! In the last month we made progress on Sapper's upcoming release, fine-tuned our `SvelteComponent` typings, and have seen some amazing apps, sites, and libraries coming out in the showcase.\n\n## What's changed in Svelte?\n\nA new minor release replaces the `SvelteComponent` class with a `SvelteComponentTyped` class. This renaming should help with backwards compatibility. We've updated [last month's blog post](https://svelte.dev/blog/whats-new-in-svelte-december-2020) to avoid any confusion with the name change.\n\nIf you're using `SvelteComponent` or the new `SvelteComponentTyped` in your project or library, let us know what you're using it for and we'll add it to the showcase!\n\n## What's going on in Sapper?\n\nMore quality of life features are landing in the upcoming release every day. `0.29.0` will include new TypeScript definitions, fixes to scroll tracking and prefetching behavior, and improvements to the runtime router to support encoded query parameters.\n\nIf you're upgrading from 0.28.x, check out [the migration guide](https://sapper.svelte.dev/migrating/#0_28_to_0_29) for steps on updating to Sapper 0.29.\n\n## Is SvelteKit ready yet?\n\nTo avoid too much churn during development, SvelteKit is still being worked on in a private repo. There will be an announcement on the Discord, blog and Twitter when it's ready for a larger group of users and contributors.\n\nIn the meantime, you can explore the current build by running `npm init svelte@next` from your command line.\n\nAs cautioned in _[What's the deal with SvelteKit?](https://svelte.dev/blog/whats-the-deal-with-sveltekit)_, there are no docs or support available yet... So use at your own risk / for your own enjoyment!\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [manitu.me](https://manitu.me/) is a background sound / pomodoro timer for focus and relaxation\n- [Answer Socrates](https://answersocrates.com/) helps you find trending questions on the internet so that you can write the most relevant blog post, tweet, or billboard\n- [multris](https://multris.s1h.org/) is a multiplayer Tetris game. You can read about its development [here](https://blog.s1h.org/svelte-multiplayer-game/)\n- [weather-ab](https://github.com/ganochenkodg/weather-ab) compares the archive of weather in different cities of the world. Indispensable for people thinking about migration\n- [Game Nibs](https://gamenibs.com/) is a platform for gamers to find and share concise bite-sized bits of gaming advice, tips, tricks, screenshots, builds, and much more\n- [Ora](https://github.com/cupcakearmy/ora) is an open source website tracking and limiting tool for Chrome and Firefox\n- [vscode-dms](https://github.com/techsyndicate/vscode-dms) is a group direct messaging chat app for VSCode\n- [Zero.2](https://zero.oleksandrdemian.tech/) is a math-based ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-01-01-whats-new-in-svelte-january-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2a16f23e-979c-43cf-a2ac-c59101444fde-2",
    "text": " tool for Chrome and Firefox\n- [vscode-dms](https://github.com/techsyndicate/vscode-dms) is a group direct messaging chat app for VSCode\n- [Zero.2](https://zero.oleksandrdemian.tech/) is a math-based challenge game where you try to get to zero as quickly as possible\n- [Octave Compass](https://octavecompass.com/2741) is a chord table and scale explorer for many popular musical scales\n- [Infinite Walking Bass Generator 2](https://github.com/elialbert/infinitewalkingbass2) is an online music player that generates a unique walking bass line\n- [ListenAddict](https://www.listenaddict.com/) is a site that notifies you whenever a person has a new talk/interview on podcast\n\n**Demos, Libraries & Components**\n\n- [svelte-tiny-virtual-list](https://github.com/Skayo/svelte-tiny-virtual-list) speeds up long lists by only rendering visible items\n- [svelte-query](https://github.com/TanStack/svelte-query) is a collection of helpful hooks for managing, caching and syncing asynchronous and remote data\n- [svelte-previous](https://github.com/bryanmylee/svelte-previous) is a svelte store to remember previous values - helpful for transitions or a quick undo stack\n- [Let's Build a Confetti Cannon](https://varun.ca/confetti/) explains how to build a particle system and integrate a Canvas based animation into a larger application\n- [svelte-micro](https://github.com/ayndqy/svelte-micro) is a one-component router\n- [svelte-standalone-router](https://github.com/hjalmar/svelte-standalone-router) is a standalone router with an API based on [standalone-router](https://github.com/hjalmar/standalone-router)\n- [svelte-datepicker](https://github.com/beyonk-adventures/svelte-datepicker) is a datepicker component with variations for time selection, date ranges and responsive themes\n- [svelte-slimscroll](https://github.com/MelihAltintas/svelte-slimscroll) is a action for Svelte.js, which can transforms any div into a scrollable area with a nice scrollbar.\n- [Svelte Zoomable](https://svelte.dev/repl/58dfe87756ee4db897c281b52fdef7b7?version=3.31.0) is a custom transition with a nice zoom effect\n\n**Have a component you'd like to share?** Check out the [Components](https://sveltesociety.dev/components) page on the Svelte Society site. You can contribute by making [a PR to this file](https://github.com/svelte-society/sveltesociety.dev/blob/master/src/pages/components/components.json).\n\n**Learning Resources**\n\n- [Using Svelte to create a scroll video effect](https://blog.koenvangilst.nl/tutorial-svelte-scroll-video/) showcases how the `bind` command can be used to create a cool scroll video effect with very little code\n- [How to make a flappybird game in svelte and typescript](https://www.youtube.com/watch?v=nhrYBoVI8pQ) is a video tutorial including docs and code for reference\n- [Accessible Svelte Transition](https://www.youtube.com/watch?v=QK_QuRL7nSo&feature=youtu.be) walks through `prefers-reduced-motion` to make svelte transitions more accessible\n- [Svelte's module scripts explained](ht",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-01-01-whats-new-in-svelte-january-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "05a0a887-27f3-43d4-99f2-88381e548e4a-1",
    "text": "---\ntitle: \"What's new in Svelte: April 2021\"\ndescription: SvelteKit beta and new way to use slots\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nTwo projects that have been months (even years) in the making have made their way out into the world. SvelteKit is now in public beta and slotted components are now available in Svelte!\n\n## What's up with SvelteKit?\n\n[SvelteKit](https://kit.svelte.dev/) - Svelte's versatile framework for building SSR, serverless applications, or SPAs - is now officially in public beta. Expect bugs! Lots more detail in the [latest blog post](https://svelte.dev/blog/sveltekit-beta). Want to know when 1.0 is close? Check out the milestone on [github](https://github.com/sveltejs/kit/milestone/2).\n\nWant to learn more about how to get started, what's different compared to Sapper, new features and migration paths? Check out this week's [episode of Svelte Radio](https://www.svelteradio.com/episodes/svelte-kit-public-beta) for a deep dive with Antony, Kev and Swyx.\n\n## New in Svelte & Language Tools\n\n- Slotted components, including `<svelte:fragment slot=\"...\">` lets component consumers target specific slots with rich content (**Svelte 3.35.0, Language Tools [104.5.0](https://github.com/sveltejs/language-tools/releases/tag/extensions-104.5.0)**, check out the [docs](https://svelte.dev/docs#template-syntax-svelte-fragment) and the [tutorial](https://svelte.dev/tutorial/svelte-fragment))\n- Linked editing now works for HTML in Svelte files (**Language Tools, [104.6.0](https://github.com/sveltejs/language-tools/releases/tag/extensions-104.6.0)**)\n- Type definitions `svelte.d.ts` are now resolved in order, allowing library authors to ship type definitions with their svelte components (**Language Tools, [104.7.0](https://github.com/sveltejs/language-tools/releases/tag/extensions-104.7.0)**)\n- [vite-plugin-svelte](https://github.com/sveltejs/vite-plugin-svelte) is available for general use of Svelte in Vite. `npm init @vitejs/app` includes Svelte options using this plugin.\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [Nagato](https://nagato.app/) is a task management tool that connects popular time tracking and to-do tools all in one place.\n- [type-kana](https://type-kana.cass.moe/setup) is a quiz app to help you learn \u3072\u3089\u304c\u306a (hiragana) and \u30ab\u30bf\u30ab\u30ca (katakana), the Japanese syllabaries.\n- [Pittsburgh Steps](https://pittsburgh-steps.samlearner.com/) is an interactive map of the more than 800 sets of public outdoor stairways in Pittsburgh, PA.\n- [Music Mode Wheels](https://tobx.github.io/music-mode-wheels/) is a website that displays music modes as interactive wheels.\n- [Critical Notes](https://www.critical-notes.com/) helps game masters and players keep track of their roleplaying games campaigns and adventures.\n- [Svelte Game of Life](https://github.com/alanrsoares/svelte-game-of-life) is an educational implementation of Conway's Game of Life in TypeScript + Svelte\n- [foxql](https://github.com/foxql) is a peer to peer full ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-04-01-whats-new-in-svelte-april-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "05a0a887-27f3-43d4-99f2-88381e548e4a-2",
    "text": "f Life](https://github.com/alanrsoares/svelte-game-of-life) is an educational implementation of Conway's Game of Life in TypeScript + Svelte\n- [foxql](https://github.com/foxql) is a peer to peer full text search engine that runs on your browser.\n\n**Demos, Libraries, Tools & Components**\n\n- [svelte-nodegui](https://github.com/nodegui/svelte-nodegui) is a way to build performant, native and cross-platform desktop applications with Node.js and Svelte\n- [Svelte Story Format](https://www.npmjs.com/package/@storybook/addon-svelte-csf) allows you to write your \"stories\" in Storybook using the Svelte syntax. More info in the [Storybook blog](https://storybook.js.org/blog/storybook-for-svelte/)\n- [SelectMadu](https://github.com/pavish/select-madu) is a replacement for the select menu, with support for searching, multiple selections, async data loading and more.\n- [Svelte Checklist](https://www.npmjs.com/package/svelte-checklist) is a customizable CheckList built with Svelte.\n- [Suspense for Svelte](https://www.npmjs.com/package/@jamcart/suspense) is a Svelte component that implements the core idea of React's `<Suspense>`.\n- [MiniRx](https://spierala.github.io/mini-rx-store/) is a RxJS Redux Store that works with Svelte and TypeScript\n- [svelte-formly](https://github.com/arabdevelop/svelte-formly) generates dynamic forms for Svelte and Sapper\n- [7ty](https://www.npmjs.com/package/@jamcart/7ty) is a static site generator that uses Svelte, supports partial hydration of components, and uses file based routing resembling Sapper and 11ty.\n\n**Want to contribute your own component?** Submit a [Component](https://sveltesociety.dev/components) to the Svelte Society site by making [a PR to this file](https://github.com/svelte-society/sveltesociety.dev/blob/master/src/pages/components/components.json).\n\n**Starters**\n\n- [sveltekit-electron](https://github.com/FractalHQ/sveltekit-electron) is a starter kit for Electron using SvelteKit\n- [sveltekit-tailwindcss-external-api](https://github.com/acidlake/sveltekit-tailwindcss-external-api) is everything you need to build a Svelte project with TailwindCSS and an external API, powered by create-svelte.\n- [Sapper Netlify](https://www.npmjs.com/package/sapper-netlify) is a Sapper project that can run on a Netlify function.\n\n**Looking for a particular starter?** Check out [svelte-adders](https://github.com/svelte-add/svelte-adders) and a number of other template examples at the community site [sveltesociety.dev](https://sveltesociety.dev/templates/)\n\n**Learning Resources**\n\n- [How to Build a Website with Svelte and SvelteKit](https://prismic.io/blog/svelte-sveltekit-tutorial) is a step-by-step tutorial walking through the new SvelteKit setup.\n- [A Svelte store for prefers-reduced-motion](https://geoffrich.net/posts/svelte-prefers-reduced-motion-store/) demonstrates how to make a custom Svelte store whose value will indicate whether the user has requested reduced motion and improve accessibility.\n- [TypeScript support in Svelte]",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-04-01-whats-new-in-svelte-april-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "60d79fe2-e6bd-4673-b1e9-63555e514e0e-1",
    "text": "---\ntitle: \"What's new in Svelte: May 2022\"\ndescription: 'Dynamically switch between HTML element types with `<svelte:element>`'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWith yesterday's Svelte Summit behind us, we've got a lot of news to share! Check out all of the recordings on the [Svelte Society YouTube Channel](https://www.youtube.com/sveltesociety) and the rest of this month's updates below...\n\n## What's new in Svelte\n\n- The `<svelte:element>` element lets you render an element of a dynamically specified type. This is useful, for example, when rendering rich text content from a CMS. Check out the [docs](https://svelte.dev/docs#template-syntax-svelte-element) or the [tutorial](https://svelte.dev/tutorial/svelte-element) for more info (**3.47.0**)!\n\n## Language Tools updates\n\n- `svelte:element` and `sveltekit:reload` are now supported\n- Invalid Svelte import paths will now be automatically detected - see PR for getting back the old behavior ([#1448](https://github.com/sveltejs/language-tools/pull/1448))\n- `source.sortImports` lets you sort imports without deleting unused imports ([#1338](https://github.com/sveltejs/language-tools/issues/1338))\n- Hovering over HTML attributes will now show HTML hover info instead of the TS hover info - resulting in much more useful information ([#1447](https://github.com/sveltejs/language-tools/pull/1447))\n- In VS Code, you can now wrap existing blocks of code in control flow tags using the `Insert Snippet` command ([#1373](https://github.com/sveltejs/language-tools/pull/1373))\n\n## What's new in SvelteKit\n\n- Files and directories can now be named `__tests__` and `__test__` in the routes directory ([#4438](https://github.com/sveltejs/kit/pull/4438))\n- Netlify Edge Functions ([#4657](https://github.com/sveltejs/kit/pull/4657)) and the Vercel build output API ([#4663](https://github.com/sveltejs/kit/pull/4663)) are now supported\n- Custom `load` dependencies, array of strings representing URLs the page depends on, are now available when loading routes ([Docs](https://kit.svelte.dev/docs/loading#output-dependencies), [#4536](https://github.com/sveltejs/kit/pull/4536))\n\n**Breaking Changes**\n\n- Validators are now called \"matchers\" ([Docs](https://kit.svelte.dev/docs/routing#advanced-routing-matching), [#4358](https://github.com/sveltejs/kit/pull/4358))\n- `__layout.reset` has been replaced by named layouts - which have much configurability for shared layout elements ([Docs](https://kit.svelte.dev/docs/layouts#named-layouts), [#4388](https://github.com/sveltejs/kit/pull/4388))\n- Prerendering is now skipped for `rel=\"external\"` links ([#4545](https://github.com/sveltejs/kit/pull/4545))\n- `maxage` is now `cache` in `LoadOutput` ([#4690](https://github.com/sveltejs/kit/pull/4690))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [polySpectra AR](https://ar.polyspectra.com/) lets you prototype faster 3D Printing with seamless AR file handoffs ([video demo](https://www.youtube.com/watc",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-05-01-whats-new-in-svelte-may-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "60d79fe2-e6bd-4673-b1e9-63555e514e0e-2",
    "text": "ase\n\n**Apps & Sites built with Svelte**\n\n- [polySpectra AR](https://ar.polyspectra.com/) lets you prototype faster 3D Printing with seamless AR file handoffs ([video demo](https://www.youtube.com/watch?v=VhYCeVGcG3E))\n- [Pixel Art Together](https://github.com/liveblocks/pixel-art-together) is a free multiplayer pixel art editor powered by Liveblocks\n- [Tooling Manager](https://tooling-manager.netlify.app/) lets you compare your JavaScript tech stack against industry standard boilerplates\n- [Easy Portfolio](https://easy-portfolio.com/) generates a portfolio based on your GitHub profile\n- [FLOAT](https://github.com/muttoni/float) is an attendance tracking program for events\n- [The Coin Perspective](https://thecoinperspective.com/) is a cryptocurrency price tracker and portfolio management tool\n- [Locutionis](https://github.com/pbouillon/locutionis) is a small, online reference of figures of speech (en fran\u00e7ais)\n- [ASM Editor](https://asm-editor.specy.app/) is an all in one web editor for M68K and MIPS\n- [Otium](https://github.com/alombi/otium) is a free and open source book manager and bookshelf organiser, that helps you managing your books and the ones you would like to read\n- [Sinwaver](https://github.com/Hugo-Dz/Sinwaver) is an SVG sine wave generator\n\nWant to contribute to a modern SvelteKit website? [Help build the Svelte Society site](https://github.com/svelte-society/sveltesociety.dev/issues)!\n\n**Learning Resources**\n\n_To Read_\n\n- [4 tips for cleaner Svelte components](https://geoffrich.net/posts/clean-component-tips/) by Geoff Rich\n- [Building a Clubhouse clone with Svelte and 100ms](https://www.100ms.live/blog/clubhouse-clone-with-svelte) By Seun Taiwo\n- [SvelteKit uvu Testing: Fast Component Unit Tests](https://rodneylab.com/sveltekit-uvu-testing/) by Rodney Lab\n- [SvelteKit JWT authentication tutorial](https://dev.to/pilcrowonpaper/sveltekit-jwt-authentication-tutorial-2m34) by pilcrowOnPaper\n- [Converting a Rollup-based Svelte SPA to SvelteKit](https://github.com/sveltejs/kit/discussions/4595) by Simon H\n- [Add Commitint, Commitizen, Standard Version, and Husky to SvelteKit Project](https://davipon.hashnode.dev/add-commitint-commitizen-standard-version-and-husky-to-sveltekit-project) by David Peng\n\n_To Watch or Hear_\n\n- [Rich Harris - The Road to SvelteKit 1.0 (Svelte Society NYC)](https://www.youtube.com/watch?v=s6a1pbTVcUs) by Svelte Society\n- [Svelte Fundamentals - Intro to Svelte](https://codingcat.dev/course/intro-to-svelte) by Coding Cat\n- [Svelte Components Using Custom Markdown Renderers - Weekly Svelte](https://www.youtube.com/watch?v=ZiEROAqobwM) by LevelUpTuts\n- [Implementing {@const} in if block](https://www.youtube.com/watch?v=f5iReGqjmG0) by lihautan\n- [Svelte and Contributing to Open-Source with Geoff Rich](https://podcast.20minjs.com/1952066/10417700-episode-6-svelte-and-contributing-to-open-source-with-geoff-rich) by 20minJS\n\n**Libraries, Tools & Components**\n\n- [KitDocs](https://github.com/svelteness/kit-docs) is a doc",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-05-01-whats-new-in-svelte-may-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7297fb27-f53a-4bc0-9dc2-87a27eba2f34-1",
    "text": "---\ntitle: What's the deal with SvelteKit?\ndescription: We're rethinking how to build Svelte apps. Here's what you need to know\nauthor: Rich Harris\nauthorURL: https://twitter.com/rich_harris\n---\n\n<aside><p>If you <em>didn't</em> attend Svelte Summit, you can catch up on the <a href=\"https://www.youtube.com/c/SvelteSociety/videos\">Svelte Society YouTube page</a></p></aside>\n\nIf you attended [Svelte Summit](https://sveltesummit.com/) last month you may have seen my talk, Futuristic Web Development, in which I finally tackled one of the most frequently asked questions about Svelte: when will Sapper reach version 1.0?\n\nThe answer: never.\n\nThis was slightly tongue-in-cheek \u2014 as the talk explains, it's really more of a rewrite of Sapper coupled with a rebrand \u2014 but it raised a lot of new questions from the community, and it's time we offered a bit more clarity on what you can expect from Sapper's successor, SvelteKit.\n\n<div class=\"max\">\n<figure style=\"max-width: 960px; margin: 0 auto\">\n<div style=\"height: 0; padding: 0 0 57.1% 0; position: relative; margin: 0 auto;\">\n\t<iframe style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0; margin: 0;\" src=\"https://www.youtube-nocookie.com/embed/qSfdtmcZ4d0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<figcaption>'Futuristic Web Development' from <a href=\"https://sveltesummit.com/\">Svelte Summit</a></figcaption>\n</figure>\n</div>\n\n## What's Sapper?\n\n[Sapper](https://sapper.svelte.dev) is an _app framework_ (or 'metaframework') built on top of Svelte (which is a _component_ framework). Its job is to make it easy to build Svelte apps with all the modern best practices like server-side rendering (SSR) and code-splitting, and to provide a project structure that makes development productive and fun. It uses _filesystem-based routing_ (as popularised by [Next](https://nextjs.org/) and adopted by many other frameworks, albeit with some enhancements) \u2014 your project's file structure mirrors the structure of the app itself.\n\nWhile the Svelte homepage and documentation encourages you to [degit](https://github.com/Rich-Harris/degit) the [sveltejs/template](https://github.com/sveltejs/template) repo to start building an app, Sapper has long been our recommended way to build apps; this very blog post is (at the time of writing!) rendered with Sapper.\n\n## Why are we migrating to something new?\n\nFirstly, the distinction between [sveltejs/template](https://github.com/sveltejs/template) and [sveltejs/sapper-template](https://github.com/sveltejs/sapper-template) is confusing, particularly to newcomers to Svelte. Having a single recommended way to start building apps with Svelte will bring enormous benefits: we simplify onboarding, reduce the maintenance and support burden, and can potentially begin to explore the new possibilities that are unlocked by having a predictable project structure. (This last part is deliberately vague beca",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-11-05-whats-the-deal-with-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7297fb27-f53a-4bc0-9dc2-87a27eba2f34-2",
    "text": "e the maintenance and support burden, and can potentially begin to explore the new possibilities that are unlocked by having a predictable project structure. (This last part is deliberately vague because it will take time to fully understand what those possibilities are.)\n\nAside from all that, we've been tempted by the thought of rewriting Sapper for a while. This is partly because the codebase has become a little unkempt over the years ([Sapper started in 2017](/blog/sapper-towards-the-ideal-web-app-framework)), but mostly because the web has changed a lot recently, and it's time to rethink some of our foundational assumptions.\n\n## How is this new thing different?\n\nThe first of those foundational assumptions is that you need to use a module bundler like [webpack](https://webpack.js.org/) or [Rollup](https://rollupjs.org/) to build apps. These tools trace the dependency graph of your application, analysing and transforming code along the way (turning Svelte components to JS modules, for example), in order to create bundles of code that can run anywhere. As the original creator of Rollup, I can attest that it is a surprisingly complex problem with fiendish edge cases.\n\nYou certainly needed a bundler several years ago, because browsers didn't natively support the `import` keyword, but it's much less true today. Right now, we're seeing the rise of the _unbundled development_ workflow, which is radically simpler: instead of eagerly bundling your app, a dev server can serve modules (converted to JavaScript, if necessary) _on-demand_, meaning startup is essentially instantaneous however large your app becomes.\n\n[Snowpack](https://www.snowpack.dev/) is at the vanguard of this movement, and it's what powers SvelteKit. It's astonishingly fast, and has a beautiful development experience (hot module reloading, error overlays and so on), and we've been working closely with the Snowpack team on features like SSR. The hot module reloading is particularly revelatory if you're used to using Sapper with Rollup (which has never had first-class HMR support owing to its architecture, which prioritises the most efficient output).\n\nThat's not to say we're abandoning bundlers altogether. It's still essential to optimise your app for production, and SvelteKit uses Rollup to make your apps as fast and lean as they possibly can be (which includes things like extracting styles into static `.css` files).\n\nThe other foundational assumption is that a server-rendered app needs, well, a server. Sapper effectively has two modes \u2014 `sapper build`, which creates a standalone app that has to run on a Node server, and `sapper export` which bakes your app out as a collection of static files suitable for hosting on services like GitHub Pages.\n\nStatic files can go pretty much anywhere, but running a Node server (and monitoring/scaling it etc) is less straightforward. Nowadays we're witnessing a shift towards _serverless platforms_, in which you as the app author don't need to think abou",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-11-05-whats-the-deal-with-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7297fb27-f53a-4bc0-9dc2-87a27eba2f34-3",
    "text": "running a Node server (and monitoring/scaling it etc) is less straightforward. Nowadays we're witnessing a shift towards _serverless platforms_, in which you as the app author don't need to think about the server your code is running on, with all the attendant complexity. You can get Sapper apps running on serverless platforms, thanks to things like [vercel-sapper](https://github.com/thgh/vercel-sapper), but it's certainly not what you'd call idiomatic.\n\n<aside><p>It'll still be possible to create both Node apps and fully pre-rendered (aka exported) sites</a></p></aside>\n\nSvelteKit fully embraces the serverless paradigm, and will launch with support for all the major serverless providers, with an 'adapter' API for targeting any platforms that we don't officially cater to. In addition, we'll be able to do partial pre-rendering, which means that static pages can be generated at build time but dynamic ones get rendered on-demand.\n\n## When can I start using it?\n\nIf you're feeling brave, you can start right now:\n\n```bash\nnpm init svelte@next\n```\n\nThis will scaffold a new project and install the `@sveltejs/kit` CLI, which provides the tools for developing and building an app.\n\nWe don't recommend it though! There are no docs, and we won't be able to offer any form of support. It's also likely to break often.\n\nThe work is being done in a private monorepo while we're still in exploration mode. Our plan is to get a public beta ready and announce it here once we've closed a few issues \u2014 the repo itself will remain private at that time, but we'll create a place to collect feedback from the YOLO crowd. After that, we'll work towards a 1.0 release which will involve opening the repo up.\n\nI'm not going to make any firm promises about timings, because I don't like to break promises. But I _think_ we're talking about weeks rather than months.\n\n## What if I don't want to use SvelteKit?\n\nYou won't have to \u2014 it will always be possible to use Svelte as a standalone package or via a bundler integration like [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte). We think it's essential that you can bend Svelte to fit your workflow, however esoteric, and use third-party app frameworks like [Elder.js](https://github.com/Elderjs/elderjs), [Routify](https://routify.dev/), [Plenti](https://plenti.co/), [Crown](https://crownframework.com/), [JungleJS](https://www.junglejs.org/) and others.\n\n## TypeScript?\n\nDon't worry, we won't launch without full TypeScript support.\n\n## How can I migrate my existing Sapper apps?\n\nFor the most part, it should be relatively straightforward to migrate a Sapper codebase.\n\nThere are some unavoidable changes (being able to run on serverless platforms means we need to replace custom `server.js` files and `(req, res) => {...}` functions with more portable equivalents), and we're taking the opportunity to fix a few design flaws, but on the whole a SvelteKit app will feel very familiar to Sapper users.\n\nDetailed migration guides wi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-11-05-whats-the-deal-with-sveltekit.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "be7d3277-c83a-4960-b2f0-e48dc128ef7b-1",
    "text": "---\ntitle: \"What's new in Svelte: February 2021\"\ndescription: Integrations and improvements at lightning speed...\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWith the shortest month of the year coming up, Svelte maintainers and community members alike have been busy this last month \u2013 from big changes in `svelte-loader`, `prettier-plugin-svelte`, `rollup-plugin-svelte`, and `language-tools` to steady progress in Sapper and `svelte-preprocess`. Meanwhile, lots of folks have been busy integrating Svelte with other popular frameworks.\n\n## New compiler features\n\n- Aria roles from the [WAI-ARIA Graphics Module](https://www.w3.org/TR/graphics-aria-1.0/#role_definitions) are now recognized as valid aria roles in Svelte components (**3.31.1**)\n- Compiler warnings for the common React attributes, `className` and `htmlFor`, now make it easier to port React components to Svelte (**3.31.1**)\n\nHave a suggestion for a compiler feature or want to help implement new features/bug fixes? Check out the [\"triage: good first issue\" tag for Svelte](https://github.com/sveltejs/svelte/issues?q=is%3Aopen+is%3Aissue+label%3A%22triage%3A+good+first+issue%22)\n\n## New bits in language-tools\n\n- User disabled auto import suggestions no longer show in VS Code (**103.0.0**)\n- Renaming a variable is now safer with smart additions of a prefix/suffix to renamed variables (**104.0.0**)\n- Semantic (token) highlighting for TypeScript users lets theme makers apply semantic styling in their themes, if they support it (**104.0.0**)\n- \"Extract Component\" has been added to the context menu - allowing you to extract components out of files without having to open the command window to type \"Svelte: Extract Component\" (**104.0.0**)\n- The VS Code extension now listens to JavaScript/TypeScript file changes - you no longer need to save the files for the changes to be noticed (**104.1.0**)\n\nFor the complete list of changes, check out the language-tools [Releases page](https://github.com/sveltejs/language-tools/releases).\n\nA great way to try the language tools is to download the [Svelte Extension for VSCode](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode). This extension provides syntax highlighting and rich intellisense for Svelte components in VS Code, using the svelte language server. Check your editor's extension sources to see if there's a Svelte plugin for your IDE or build your own (see [coc-svelte](https://github.com/coc-extensions/coc-svelte) for example)!\n\n## Big improvements across the Svelte ecosystem\n\n- [svelte-loader](https://github.com/sveltejs/svelte-loader) released a major version, 3.0.0 - featuring Webpack 5 and Node 14 support, better hot reloading, and new `compilerOptions` to match `rollup-plugin-svelte`. Breaking changes include dropping Svelte 2 and Node 8 support. [More info in the changelog](https://github.com/sveltejs/svelte-loader/blob/master/CHANGELOG.md)\n- [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelt",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-02-01-whats-new-in-svelte-february-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "be7d3277-c83a-4960-b2f0-e48dc128ef7b-2",
    "text": "g Svelte 2 and Node 8 support. [More info in the changelog](https://github.com/sveltejs/svelte-loader/blob/master/CHANGELOG.md)\n- [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte) is now at version 7.x - with support for relative filenames, better handling of sourcemaps, and consistent `compilerOptions`. Be sure to [checkout the changelog](https://github.com/sveltejs/rollup-plugin-svelte/blob/master/CHANGELOG.md) for breaking changes when upgrading\n- [svelte-preprocess](https://github.com/sveltejs/svelte-preprocess) iterated through some 4.6.x releases this month to improve postcss and scss handling and fix sourcemap transformation for typescript users. [More info in the changelog](https://github.com/sveltejs/svelte-preprocess/blob/main/CHANGELOG.md)\n- [Sapper](https://github.com/sveltejs/sapper) got some improvements in scroll tracking and handling encoding query parameters. Dynamic imports also now work as expected in browsers that don't support ES modules. These changes from 0.29.0 and a step-by-step migration guide can be found [in the changelog](https://github.com/sveltejs/sapper/blob/master/CHANGELOG.md)\n- [prettier-plugin-svelte](https://github.com/sveltejs/prettier-plugin-svelte) version 2 was released. It received an overhaul and comes with a rewrite of the HTML formatting. The output is now much more in line with how standard Prettier formats HTML. Better defaults for `svelteBracketNewLine` and `options-scripts-markup-styles` should now match how the majority of users like to order the code blocks. Additionally, Prettier's `htmlWhitespaceSensitivity` setting is now supported. [More info in the changelog](https://github.com/sveltejs/prettier-plugin-svelte/blob/master/CHANGELOG.md)\n\nNew changes to the Svelte Society website include [a new cheat sheet](https://sveltesociety.dev/cheatsheet) for easy access to useful code patterns and some smaller visual fixes across the site. **Want to help make the Svelte Society website ready for prime time**? [Checkout the GitHub repo](https://github.com/svelte-society/sveltesociety.dev) to get started!\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [The official German vaccination dashboard](https://impfdashboard.de/) tracks the current COVID vaccine rollout and features some well-done dataviz.\n- [La neuva era de la educati\u00f3n conectada](https://elfuturoesapasionante.vodafone.es/especiales/educacion-conectada/) is a Vodaphone site that highlights the ways that technology and COVID-19 has changed the education landscape\n- [sho.rest](https://github.com/Melonai/shorest) is a self-hostable url shortener\n- [night.fm](https://night.fm/) is a cyberpunk-themed radio station\n\n**Demos, Libraries & Components**\n\n- [Svelte Reactive Debugger](https://addons.mozilla.org/en-US/firefox/addon/svelte-reactive-debugger/) is a way to monitor Svelte reactive statements in Firefox devtools\n- [svelte-actions](https://github.com/sw-yx/svelte-actions) is a set of prototype Svelte actions for inclusion in",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-02-01-whats-new-in-svelte-february-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "be7d3277-c83a-4960-b2f0-e48dc128ef7b-3",
    "text": "reactive-debugger/) is a way to monitor Svelte reactive statements in Firefox devtools\n- [svelte-actions](https://github.com/sw-yx/svelte-actions) is a set of prototype Svelte actions for inclusion into official actions in future. [See RFC](https://github.com/sveltejs/rfcs/pull/24) and [Discuss High Level Policy](https://github.com/sw-yx/svelte-actions/issues/7).\n- [This css grid gallery](https://svelte.dev/repl/3a1b7fae13b242fe9cd4a4f7aa092fa4?version=3.31.2) made by @joja (in the Svelte Discord) features grid transitions based on a user's mouse position\n- [Patchcab](https://github.com/spectrome/patchcab) is a modular Eurorack style synthesizer made with Web Audio.\n- [svelte-knob](https://github.com/MelihAltintas/svelte-knob) is a knob control to help with speedometer-style visualization\n- [descent-ripple](https://github.com/micha-lmxt/descent-ripple) is a highly customizable javascript ripple animation for buttons\n- [makeItSnow](https://github.com/florianlouvet/make-it-snow/blob/main/makeItSnowAction.js) is a Svelte action made by @MrPoule (in the Svelte Discord) that can be used to add \u2744\ufe0fsnow\u2744\ufe0f to any component ([Demo](https://svelte.dev/repl/de5223beb45540a5a11c9bd7b318304f?version=3.31.2))\n- [svelte-video-player](https://github.com/meigo/svelte-video-player) is a customizable `VideoPlayer` component\n- [svelte-readonly](https://github.com/Crisfole/svelte-readonly) is a very small store that exposes only a readable interface.\n\n**New Integrations & Starters**\n\n- [svelte-derver-starter](https://github.com/AlexxNB/svelte-derver-starter) is a starter for baking fullstack application with the client based on Svelte and server side powered by Derver.\n- [eleventy-plugin-embed-svelte](https://github.com/shalomscott/eleventy-plugin-embed-svelte) makes it easy to embed Svelte components into an 11ty site.\n- [svelte-tailwind-extension-boilerplate](https://github.com/kyrelldixon/svelte-tailwind-extension-boilerplate) is a good foundation for a Chrome extension using either JavaScript or TypeScript, Svelte for the frontend, Tailwind CSS for styling, Jest for testing, and Rollup as the build system.\n- [snowpack-ui](https://github.com/rajasegar/snowpack-ui) lets you run & manage Snowpack projects from the browser instead of the terminal\n- [Svelte for Appwrite](https://dev.to/torstendittmann/svelte-for-appwrite-4fkg) explains how to integrate with Appwrite, a self-hosted Firebase alternative [GitHub Repo](https://github.com/appwrite/sdk-for-svelte)\n- [here-maps-svelte](https://github.com/peopledrivemecrazy/here-maps-svelte) makes it easy to include HERE maps in a Svelte app\n- [p5-svelte](https://github.com/tonyketcham/p5-svelte) is an absolutely dead simple way of tossing the creative coding/sketching tool, p5, into a project\n- [svelte-windicss-preprocess](https://github.com/voorjaar/svelte-windicss-preprocess) is a Svelte preprocessor to compile tailwindcss at build time based on windicss compiler\n- [MitzaCoder/svelte-boilerplate](https://github.com/MitzaCod",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-02-01-whats-new-in-svelte-february-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "679d1d7a-178d-48ae-84bb-3f37a8ae12ca-1",
    "text": "---\ntitle: \"Frameworks without the framework: why didn't we think of this sooner?\"\ndescription: You can't write serious applications in vanilla JavaScript without hitting a complexity wall. But a compiler can do it for you.\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\n> Wait, this new framework has a _runtime_? Ugh. Thanks, I'll pass.\n> **\u2013 front end developers in 2018**\n\nWe're shipping too much code to our users. Like a lot of front end developers, I've been in denial about that fact, thinking that it was fine to serve 100kb of JavaScript on page load \u2013 just use [one less .jpg!](https://twitter.com/miketaylr/status/227056824275333120) \u2013 and that what _really_ mattered was performance once your app was already interactive.\n\nBut I was wrong. 100kb of .js isn't equivalent to 100kb of .jpg. It's not just the network time that'll kill your app's startup performance, but the time spent parsing and evaluating your script, during which time the browser becomes completely unresponsive. On mobile, those milliseconds rack up very quickly.\n\nIf you're not convinced that this is a problem, follow [Alex Russell](https://twitter.com/slightlylate) on Twitter. Alex [hasn't been making many friends in the framework community lately](https://twitter.com/slightlylate/status/728355959022587905), but he's not wrong. But the proposed alternative to using frameworks like Angular, React and Ember \u2013 [Polymer](https://www.polymer-project.org/1.0/) \u2013 hasn't yet gained traction in the front end world, and it's certainly not for a lack of marketing.\n\nPerhaps we need to rethink the whole thing.\n\n## What problem do frameworks _really_ solve?\n\nThe common view is that frameworks make it easier to manage the complexity of your code: the framework abstracts away all the fussy implementation details with techniques like virtual DOM diffing. But that's not really true. At best, frameworks _move the complexity around_, away from code that you had to write and into code you didn't.\n\nInstead, the reason that ideas like React are so wildly and deservedly successful is that they make it easier to manage the complexity of your _concepts_. Frameworks are primarily a tool for structuring your thoughts, not your code.\n\nGiven that, what if the framework _didn't actually run in the browser_? What if, instead, it converted your application into pure vanilla JavaScript, just like Babel converts ES2016+ to ES5? You'd pay no upfront cost of shipping a hefty runtime, and your app would get seriously fast, because there'd be no layers of abstraction between your app and the browser.\n\n## Introducing Svelte\n\nSvelte is a new framework that does exactly that. You write your components using HTML, CSS and JavaScript (plus a few extra bits you can [learn in under 5 minutes](https://v2.svelte.dev/guide)), and during your build process Svelte compiles them into tiny standalone JavaScript modules. By statically analysing the component template, we can make sure that the browser does as ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2016-11-26-frameworks-without-the-framework.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "679d1d7a-178d-48ae-84bb-3f37a8ae12ca-2",
    "text": "elte.dev/guide)), and during your build process Svelte compiles them into tiny standalone JavaScript modules. By statically analysing the component template, we can make sure that the browser does as little work as possible.\n\nThe [Svelte implementation of TodoMVC](https://svelte-todomvc.surge.sh/) weighs 3.6kb zipped. For comparison, React plus ReactDOM _without any app code_ weighs about 45kb zipped. It takes about 10x as long for the browser just to evaluate React as it does for Svelte to be up and running with an interactive TodoMVC.\n\nAnd once your app _is_ up and running, according to [js-framework-benchmark](https://github.com/krausest/js-framework-benchmark) **Svelte is fast as heck**. It's faster than React. It's faster than Vue. It's faster than Angular, or Ember, or Ractive, or Preact, or Riot, or Mithril. It's competitive with Inferno, which is probably the fastest UI framework in the world, for now, because [Dominic Gannaway](https://twitter.com/trueadm) is a wizard. (Svelte is slower at removing elements. We're [working on it](https://github.com/sveltejs/svelte/issues/26).)\n\nIt's basically as fast as vanilla JS, which makes sense because it _is_ vanilla JS \u2013\u00a0just vanilla JS that you didn't have to write.\n\n## But that's not the important thing\n\nWell, it _is_ important \u2013 performance matters a great deal. What's really exciting about this approach, though, is that we can finally solve some of the thorniest problems in web development.\n\nConsider interoperability. Want to `npm install cool-calendar-widget` and use it in your app? Previously, you could only do that if you were already using (a correct version of) the framework that the widget was designed for \u2013 if `cool-calendar-widget` was built in React and you're using Angular then, well, hard cheese. But if the widget author used Svelte, apps that use it can be built using whatever technology you like. (On the TODO list: a way to convert Svelte components into web components.)\n\nOr [code splitting](https://twitter.com/samccone/status/797528710085652480). It's a great idea (only load the code the user needs for the initial view, then get the rest later), but there's a problem \u2013 even if you only initially serve one React component instead of 100, _you still have to serve React itself_. With Svelte, code splitting can be much more effective, because the framework is embedded in the component, and the component is tiny.\n\nFinally, something I've wrestled with a great deal as an open source maintainer: your users always want _their_ features prioritised, and underestimate the cost of those features to people who don't need them. A framework author must always balance the long-term health of the project with the desire to meet their users' needs. That's incredibly difficult, because it's hard to anticipate \u2013 much less articulate \u2013 the consequences of incremental bloat, and it takes serious soft skills to tell people (who may have been enthusiastically evangelising your tool up to that point) th",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2016-11-26-frameworks-without-the-framework.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "051f5d5f-d1b9-481f-b7ff-89000432005d-1",
    "text": "---\ntitle: Virtual DOM is pure overhead\ndescription: Let's retire the 'virtual DOM is fast' myth once and for all\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\nIf you've used JavaScript frameworks in the last few years, you've probably heard the phrase 'the virtual DOM is fast', often said to mean that it's faster than the _real_ DOM. It's a surprisingly resilient meme \u2014 for example people have asked how Svelte can be fast when it doesn't use a virtual DOM.\n\nIt's time to take a closer look.\n\n## What is the virtual DOM?\n\nIn many frameworks, you build an app by creating `render()` functions, like this simple [React](https://reactjs.org/) component:\n\n```ts\n// @noErrors\nfunction HelloMessage(props) {\n\treturn <div className=\"greeting\">Hello {props.name}</div>;\n}\n```\n\nYou can do the same thing without JSX...\n\n```js\n// @noErrors\nfunction HelloMessage(props) {\n\treturn React.createElement('div', { className: 'greeting' }, 'Hello ', props.name);\n}\n```\n\n...but the result is the same \u2014 an object representing how the page should now look. That object is the virtual DOM. Every time your app's state updates (for example when the `name` prop changes), you create a new one. The framework's job is to _reconcile_ the new one against the old one, to figure out what changes are necessary and apply them to the real DOM.\n\n## How did the meme start?\n\nMisunderstood claims about virtual DOM performance date back to the launch of React. In [Rethinking Best Practices](https://www.youtube.com/watch?v=x7cQ3mrcKaY), a seminal 2013 talk by former React core team member Pete Hunt, we learned the following:\n\n> This is actually extremely fast, primarily because most DOM operations tend to be slow. There's been a lot of performance work on the DOM, but most DOM operations tend to drop frames.\n\n<figure>\n\t<img alt=\"Pete Hunt at JSConfEU 2013\" src=\"/media/rethinking-best-practices.jpg\">\n\t<figcaption>Screenshot from <a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">Rethinking Best Practices</a> at JSConfEU 2013</figcaption>\n</figure>\n\nBut hang on a minute! The virtual DOM operations are _in addition to_ the eventual operations on the real DOM. The only way it could be faster is if we were comparing it to a less efficient framework (there were plenty to go around back in 2013!), or arguing against a straw man \u2014 that the alternative is to do something no-one actually does:\n\n```js\n// @noErrors\nonEveryStateChange(() => {\n\tdocument.body.innerHTML = renderMyApp();\n});\n```\n\nPete clarifies soon after...\n\n> React is not magic. Just like you can drop into assembler with C and beat the C compiler, you can drop into raw DOM operations and DOM API calls and beat React if you wanted to. However, using C or Java or JavaScript is an order of magnitude performance improvement because you don't have to worry...about the specifics of the platform. With React you can build applications without even thinking about performance and the default state is fast.\n\n...but that's not the p",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2018-12-27-virtual-dom-is-pure-overhead.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "051f5d5f-d1b9-481f-b7ff-89000432005d-2",
    "text": "use you don't have to worry...about the specifics of the platform. With React you can build applications without even thinking about performance and the default state is fast.\n\n...but that's not the part that stuck.\n\n## So... is the virtual DOM _slow_?\n\nNot exactly. It's more like 'the virtual DOM is usually fast enough', but with certain caveats.\n\nThe original promise of React was that you could re-render your entire app on every single state change without worrying about performance. In practice, I don't think that's turned out to be accurate. If it was, there'd be no need for optimisations like `shouldComponentUpdate` (which is a way of telling React when it can safely skip a component).\n\nEven with `shouldComponentUpdate`, updating your entire app's virtual DOM in one go is a lot of work. A while back, the React team introduced something called React Fiber which allows the update to be broken into smaller chunks. This means (among other things) that updates don't block the main thread for long periods of time, though it doesn't reduce the total amount of work or the time an update takes.\n\n## Where does the overhead come from?\n\nMost obviously, [diffing isn't free](https://twitter.com/pcwalton/status/1015694528857047040). You can't apply changes to the real DOM without first comparing the new virtual DOM with the previous snapshot. To take the earlier `HelloMessage` example, suppose the `name` prop changed from 'world' to 'everybody'.\n\n1. Both snapshots contain a single element. In both cases it's a `<div>`, which means we can keep the same DOM node\n2. We enumerate all the attributes on the old `<div>` and the new one to see if any need to be changed, added or removed. In both cases we have a single attribute \u2014 a `className` with a value of `\"greeting\"`\n3. Descending into the element, we see that the text has changed, so we'll need to update the real DOM\n\nOf these three steps, only the third has value in this case, since \u2014 as is the case in the vast majority of updates \u2014 the basic structure of the app is unchanged. It would be much more efficient if we could skip straight to step 3:\n\n```js\n// @noErrors\nif (changed.name) {\n\ttext.data = name;\n}\n```\n\n(This is almost exactly the update code that Svelte generates. Unlike traditional UI frameworks, Svelte is a compiler that knows at _build time_ how things could change in your app, rather than waiting to do the work at _run time_.)\n\n## It's not just the diffing though\n\nThe diffing algorithms used by React and other virtual DOM frameworks are fast. Arguably, the greater overhead is in the components themselves. You wouldn't write code like this...\n\n```js\n// @noErrors\nfunction StrawManComponent(props) {\n\tconst value = expensivelyCalculateValue(props.foo);\n\n\treturn <p>the value is {value}</p>;\n}\n```\n\n...because you'd be carelessly recalculating `value` on every update, regardless of whether `props.foo` had changed. But it's extremely common to do unnecessary computation and allocation in ways that seem m",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2018-12-27-virtual-dom-is-pure-overhead.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7f04d5db-76b5-4b0b-a7ea-c1732dc74ed5-1",
    "text": "---\ntitle: Write less code\ndescription: The most important metric you're not paying attention to\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\nAll code is buggy. It stands to reason, therefore, that the more code you have to write the buggier your apps will be.\n\nWriting more code also takes more time, leaving less time for other things like optimisation, nice-to-have features, or being outdoors instead of hunched over a laptop.\n\nIn fact it's widely acknowledged that [project development time](https://blog.codinghorror.com/diseconomies-of-scale-and-lines-of-code/) and [bug count](https://www.mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio) grow _quadratically_, not linearly, with the size of a codebase. That tracks with our intuitions: a ten-line pull request will get a level of scrutiny rarely applied to a 100-line one. And once a given module becomes too big to fit on a single screen, the cognitive effort required to understand it increases significantly. We compensate by refactoring and adding comments \u2014 activities that almost always result in _more_ code. It's a vicious cycle.\n\nYet while we obsess \u2014 rightly! \u2014 over performance numbers, bundle size and anything else we can measure, we rarely pay attention to the amount of code we're writing.\n\n## Readability is important\n\nI'm certainly not claiming that we should use clever tricks to scrunch our code into the most compact form possible at the expense of readability. Nor am I claiming that reducing _lines_ of code is necessarily a worthwhile goal, since it encourages turning readable code like this...\n\n```js\nfor (let i = 0; i <= 100; i += 1) {\n\tif (i % 2 === 0) {\n\t\tconsole.log(`${i} is even`);\n\t}\n}\n```\n\n...into something much harder to parse:\n\n```js\nfor (let i = 0; i <= 100; i += 1) if (i % 2 === 0) console.log(`${i} is even`);\n```\n\nInstead, I'm claiming that we should favour languages and patterns that allow us to naturally write less code.\n\n## Yes, I'm talking about Svelte\n\nReducing the amount of code you have to write is an explicit goal of Svelte. To illustrate, let's look at a very simple component implemented in React, Vue and Svelte. First, the Svelte version:\n\n<div class=\"max\">\n\t<iframe\n\t\ttitle=\"Simple component example\"\n\t\tsrc=\"/repl/embed?example=blog-write-less-code\"\n\t\tscrolling=\"no\"\n\t></iframe>\n</div>\n\nHow would we build this in React? It would probably look something like this:\n\n```js\n// @noErrors\nimport React, { useState } from 'react';\n\nexport default () => {\n\tconst [a, setA] = useState(1);\n\tconst [b, setB] = useState(2);\n\n\tfunction handleChangeA(event) {\n\t\tsetA(+event.target.value);\n\t}\n\n\tfunction handleChangeB(event) {\n\t\tsetB(+event.target.value);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<input type=\"number\" value={a} onChange={handleChangeA} />\n\t\t\t<input type=\"number\" value={b} onChange={handleChangeB} />\n\n\t\t\t<p>\n\t\t\t\t{a} + {b} = {a + b}\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n```\n\nHere's an equivalent component in Vue:\n\n```svelte\n<template>\n\t<div>\n\t\t<input type=\"number\" v-model.num",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2019-04-20-write-less-code.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7f04d5db-76b5-4b0b-a7ea-c1732dc74ed5-2",
    "text": "alue={b} onChange={handleChangeB} />\n\n\t\t\t<p>\n\t\t\t\t{a} + {b} = {a + b}\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n```\n\nHere's an equivalent component in Vue:\n\n```svelte\n<template>\n\t<div>\n\t\t<input type=\"number\" v-model.number=\"a\">\n\t\t<input type=\"number\" v-model.number=\"b\">\n\n\t\t<p>{{a}} + {{b}} = {{a + b}}</p>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tdata: function() {\n\t\t\treturn {\n\t\t\t\ta: 1,\n\t\t\t\tb: 2\n\t\t\t};\n\t\t}\n\t};\n</script>\n```\n\n<aside>\n\t<p>I'm counting by copying the source code to the clipboard and running `pbpaste | wc -c` in my terminal</p>\n</aside>\n\nIn other words, it takes 442 characters in React, and 263 characters in Vue, to achieve something that takes 145 characters in Svelte. The React version is literally three times larger!\n\nIt's unusual for the difference to be _quite_ so obvious \u2014 in my experience, a React component is typically around 40% larger than its Svelte equivalent. Let's look at the features of Svelte's design that enable you to express ideas more concisely:\n\n### Top-level elements\n\nIn Svelte, a component can have as many top-level elements as you like. In React and Vue, a component must have a single top-level element \u2014 in React's case, trying to return two top-level elements from a component function would result in syntactically invalid code. (You can use a fragment \u2014 `<>` \u2014\u00a0instead of a `<div>`, but it's the same basic idea, and still results in an extra level of indentation).\n\nIn Vue, your markup must be wrapped in a `<template>` element, which I'd argue is redundant.\n\n### Bindings\n\nIn React, we have to respond to input events ourselves:\n\n```js\n// @noErrors\nfunction handleChangeA(event) {\n\tsetA(+event.target.value);\n}\n```\n\nThis isn't just boring plumbing that takes up extra space on the screen, it's also extra surface area for bugs. Conceptually, the value of the input is bound to the value of `a` and vice versa, but that relationship isn't cleanly expressed \u2014 instead we have two tightly-coupled but physically separate chunks of code (the event handler and the `value={a}` prop). Not only that, but we have to remember to coerce the string value with the `+` operator, otherwise `2 + 2` will equal `22` instead of `4`.\n\nLike Svelte, Vue does have a way of expressing the binding \u2014 the `v-model` attribute, though again we have to be careful to use `v-model.number` even though it's a numeric input.\n\n### State\n\nIn Svelte, you update local component state with an assignment operator:\n\n```js\nlet count = 0;\n\nfunction increment() {\n\tcount += 1;\n}\n```\n\nIn React, we use the `useState` hook:\n\n```js\n// @noErrors\nconst [count, setCount] = useState(0);\n\nfunction increment() {\n\tsetCount(count + 1);\n}\n```\n\nThis is much _noisier_ \u2014 it expresses the exact same concept but with over 60% more characters. As you're reading the code, you have to do that much more work to understand the author's intent.\n\nIn Vue, meanwhile, we have a default export with a `data` function that returns an object literal with properties corresponding to our local state. Things lik",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2019-04-20-write-less-code.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "84e48107-c2d5-4ff4-95bd-a404928ded6b-1",
    "text": "---\ntitle: Svelte <3 TypeScript\ndescription: Typernetically enhanced web apps\nauthor: Orta Therox\nauthorURL: https://twitter.com/orta\n---\n\nIt's been by far the most requested feature for a while, and it's finally here: Svelte officially supports TypeScript.\n\nWe think it'll give you a much nicer development experience \u2014 one that also scales beautifully to larger Svelte code bases \u2014 regardless of whether you use TypeScript or JavaScript.\n\n<figure>\n\t<img alt=\"Screenshot of TypeScript in Svelte\" src=\"/media/svelte-ts.png\">\n\t<figcaption>Image of TypeScript + Svelte in VS Code (theme is <a href=\"https://marketplace.visualstudio.com/items?itemName=karyfoundation.theme-karyfoundation-themes\">Kary Pro</a>.)</figcaption>\n</figure>\n\n## Try it now\n\nYou can start a new Svelte TypeScript project using Svelte's official scaffolding CLI by running `npm create svelte@latest` and following the prompts. This sets up a new SvelteKit project for you.\n\nAlternatively you can run `npm create vite@latest myapp -- --template svelte-ts` to scaffold a Vite project using Svelte and TypeScript.\n\nIf you're a VS Code user, make sure you're using the (new) [official extension](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode), which replaces the popular extension by James Birtles.\nLater in this blog post, we'll detail the individual steps involved in using TypeScript in an existing Svelte project.\n\n## What does it mean to support TypeScript in Svelte?\n\nTypeScript support in Svelte has been possible for a long time, but you had to mix a lot of disparate tools together and each project ran independently. Today, nearly all of these tools live under the Svelte organization and are maintained by a set of people who take responsibility over the whole pipeline and have common goals.\n\nA week before COVID was declared a pandemic, [I pitched a consolidation](https://github.com/sveltejs/svelte/issues/4518) of the best Svelte tools and ideas from similar dev-ecosystems and provided a set of steps to get first class TypeScript support. Since then, many people have pitched in and written the code to get us there.\n\nWhen we say that Svelte now supports TypeScript, we mean a few different things:\n\n- You can use TypeScript inside your `<script>` blocks \u2014 just add the `lang=\"ts\"` attribute\n- Components with TypeScript can be type-checked with the `svelte-check` command\n- You get autocompletion hints and type-checking as you're writing components, even in expressions inside markup\n- TypeScript files understand the Svelte component API \u2014 no more red squiggles when you import a `.svelte` file into a `.ts` module\n\n### How does it work?\n\nTo understand the two main parts of TypeScript support, we'll compare it to the technique TypeScript uses to provide dev tools. There is a compiler `tsc` which you run on the command-line to convert `*.ts` to `*.js`, then there is a `TSServer` which is a node API that responds to requests from text editors. The `TSServer` is what provides all th",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-07-17-svelte-and-typescript.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "84e48107-c2d5-4ff4-95bd-a404928ded6b-2",
    "text": " `tsc` which you run on the command-line to convert `*.ts` to `*.js`, then there is a `TSServer` which is a node API that responds to requests from text editors. The `TSServer` is what provides all the JavaScript and TypeScript realtime introspection for editors while coding, and it has most of the compiler's code inside it.\n\nFor Svelte, we have the Svelte compiler, and now we have the [`svelte-language-server`](https://github.com/sveltejs/language-tools/tree/master/packages/language-server#svelte-language-server) which responds to text editor calls via the [Language Server Protocol standard](https://microsoft.github.io//language-server-protocol/overviews/lsp/overview/). First class TypeScript support means that _both_ of these two systems do a good job of handling TypeScript code.\n\nThe Svelte compiler support for TypeScript is handled by [Christian Kaisermann](https://github.com/kaisermann)'s [`svelte-preprocess`](https://github.com/sveltejs/svelte-preprocess#svelte-preprocess) which is now an official Svelte project.\n\nFor the editor level, we took inspiration from [Pine's](https://github.com/octref) work in the [Vue](https://vuejs.org) ecosystem via [Vetur](https://github.com/vuejs/vetur). Vetur provides an [LSP](https://github.com/vuejs/vetur/blob/master/server), a VS Code extension and a [CLI](https://github.com/vuejs/vetur/blob/master/vti). Svelte now also has an [LSP](https://github.com/sveltejs/language-tools/blob/master/packages/language-server), a [VS Code extension](https://github.com/sveltejs/language-tools/blob/master/packages/svelte-vscode) and a [CLI](https://github.com/sveltejs/language-tools/blob/master/packages/svelte-check).\n\n### `*.svelte` Introspection\n\nFor the official Svelte VS Code extension, we built off the foundations which [James Birtles](https://github.com/UnwrittenFun) has created in [`UnwrittenFun/svelte-vscode`](https://github.com/UnwrittenFun/svelte-vscode) and [`UnwrittenFun/svelte-language-server`](https://github.com/UnwrittenFun/svelte-language-server/).\n\n[Simon Holthausen](https://github.com/dummdidumm) and [Lyu, Wei-Da](https://github.com/jasonlyu123) have done great work improving the JavaScript and TypeScript introspection, including integrating [@halfnelson](https://github.com/halfnelson)'s [svelte2tsx](https://github.com/sveltejs/language-tools/tree/master/packages/svelte2tsx#svelte2tsx) which powers understanding the props on components in your codebase.\n\n## Adding TypeScript to an existing project\n\nBefore getting started, add the dependencies:\n\n```bash\nnpm install --save-dev @tsconfig/svelte typescript svelte-preprocess svelte-check\n```\n\n### 1. Compiling TypeScript\n\nYou first need to set up [`svelte-preprocess`](https://github.com/sveltejs/svelte-preprocess#svelte-preprocess), which passes the contents of your `<script lang=\"ts\">` blocks through the TypeScript compiler.\n\nIn a Rollup project, that would look like this \u2014 note that we also need to install `@rollup/plugin-typescript` so that Rollup can handl",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-07-17-svelte-and-typescript.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "84e48107-c2d5-4ff4-95bd-a404928ded6b-3",
    "text": "ur `<script lang=\"ts\">` blocks through the TypeScript compiler.\n\nIn a Rollup project, that would look like this \u2014 note that we also need to install `@rollup/plugin-typescript` so that Rollup can handle `.ts` files:\n\n```diff\n+ import autoPreprocess from 'svelte-preprocess';\n+ import typescript from '@rollup/plugin-typescript';\n\nexport default {\n  ...,\n  plugins: [\n    svelte({\n+       preprocess: autoPreprocess()\n    }),\n+   typescript({ sourceMap: !production })\n  ]\n}\n```\n\n[Full instructions for other environments here](https://github.com/sveltejs/svelte-preprocess#usage).\n\nTo configure TypeScript, you will need to create a `tsconfig.json` in the root of your project:\n\n```json\n{\n\t\"extends\": \"@tsconfig/svelte/tsconfig.json\",\n\n\t\"include\": [\"src/**/*\", \"src/node_modules\"],\n\t\"exclude\": [\"node_modules/*\", \"__sapper__/*\", \"public/*\"]\n}\n```\n\nYour `include`/`exclude` may differ per project \u2014 these are defaults that should work across most Svelte projects.\n\n### 2. Editor Support\n\nAny editor [using an LSP](https://langserver.org/#implementations-client) can be supported. The [VS Code](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode) extension has been our primary focus, but there is work in progress [on Atom](https://github.com/sveltejs/language-tools/pull/160), and Vim via [coc-svelte](https://github.com/coc-extensions/coc-svelte) has been updated with the latest LSP.\n\nThese editor extensions will improve your coding experience even if you only use JavaScript. The editor won't offer errors, but it will offer inference and refactoring tools. You can [add `// @ts-check`](https://www.staging-typescript.org/docs/handbook/intro-to-js-ts.html) to the top of a `<script>` tag using JavaScript to get better error messages with no infra changes.\n\nTo switch a `<script>` to use TypeScript, use `<script lang=\"ts\">` and that should be it. Hopefully you won't be seeing an ocean of red squiggles.\n\n### 3. CI Checks\n\nHaving red squiggles is great, well, kinda. On the long run though, you want to be able to verify that there are no errors in your code. To verify your project is error free, you can use the CLI tool [`svelte-check`](https://www.npmjs.com/package/svelte-check). It acts like an editor asking for errors against all of your `.svelte` files.\n\nYou can add the dependency to your project and then add it to CI.\n\n```bash\n\u276f npx svelte-check\n\nLoading svelte-check in workspace: /Users/ortatherox/dev/svelte/example-app\nGetting Svelte diagnostics...\n====================================\n\n/Users/ortatherox/dev/svelte/example-app/src/App.svelte:3:2\nError: Type '123' is not assignable to type 'string'. (ts)\n\n====================================\nsvelte-check found 1 error\nerror Command failed with exit code 1.\n```\n\n## What about TypeScript in Sapper projects?\n\nTypeScript support was added to Sapper in 0.28, so if you're using an older version be sure to [upgrade](https://sapper.svelte.dev/migrating#0_27_to_0_28).\n\n## How can I contribute?\n\nWe're so glad ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2020-07-17-svelte-and-typescript.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "d605c6d5-67ca-4e2f-b390-e217431b25b7-1",
    "text": "---\ntitle: The easiest way to get started with Svelte\ndescription: This'll only take a minute.\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\nSvelte is a [new kind of framework](/blog/frameworks-without-the-framework). Rather than putting a `<script src='svelte.js'>` tag on the page, or bringing it into your app with `import` or `require`, Svelte is a compiler that works behind the scenes to turn your component files into beautifully optimised JavaScript.\n\nBecause of that, getting started with it can be a little bit confusing at first. How, you might reasonably ask, do you make a Svelte app?\n\n## 1. Use the REPL\n\nThe [Svelte REPL](/repl) (Read-Eval-Print Loop) is the easiest way to begin. This is an interactive environment that allows you to modify code and instantly see the result.\n\nYou can choose from a list of [examples](/examples/), click the [REPL](/repl) link, and then tweak them until they do what you want.\n\n<aside><p>You'll need to have <a href=\"https://nodejs.org/\">Node.js</a> installed, and know how to use the terminal</p></aside>\n\nAt some point, your app will outgrow the REPL. Click the **download** button to save a `svelte-app.zip` file to your computer and uncompress it.\n\nOpen a terminal window and set the project up...\n\n```bash\ncd /path/to/svelte-app\nnpm install\n```\n\n...then start up a development server:\n\n```bash\nnpm run dev\n```\n\nThis will serve your app on [localhost:8080](http://localhost:8080) and rebuild it with [Rollup](https://rollupjs.org) every time you make a change to the files in `svelte-app/src`.\n\n## 2. Use degit\n\nWhen you download from the REPL, you're getting a customised version of the [sveltejs/template](https://github.com/sveltejs/template) repo. You can skip messing around with zip files by using [degit](https://github.com/Rich-Harris/degit), a project scaffolding tool.\n\nIn the terminal, you can instantly create a new project like so:\n\n```bash\nnpx degit sveltejs/template my-svelte-project\ncd my-svelte-project\n# to use TypeScript run:\n# node scripts/setupTypeScript.js\n\nnpm install\nnpm run dev\n```\n\nThis will create a new project in the `my-svelte-project` directory, install its dependencies, and start a server on http://localhost:8080.\n\nYou can find more information about using TypeScript [here](/blog/svelte-and-typescript).\n\nOnce you've tinkered a bit and understood how everything fits together, you can fork [sveltejs/template](https://github.com/sveltejs/template) and start doing this instead:\n\n```bash\nnpx degit your-name/template my-new-project\n```\n\nAnd that's it! Do `npm run build` to create a production-ready version of your app, and check the project template's [README](https://github.com/sveltejs/template/blob/master/README.md) for instructions on how to easily deploy your app to the web with [Vercel](https://vercel.com) or [Surge](http://surge.sh/).\n\nYou're not restricted to using Rollup \u2014 there are also integrations for [webpack](https://github.com/sveltejs/svelte-loader), [Browserify](h",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2017-08-07-the-easiest-way-to-get-started.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "6eaa3348-6f1e-44e6-8e7f-96a5fab86ea3-1",
    "text": "---\ntitle: \"What's new in Svelte: December 2022\"\ndescription: 'Rounding the corner to SvelteKit 1.0'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nSvelteKit 1.0 is just around the corner! With [99% of the milestone issues completed](https://github.com/sveltejs/kit/milestone/2), there's a lot of new changes from the last month to cover...\n\nLet's get to it!\n\n## What's new in SvelteKit\n\n- Use the `willUnload` property to find out if the navigation will result the app being unloaded (full page reload/closing/leaving to another page). ([#6813](https://github.com/sveltejs/kit/pull/6813))\n- `__data.json` requests now allows for caching while ensuring we cache matching responses for all invalidation scenarios ([#7532](https://github.com/sveltejs/kit/pull/7532))\n- Linking to `<a name=\"hash\">` tags is now supported ([#7596](https://github.com/sveltejs/kit/pull/7596))\n- Throwing redirects in the `handle` hook is now supported ([#7612](https://github.com/sveltejs/kit/pull/7612))\n- A fallback component will now be added automatically for layouts without one ([#7619](https://github.com/sveltejs/kit/pull/7619))\n- The new `preload` function within the `resolve` hook determines what files should be added to the <head> tag to preload it ([Docs](https://kit.svelte.dev/docs/hooks#server-hooks-handle), [#4963](https://github.com/sveltejs/kit/pull/4963), [#7704](https://github.com/sveltejs/kit/pull/7704))\n- `version` is now available via `$app/environment` ([#7689](https://github.com/sveltejs/kit/pull/7689), [#7694](https://github.com/sveltejs/kit/pull/7694))\n- `handleError` can now return a promise ([#7780](https://github.com/sveltejs/kit/pull/7780))\n\n**Breaking changes:**\n\n- `routeId` is now `route.id` ([#7450](https://github.com/sveltejs/kit/pull/7450))\n- 'load' has been renamed to 'enter' and 'unload' to 'leave' in the `beforeNavigate` and `afterNavigate` methods. `beforeNavigate` is now called once with type 'unload' on external navigation and will no longer run during redirects ([#7502](https://github.com/sveltejs/kit/pull/7502), [#7529](https://github.com/sveltejs/kit/pull/7529), [#7588](https://github.com/sveltejs/kit/pull/7588))\n- The `redirect` helper will now only allow status codes between 300-308 for redirects and only `error` status codes between 400-599 are allowed ([#7767](https://github.com/sveltejs/kit/pull/7767)) ([#7615](https://github.com/sveltejs/kit/pull/7615), [#7767](https://github.com/sveltejs/kit/pull/7767))\n- Special characters will now be encoded with hex/unicode escape sequences in route directory names ([#7644](https://github.com/sveltejs/kit/pull/7644))\n- devalue is now used to (de)serialize action data - this is only a breaking change for everyone who fetches the actions directly and doesn't go through `use:enhance` ([#7494](https://github.com/sveltejs/kit/pull/7494))\n- `trailingSlash` is now a page option, rather than configuration ([#7719](https://github.com/sveltejs/kit/pull/7719))\n- The client-side router now ignore",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-12-01-whats-new-in-svelte-december-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "6eaa3348-6f1e-44e6-8e7f-96a5fab86ea3-2",
    "text": "](https://github.com/sveltejs/kit/pull/7494))\n- `trailingSlash` is now a page option, rather than configuration ([#7719](https://github.com/sveltejs/kit/pull/7719))\n- The client-side router now ignores links outside `%sveltekit.body%` ([#7766](https://github.com/sveltejs/kit/pull/7766))\n- `prerendering` is now named `building`, and `config.kit.prerender.enabled` has been removed ([#7762](https://github.com/sveltejs/kit/pull/7762))\n- `getStaticDirectory()` has been removed from the builder API ([#7809](https://github.com/sveltejs/kit/pull/7809))\n- The `format` option has been removed from `generateManifest(...)` ([#7820](https://github.com/sveltejs/kit/pull/7820))\n- `data-sveltekit-prefetch` has been replaced with `-preload-code` and `-preload-data`, `prefetch` is now `preloadData` and `prefetchRoutes` is now `preloadCode` ([#7776](https://github.com/sveltejs/kit/pull/7776), [#7776](https://github.com/sveltejs/kit/pull/7776))\n- `SubmitFunction` has been moved from `$app/forms` into `@sveltejs/kit` ([#7003](https://github.com/sveltejs/kit/pull/7003))\n\n## New in Svelte\n\n- The css compiler options of `css: false` and `css: true` have been replaced with `'external' | 'injected' | 'none'` settings to speed up compilation for `ssr` builds and improve clarity (**3.53.0**)\n\nFor all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Appwrite's new console](https://github.com/appwrite/console) makes its secure backend server for web, mobile & Flutter developers available in the browser\n- [RepoMagic](https://www.repomagic.com/) is a search and analytics tool for GitHub\n- [Podman Desktop](https://github.com/containers/podman-desktop) is a graphical tool for developing on containers and Kubernetes\n- [Ballerine](https://github.com/ballerine-io/ballerine) is a Know Your Customer (KYC) UX for any vertical or geography using modular building blocks, components, and 3rd party integrations\n- [Budget Pen](https://github.com/Nico-Mayer/budget_pen) is a Codepen-like browser code editor with Tailwind included\n- [doTogether](https://github.com/SarcevicAntonio/doTogether) helps you keep track of stuff you have get done via a List of recurring Tasks\n- [Webscraped College Results](https://www.redditcollegeresults.com/) is a collection of visualizations for data from r/collegeresults\n- [Let's premortem](https://letspremortem.com/) helps avoid lengthy, frustrating post-mortems after a project fails\n- [BLKMARKET.COM](https://beta.blkmarket.com/) is an illustration library for commercial and personal use\n- [Sigil](https://sigilspace.com/) is a canvas for anything with spaces organized by the most-voted content\n- [corpus-activity-streams](https://github.com/ryanatkn/corpus-activity-streams) is an unofficial ActivityStreams 2.0 vocabulary data set and alternative docs\n- [nodeMyAdmin](https://github.com/Andrea055",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-12-01-whats-new-in-svelte-december-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "6eaa3348-6f1e-44e6-8e7f-96a5fab86ea3-3",
    "text": "corpus-activity-streams](https://github.com/ryanatkn/corpus-activity-streams) is an unofficial ActivityStreams 2.0 vocabulary data set and alternative docs\n- [nodeMyAdmin](https://github.com/Andrea055/nodeMyAdmin) is an alternative to phpMyAdmin written with SvelteKit\n- [Image to Pattern Conversion](https://www.thread-bare.com/convert) is a cross-stitch pattern conversion tool with [a list of pre-made patterns](https://www.thread-bare.com/store) to start with\n- [Verbums](https://verbums.vdoc.dev/) is an English vocabulary trainer to improve language comprehension\n- [SVGPS](https://svgps.app/) removes the burden of working with a cluster of SVG files by converting your icons into a single JSON file\n- [This 3D retro-themed asteroid shooter](https://photon-alexwarnes.vercel.app/showcase/asteroids) was made with threlte\n\n**Learning Resources**\n\n_To Hear_\n\n- [Catching up after Svelte Summit](https://www.svelteradio.com/episodes/catching-up) and [3D, WebGL and AI](https://www.svelteradio.com/episodes/3d-webgl-and-ai) by Svelte Radio\n\n_To Watch_\n\n- [Domenik Reitzner - The easy way, an introduction to Sveltekit](https://www.youtube.com/watch?v=t-LKRrNedps) from Svelte Society Vienna\n- [Sirens: Form Actions](https://www.youtube.com/watch?v=2OISk5-EHek) - Kev joins the Sirens again to chat about Form actions in SvelteKit and create a new form for speaker submissions on SvelteSirens.dev\n- [Introduction To 3D With Svelte (Threlte)](https://www.youtube.com/watch?v=89LYeHOncVk), [How To Use Global Styles In SvelteKit](https://www.youtube.com/watch?v=jHSwChkx3TQ) and [Progressive Form Enhancement With SvelteKit](https://www.youtube.com/watch?v=6pv70d7i-3Q) by Joy of Code\n\n_To Read_\n\n- [Building tic-tac-toe with Svelte](https://geoffrich.net/posts/tic-tac-toe/) by Geoff Rich\n- [Speed up SvelteKit Pages With a Redis Cache](https://www.captaincodeman.com/speed-up-sveltekit-pages-with-a-redis-cache) by Captain Codeman\n- [Understanding environment variables in SvelteKit](https://www.okupter.com/blog/environment-variables-in-sveltekit), [Form validation with SvelteKit and Zod](https://www.okupter.com/blog/sveltekit-form-validation-with-zod) and [Build a SvelteKit application with Docker](https://www.okupter.com/blog/build-a-sveltekit-application-with-docker) by Justin Ahinon\n- [Why I failed to create the \"Solid.js's store\" for Svelte, and announcing svelte-store-tree v0.3.1](https://dev.to/igrep/why-i-failed-to-create-the-solidjss-store-for-svelte-and-announcing-svelte-store-tree-v031-1am2) by YAMAMOTO Yuji\n- [Create an offline-first and installable PWA with SvelteKit and workbox-precaching](https://www.sarcevic.dev/offline-first-installable-pwa-sveltekit-workbox-precaching) by Antonio Sarcevic\n\n**Libraries, Tools & Components**\n\n- [Skeleton](https://www.skeleton.dev/) is a UI toolkit to build fast and reactive web interfaces using Svelte + Tailwind CSS\n- [svelte-svg-spinners](https://github.com/luluvia/svelte-svg-spinners) is a collection of SVG Spinners components\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-12-01-whats-new-in-svelte-december-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "130e6c8e-56f8-4b1d-b0cc-5698089c7b04-1",
    "text": "---\ntitle: Svelte v2 is out!\ndescription: Here's what you need to know\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\n<aside>Our motto is 'move slowly and break things'. No, wait, that came out wrong...</aside>\n\nAlmost a year after we first started talking about version 2 on the Svelte issue tracker, it's finally time to make some breaking changes. This blog post will explain what changed, why it changed, and what you need to do to bring your apps up to date.\n\n## tl;dr\n\nEach of these items is described in more depth below. If you get stuck, ask for help in our friendly [Discord chatroom](https://svelte.dev/chat).\n\n- Install Svelte v2 from npm\n- Upgrade your templates with [svelte-upgrade](https://github.com/sveltejs/svelte-upgrade)\n- Remove calls to `component.observe`, or add the `observe` method from [svelte-extras](https://github.com/sveltejs/svelte-extras)\n- Rewrite calls to `component.get('foo')` as `component.get().foo`\n- Return `destroy` from your custom event handlers, rather than `teardown`\n- Make sure you're not passing numeric string props to components\n\n## New template syntax\n\nThe most visible change: we've made some improvements to the template syntax.\n\nA common piece of feedback we heard was 'ewww, Mustache' or 'ewww, Handlebars'. A lot of people who used string-based templating systems in a previous era of web development _really_ dislike them. Because Svelte adopted the `{{curlies}}` from those languages, a lot of people assumed that we somehow shared the limitations of those tools, such as weird scoping rules or an inability to use arbitrary JavaScript expressions.\n\n<aside>If you need to show an actual `{` character, it's as easy as `&amp;#123;`</aside>\n\nBeyond that, JSX proved that double curlies are unnecessary. So we've made our templates more... svelte, by adopting single curlies. The result feels much lighter to look at and is more pleasant to type:\n\n```svelte\n<h1>Hello {name}!</h1>\n```\n\nThere are a few other updates. But you don't need to make them manually \u2014 just run [svelte-upgrade](https://github.com/sveltejs/svelte-upgrade) on your codebase:\n\n```bash\nnpx svelte-upgrade v2 src\n```\n\nThis assumes any `.html` files in `src` are Svelte components. You can specify whichever directory you like, or target a different directory \u2014 for example, you'd do `npx svelte-upgrade v2 routes` to update a [Sapper](https://sapper.svelte.technology) app.\n\nTo see the full set of changes, consult the [svelte-upgrade README](https://github.com/sveltejs/svelte-upgrade#svelte-v2-syntax-changes).\n\n## Computed properties\n\nAnother thing that people often found confusing about Svelte is the way computed properties work. To recap, if you had a component with this...\n\n```ts\n// @noErrors\nexport default {\n\tcomputed: {\n\t\td: (a, b, c) => (a = b + c)\n\t}\n};\n```\n\n...then Svelte would first look at the function arguments to see which values `d` depended on, and then it would write code that updated `d` whenever those values changed, by inje",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2018-04-18-version-2.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "130e6c8e-56f8-4b1d-b0cc-5698089c7b04-2",
    "text": " = b + c)\n\t}\n};\n```\n\n...then Svelte would first look at the function arguments to see which values `d` depended on, and then it would write code that updated `d` whenever those values changed, by injecting them into the function. That's cool, because it allows you to derive complex values from your component's inputs without worrying about when they need to recomputed, but it's also... _weird_. JavaScript doesn't work that way!\n\nIn v2, we use [destructuring](http://www.jstips.co/en/javascript/use-destructuring-in-function-parameters/) instead:\n\n```ts\n// @noErrors\nexport default {\n\tcomputed: {\n\t\td: ({ a, b, c }) => (a = b + c)\n\t}\n};\n```\n\nThe Svelte compiler can still see which values `d` depends on, but it's no longer injecting values \u2014 it just passes the component state object into each computed property.\n\nAgain, you don't need to make this change manually \u2014 just run svelte-upgrade on your components, as shown above.\n\n## Sorry, IE11. It's not you, it's... well actually, yeah. It's you\n\nSvelte v1 was careful to only emit ES5 code, so that you wouldn't be forced to faff around with transpilers in order to use it. But it's 2018 now, and almost all browsers support modern JavaScript. By ditching the ES5 constraint, we can generate leaner code.\n\nIf you need to support IE11 and friends, you will need to use a transpiler like [Babel](https://babeljs.io/repl) or [Bubl\u00e9](https://buble.surge.sh/).\n\n## New lifecycle hooks\n\nIn addition to `oncreate` and `ondestroy`, Svelte v2 adds two more [lifecycle hooks](https://v2.svelte.dev/guide#lifecycle-hooks) for responding to state changes:\n\n```js\n// @noErrors\nexport default {\n\tonstate({ changed, current, previous }) {\n\t\t// this fires before oncreate, and\n\t\t// whenever state changes\n\t},\n\n\tonupdate({ changed, current, previous }) {\n\t\t// this fires after oncreate, and\n\t\t// whenever the DOM has been updated\n\t\t// following a state change\n\t}\n};\n```\n\nYou can also listen to those events programmatically:\n\n```js\n// @noErrors\ncomponent.on('state', ({ changed, current, previous }) => {\n\t// ...\n});\n```\n\n## component.observe\n\nWith the new lifecycle hooks, we no longer need the `component.observe(...)` method:\n\n```js\n// @noErrors\n// before\nexport default {\n\toncreate() {\n\t\tthis.observe('foo', foo => {\n\t\t\tconsole.log(`foo is now ${foo}`);\n\t\t});\n\t}\n};\n\n// after\nexport default {\n\tonstate({ changed, current }) {\n\t\tif (changed.foo) {\n\t\t\tconsole.log(`foo is now ${current.foo}`);\n\t\t}\n\t}\n};\n```\n\nThis shrinks the amount of code Svelte needs to generate, and gives you more flexibility. For example, it's now very easy to take action when any one of _several_ properties have changed, such as redrawing a canvas without debouncing several observers.\n\nHowever, if you prefer to use `component.observe(...)`, then you can install it from [svelte-extras](https://github.com/sveltejs/svelte-extras):\n\n```js\n// @noErrors\nimport { observe } from 'svelte-extras';\n\nexport default {\n\tmethods: {\n\t\tobserve\n\t}\n};\n```\n\n## component.get\n\nThis method no longer ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2018-04-18-version-2.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "df11a57a-f5c2-44c3-8432-dc28dbce2648-1",
    "text": "---\ntitle: \"What's new in Svelte: September 2022\"\ndescription: \"Migrating to SvelteKit's new filesystem-based router\"\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nStill looking for something to do this month? It's your last chance to get tickets to Svelte Summit, Stockholm! [Join us on Sept 8-9th](https://www.sveltesummit.com/) \ud83c\udf89\n\nWith the redesign of SvelteKit's filesystem-based router merging early last month, there's lots to cover this month - from the [migration script](https://github.com/sveltejs/kit/discussions/5774) to a number of new blog posts, videos and tutorials.\n\nBut the new routing isn't the only new feature in SvelteKit...\n\n## What's new in SvelteKit\n\n- `Link` is now supported as an HTTP header and works out of the box with Cloudflare's [Automatic Early Hints](https://github.com/sveltejs/kit/issues/5455) (**1.0.0-next.405**, [PR](https://github.com/sveltejs/kit/pull/5735))\n- `$env/static/*` are now virtual to prevent writing sensitive values to disk (**1.0.0-next.413**, [PR](https://github.com/sveltejs/kit/pull/5825))\n- `$app/stores` can now be used from anywhere on the browser (**1.0.0-next.428**, [PR](https://github.com/sveltejs/kit/pull/6100))\n- `config.kit.env.dir` is a new config that sets the directory to search for `.env` files (**1.0.0-next.430**, [PR](https://github.com/sveltejs/kit/pull/6175))\n\n**Breaking changes:**\n\n- The filesystem-based router and `load` API improves the way routes are managed. **Before installing version `@sveltejs/kit@1.0.0-next.406` or later, [follow this migration guide](https://github.com/sveltejs/kit/discussions/5774)** ([PR](https://github.com/sveltejs/kit/pull/5778), [Issue](https://github.com/sveltejs/kit/discussions/5748))\n- `event.session` has been removed from `load` along with the `session` store and `getSession`. Use `event.locals` instead (**1.0.0-next.415**, [PR](https://github.com/sveltejs/kit/pull/5946))\n- Named layouts have been removed in favor of `(groups)` (**1.0.0-next.432**, [Docs](https://kit.svelte.dev/docs/advanced-routing#advanced-layouts), [PR & Migration Instructions](https://github.com/sveltejs/kit/pull/6174))\n- `event.clientAddress` is now `event.getClientAddress()` (**1.0.0-next.438**, [PR](https://github.com/sveltejs/kit/pull/6237))\n- `$app/env` has been renamed to `$app/environment`, to disambiguate with `$env/...` (**1.0.0-next.445**, [PR](https://github.com/sveltejs/kit/pull/6334))\n\nFor a full list of changes, check out kit's [CHANGELOG](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md).\n\n**Updates to language tools**\n\n- TypeScript doesn't resolve imports to SvelteKit's $types very well, the latest version of Svelte's language tools makes it better (**105.21.0**, [#1592](https://github.com/sveltejs/language-tools/pull/1592))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [canno](https://twitter.com/a_warnes/status/1556724034959818754?s=20&t=RyKWALPByqMT5A_PkLtUew) is a simple interactive 3d physics game with ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-09-01-whats-new-in-svelte-september-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "df11a57a-f5c2-44c3-8432-dc28dbce2648-2",
    "text": "# Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [canno](https://twitter.com/a_warnes/status/1556724034959818754?s=20&t=RyKWALPByqMT5A_PkLtUew) is a simple interactive 3d physics game with adjustable gravity, cannon power, and debug visualizer - made with threlte\n- [straw.page](https://straw.page/) is an extremely simple website builder that lets you create unique websites straight from your phone\n- [Patra](https://patra.webjeda.com/) lets you share short notes just with a link. No database. No storage\n- [promptoMANIA](https://promptomania.com/) is an AI art community with an online prompt builder\n- [Album by Mood](https://www.albumbymood.com/) lets you listen to music based on your mood\n- [Daily Sumeiro](https://digivaux.com/sumeiro/daily/) is a daily game to test your math and logic skills\n- [Lofi and Games](https://www.lofiandgames.com/) - play relaxing, casual games right from your browser\n- [Pitch Pipe](https://github.com/joelgibson/pitch-pipe) is a digital pitch pipe with a frequency analyser and just-intonation intervals\n- [classes.wtf](https://github.com/ekzhang/classes.wtf) is a custom, distributed search engine written in Go and Svelte to make searching for Harvard courses much quicker than the standard course catalog\n- [Scrumpack](https://scrumpack.io/) is a set of tools to help agile/scrum teams with their ceremonies like Planning Poker and Retrospectives\n\n**Learning Resources**\n\n_Starring the Svelte team_\n\n- [Supper Club \u00d7 Rich Harris, Author of Svelte \u2014 Syntax Podcast 499](https://syntax.fm/show/499/supper-club-rich-harris-author-of-svelte)\n- [Let's talk routing with Rich Harris on Svelte Radio](https://www.svelteradio.com/episodes/lets-talk-routing-with-rich-harris)\n- [2.17 - Building the Future of Svelte at Vercel with Rich Harris](https://www.youtube.com/watch?v=F1sSUDVoij4)\n- [1.15 - What's Up With SvelteKit with Shawn Wang (swyx)](https://www.youtube.com/watch?v=xLhuUShkYkM)\n- [Adding Notion Tailwindcss and DaisyUI to Svelte App](https://www.youtube.com/watch?v=l4sbqrY0XGk)\n- [Svelte 101 Session](https://www.youtube.com/watch?v=IIeBERpyxx4)\n- [Astro and Svelte](https://www.youtube.com/watch?v=iYKKg-50Gm4)\n- [Storyblok in Svelte](https://www.youtube.com/watch?v=xXHFRzqUxoE)\n- [Svelte London August Recording](https://www.youtube.com/watch?v=ua6gE2zPulw)\n\n_Learning the new SvelteKit routing_\n\n- [Migrating Breaking Changes in SvelteKit](https://www.netlify.com/blog/migrating-breaking-changes-in-sveltekit/) by Brittney Postma (Netlify)\n- [Major Svelte Kit API Change - Fixing `load`, and tightening up SvelteKit's design before 1.0](https://www.youtube.com/watch?v=OUGn7VifUCg) - Video by LevelUpTuts\n- [SvelteKit Is Never Going To Be The Same](https://www.youtube.com/watch?v=eVFcGA-15LA) - Video by Joy of Code\n- [Let's learn SvelteKit by building a static Markdown blog from scratch](https://joshcollinsworth.com/blog/build-static-sveltekit-markdown-blog) by Josh Collinsworth (updated Aug 26th to keep up with the new changes)\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-09-01-whats-new-in-svelte-september-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "df11a57a-f5c2-44c3-8432-dc28dbce2648-3",
    "text": "lteKit by building a static Markdown blog from scratch](https://joshcollinsworth.com/blog/build-static-sveltekit-markdown-blog) by Josh Collinsworth (updated Aug 26th to keep up with the new changes)\n\n_To Watch_\n\n- [Svelte Guide For React Developers](https://www.youtube.com/watch?v=uWDBEUkTRGk) and [Svelte State Management Guide](https://www.youtube.com/watch?v=4dDjQiOVrOo) by Joy of Code\n- [What Is Bookit? The Svelte Kit Storybook Killer](https://www.youtube.com/watch?v=aOBGhvggsq0) and [What Is @type{import In Svelte Kit - JSDoc Syntax](https://www.youtube.com/watch?v=y0DvJTVO65M) by LevelUpTuts\n- [TWF Yet another JS Framework... or not? Svelte!](https://www.youtube.com/watch?app=desktop&v=nT8QtDBIKZA) by TWF meetup\n\n_To Read_\n\n- [Creating a Figma Plugin with Svelte](https://www.lekoarts.de/javascript/creating-a-figma-plugin-with-svelte) by Lennart\n- [Svelte Video Blog: Vlog with Mux from your own SvelteKit Site](https://plus.rodneylab.com/tutorials/svelte-video-blog) and [Svelte Shy Header: Peekaboo Sticky Header with CSS](https://rodneylab.com/svelte-shy-header/) by Rodney Lab\n\n**Libraries, Tools & Components**\n\n- [@svelte-plugins/tooltips](https://github.com/svelte-plugins/tooltips) is a simple tooltip action and component designed for Svelte\n- [Lucia](https://github.com/pilcrowOnPaper/lucia-sveltekit) is a simple authentication library for SvelteKit that connects your SvelteKit app to your database\n- [remix-router-svelte](https://github.com/brophdawg11/remix-routers/tree/main/packages/svelte) is a Svelte implementation of the `react-router-dom` API (driven by `@remix-run/router`)\n- [MKRT](https://github.com/j4w8n/mkrt) is a CLI to help you create SvelteKit routes, fast\n- [Histoire](https://histoire.dev/guide/) is a tool to generate stories applications - scenarios where you showcase components for specific use cases\n- [sveltekit-flash-message](https://www.npmjs.com/package/sveltekit-flash-message) is a Sveltekit library that passes temporary data to the next request, usually from endpoints\n- [svelte-particles](https://github.com/matteobruni/tsparticles#svelte) is a lightweight TypeScript library for creating particles\n- [svelte-claps](https://github.com/bufgix/svelte-claps) adds clap button (like Medium) to any page for your SvelteKit apps\n- [Neon Flicker](https://svelte.dev/repl/fd5e3b2be7da42fe8afddf89661af7d7?version=3.49.0) is a Svelte component to make your text flicker in a cyberpunk style\n- [ComboBox](https://svelte.dev/repl/144f22d18c6943abb1fdd00f13e23fde?version=3.49.0) is a search input to help users select from a large list of items\n- [@svelte-put](https://github.com/vnphanquang/svelte-put) is useful svelte stuff to put in your projects\n- [vite-plugin-svelte-bridge](https://github.com/joshnuss/vite-plugin-svelte-bridge) lets you write Svelte components and use them from React & Vue\n\n_UI Kits and Starters_\n\n- [Svelte-spectre](https://github.com/basf/svelte-spectre) is a UI-kit based on spectre.css and powered by Svelte\n- [Skeleto",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-09-01-whats-new-in-svelte-september-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f93d5df1-fc81-485d-9cd0-81936e47c566-1",
    "text": "---\ntitle: \"What's new in Svelte: May 2023\"\ndescription: 'New Ambassadors, a new ESLint plugin and a whole bunch of SvelteHack submissions'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nBefore we dive into the updates, there's a few announcements worth mentioning at the top:\n\n## New Svelte Ambassadors\n\nRegular features of this newsletter and all-around great content creators for Svelte [JoyOfCode](https://www.youtube.com/@JoyofCodeDev) and [HuntaByte](https://www.youtube.com/@Huntabyte) have been appointed as Svelte Ambassadors. Ambassadors are people who are well known for their helpfulness and contributions and for upholding Svelte\u2019s reputation as a friendly, welcoming community, and we\u2019re deeply grateful for their involvement!\n\n## SvelteHack winners will be announced May 6th\n\nIn a just a few days, we'll find out who won [SvelteHack](https://hack.sveltesociety.dev/) - the Svelte Hackathon that took place between February 17th and April 17th. Tune in to [Svelte Summit](https://www.sveltesummit.com/) on May 6th to see if your favorite project was chosen \ud83d\udc40\n\nLots of submissions to the hackathon are featured in this month's showcase... but first, let's see what's new!\n\n## What's new in Svelte\n\n- `style` blocks now support CSS `@container` queries (**3.58.0**)\n- `bind:innerText` is now available for `contenteditable` elements (**3.58.0**)\n- A new accessability warning, `a11y-interactive-supports-focus` will now warn when interactive elements are not focusable (**3.58.0**)\n\nFor all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## What's new in SvelteKit\n\n- When hot module reloading (HMR) is enabled, the page will reload after an error is fixed (**1.14.0**, [#9497](https://github.com/sveltejs/kit/pull/9497))\n- Two apps loaded into the same html page can now be loaded simultaneously in \"embedded\" mode (**1.15.7**, [#9610](https://github.com/sveltejs/kit/pull/9610))\n- Vite's compilation will now log warnings for packages that use the `svelte` field to resolve Svelte files differently than standard Vite resolve (**vite-plugin-svelte@2.1.0**, **kit@1.15.8**)\n\n## What's new in Language Tools\n\n- Support for `<svelte:document>` ([#1958](https://github.com/sveltejs/language-tools/pull/1958)) and intellisense report for new bindings ([#1957](https://github.com/sveltejs/language-tools/pull/1957)) (**107.3.0**)\n- The new fix-all menu option for the \"Quick fix...\" makes it easy to \"Add all missing imports\" and other detected errors (**107.3.0**, [#1939](https://github.com/sveltejs/language-tools/pull/1939))\n- We have a new and better official [ESLint plugin](https://github.com/sveltejs/eslint-plugin-svelte)! Previous support for Svelte in ESLint did not handle the template AST well, resulting in false positive/negatives and a high barrier to custom ESLint rules. This new official version is based on [ota-meshi](https://github.com/ota-meshi)'",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-05-01-whats-new-in-svelte-may-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f93d5df1-fc81-485d-9cd0-81936e47c566-2",
    "text": " did not handle the template AST well, resulting in false positive/negatives and a high barrier to custom ESLint rules. This new official version is based on [ota-meshi](https://github.com/ota-meshi)'s [svelte-eslint-parser](https://github.com/sveltejs/svelte-eslint-parser) and is ready for prime time. Try it out and [share your feedback](https://github.com/sveltejs/eslint-plugin-svelte/issues)!\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [Sound of War](https://soundofwar.art/) is a storytelling data visualization project to help understand the scale of destruction in Ukraine\n- [Syntax FM's swag shop](https://swag.syntax.fm/) is now built with SvelteKit, PlanetScale and Prisma\n- [Appreciation Jar](https://appreciation.place/) is your own private space where you can send encouraging and appreciative messages to your partner\n- [Japanese Jouzu](https://jp-jouzu.netlify.app/) is a Japanese sound and symbol learning app\n- [MarkMyImages](https://www.markmyimages.com/) is a tool to bulk watermark, image resize, rename, effects, and more - all on-device for speed and privacy\n- [Immich](https://github.com/immich-app/immich) is a self-hosted photo and video backup solution directly from your mobile phone\n- [Earbetter](https://github.com/ryanatkn/earbetter) is an ear training game and tools for playing and programming music and audio\n- [Tune Twisters](https://tune-twisters.vercel.app/) is a guessing game for songs... in reverse\n- [ResponseHunt](https://www.responsehunt.com/) is a mystery game based on browser requests - use your programming skills to get to the \u201cgolden\u201d response\n- [Wolfensvelte 3D](https://github.com/snuffyDev/Wolfensvelte-3D/) is a Svelte \"port\" of Wolfenstein 3D\n- [Code Solving](https://code-svelte.vercel.app/) teaches how to solve problems with code\n- [Make Bookmarklets](https://make-bookmarklets.com/) is a quick way to create JavaScript bookmarklets with linting, intellisense and auto-minification\n- [GeniePM](https://genie.pm) is an AI tool to help Product Managers write user stories and requirements\n- [Bitesized News](https://bitesized.news/) is an AI that delivers news digests and responds to questions via chat\n- [Open Tunings](https://www.open-tunings.com/) is a place to explore alternative guitar tunings without having to retune your guitar\n- [BlinkSMS](https://blinksms.se/#) is a text alert tool for Stockholm Student Housing to help with booking laundry times\n- [Dev Links](https://github.com/killswitchh/dev-links) helps dev showcase multiple links in a single place - similar to Linktree and Kofi\n- [Audiogest](https://audiogest.app/) is a tool to convert speech to text & summarize any audio\n- [MineSweep](https://alecames.com/minesweep) is a rendition of Minesweeper built with Svelte and JavaScript\n- [Biolytics](https://biolytics.app/) lets you import your lab tests to see all your lab tests in one place\n- [Zero share](https://github.com/ntsd/zero-share) is a secure P2P file sharing using WebRTC\n- [Svelte lab](",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-05-01-whats-new-in-svelte-may-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "f93d5df1-fc81-485d-9cd0-81936e47c566-3",
    "text": "tps://biolytics.app/) lets you import your lab tests to see all your lab tests in one place\n- [Zero share](https://github.com/ntsd/zero-share) is a secure P2P file sharing using WebRTC\n- [Svelte lab](https://www.sveltelab.dev/) is a sandbox for creating and sharing SvelteKit projects\n\n**Learning Resources**\n\n_Featuring Svelte Contributors and Ambassadors_\n\n- [Dev Vlog: April 2023 - TypeScript vs JSDoc, Transitions API, Dominic Gannaway joins Svelte team](https://www.youtube.com/watch?v=MJHO6FSioPI)\n- [Rich Harris on frameworks, the web, and the edge.](https://www.youtube.com/watch?v=uXCipjbcQfM) from Vercel's Svelte Meetup in NYC\n- [Svelte & SvelteKit](https://frontendmasters.com/workshops/svelte-sveltekit/) taught by Rich Harris on Frontend Masters\n- This Week in Svelte:\n  - [2023 March 31 - SvelteKit, Svelte; static sites and headless CMS demos](https://www.youtube.com/watch?v=-YjLubiieYs)\n  - [2023 April 22 - SvelteKit 1.15.7, skip links, error handling, static assets](https://www.youtube.com/watch?v=SCMosMo85_8)\n  - [2023 April 14 - SvelteKit 1.15.5, accessible buttons, advanced toggle state \ud83e\uddea\ud83d\udd25](https://www.youtube.com/watch?v=H2kOO5mvUQs)\n  - [2023 April 21 - SvelteKit 1.15.7, skip links, error handling, static assets](https://www.youtube.com/watch?v=SCMosMo85_8)\n- Svelte Radio\n  - [Using Svelte in React with Puru Vijay](https://www.svelteradio.com/episodes/using-svelte-in-react-with-puru-vijay)\n  - [Eric Brehault and Nuclia](https://www.svelteradio.com/episodes/eric-brehault-and-nuclia)\n  - [Svelte at AppWrite with Alex Patterson](https://www.svelteradio.com/episodes/svelte-at-appwrite-with-alex-patterson)\n  - [Svelte in Research at Dartmouth with Wasita and Eshin](https://www.svelteradio.com/episodes/svelte-in-research-at-dartmouth-with-wasita-and-eshin)\n\n_To Watch_\n\n- [The Complete SvelteKit Course For Building Modern Web Apps](https://www.youtube.com/watch?v=MoGkX4RvZ38) and [Simple SvelteKit Page Transitions](https://www.youtube.com/watch?v=gkw1wFIXM_8) by Joy of Code\n- [Svelte For React Developers | Your Next JavaScript Framework?](https://www.youtube.com/watch?v=smqE0y0z0CA) by Cretezy\n- [Svelte & SvelteKit: The Complete Guide](https://www.udemy.com/course/svelte-and-sveltekit/?ranMID=39197&ranEAID=msYS1Nvjv4c&ranSiteID=msYS1Nvjv4c-oN6aTXp3jgDgUps8JCGxcg&LSNPUBID=msYS1Nvjv4c&utm_source=aff-campaign&utm_medium=udemyads) by Ali Alaa on Udemy\n- [ChatGPT-4 with SvelteKit \ud83e\udd16 Generative AI on the EDGE \ud83c\udf0d](https://www.youtube.com/watch?v=Uw5GZg96kD8) by Johnny Magrippis\n\n_To Read_\n\n- [Headless WordPress with GraphQL and SvelteKit](https://www.okupter.com/blog/headless-wordpress-graphql-sveltekit) and [How to fix the duplicate meta tags issue in SvelteKit](https://www.okupter.com/blog/sveltekit-fix-duplicate-metatags-issue) by Justin Ahinon\n- [How to setup tRPC in a SvelteKit project](https://raqueebuddinaziz.com/blog/how-to-setup-trpc-in-a-sveltekit-project/) by Raqueebuddin Aziz\n- [Better Data Visualizations with Svelte](https://www.newline.c",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-05-01-whats-new-in-svelte-may-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7ef4e776-0973-419d-a81f-98d067131eb1-1",
    "text": "---\ntitle: \"What's new in Svelte: March 2023\"\ndescription: 'SvelteHack, post-1.0 SvelteKit improvements and a huge showcase'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nMarch is _coming in hot_ with a number of essential features having been added to SvelteKit following its 1.0 launch. Check out [last week's blog post](https://svelte.dev/blog/streaming-snapshots-sveltekit) for more details.\n\nSvelte Society also launched [SvelteHack](https://hack.sveltesociety.dev/) last month with over $12,000 in prizes - calling all Svelte developers, new and old, to make something awesome before the April 17th deadline!\n\nAnd, if you haven't heard already, there's going to be another Svelte Summit! Head over to [SvelteSummit.com](https://www.sveltesummit.com/) and sign up for the newsletter to get updates about the next event \ud83d\udcec\n\nNow let's jump into this month's changes...\n\n## What's new in SvelteKit\n\n- `$app/paths` can now be used without an app - making things like component testing with Vitest, using Storybook, etc. easier (**1.4.0**, [#8838](https://github.com/sveltejs/kit/pull/8838))\n- Adapters can now be configured at the route level (**1.5.0**, [Docs](https://kit.svelte.dev/docs/page-options#config), [#8740](https://github.com/sveltejs/kit/pull/8740))\n- The new snapshot mechanism preserves ephemeral DOM state even after navigation and page reloads (**1.5.0**,[Docs](https://kit.svelte.dev/docs/snapshots), [#8710](https://github.com/sveltejs/kit/pull/8710))\n- `OPTIONS` are now available within the server method (**1.6.0**, [Docs](https://kit.svelte.dev/docs/routing#server), [#8731](https://github.com/sveltejs/kit/pull/8731))\n- Richer error messages have been added for invalid exports (**1.7.0**, [#9055](https://github.com/sveltejs/kit/pull/9055))\n- Streaming promises are now available for server load functions (**1.8.0**, [Docs](https://kit.svelte.dev/docs/load#streaming-with-promises), [#8901](https://github.com/sveltejs/kit/pull/8901))\n- A new configuration option, `preloadStrategy`, helps tune preloading to avoid import 'waterfalls' on certain browsers (**1.8.4**, [Docs](https://kit.svelte.dev/docs/configuration#output), [#9179](https://github.com/sveltejs/kit/pull/9179))\n- The new `paths.relative` option can control interpretation of `paths.assets` and `paths.base` (**1.9.0**, [Docs](https://kit.svelte.dev/docs/configuration#paths), [#9220](https://github.com/sveltejs/kit/pull/9220))\n\n## What's new in Svelte and Language Tools\n\n- The REPL on `svelte.dev` now supports the `exports` field in `package.json` ([#445](https://github.com/sveltejs/sites/pull/445))\n- The new Call Hierarchy feature lets you see where a function or a class is called and follow the call stack up (**extensions-107.1.0**, [#1889](https://github.com/sveltejs/language-tools/pull/1889))\n- `declarationMap` support has been added to the Svelte extension. Now \"go to definition\" on `.svelte` files will navigate to the source code when a library has declaration maps (**exten",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-01-whats-new-in-svelte-march-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7ef4e776-0973-419d-a81f-98d067131eb1-2",
    "text": "s/pull/1889))\n- `declarationMap` support has been added to the Svelte extension. Now \"go to definition\" on `.svelte` files will navigate to the source code when a library has declaration maps (**extensions-107.1.0**, [#1878](https://github.com/sveltejs/language-tools/pull/1878))\n- [TypeScript Inlay Hints](https://code.visualstudio.com/docs/typescript/typescript-editing#_inlay-hints) support is now available via the Svelte Extension. Enable them with `javascript.inlayHints.*` or `typescript.inlayHints.*` (**extensions-107.1.0**, [#1855](https://github.com/sveltejs/language-tools/pull/1855))\n\n\\*for all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [win32.run](https://github.com/ducbao414/win32.run) is a version of Windows XP in the browser - with a File System, programs, XP-style File Picker and Saver dialogs, 3rd-party programs, and more\n- [Svelte Radial Menu](https://github.com/tglide/svelte-radial-menu) is a radial menu experiment - based on [Rauno's radial menu](https://rauno.me/craft/radial-menu)\n- [apod color search](https://github.com/brycedorn/apod-color-search) lets you search for astronomy picture of the day (APO) photos by color\n- [SvHighlight](https://www.reddit.com/r/sveltejs/comments/10pvqfm/svhighlight_a_code_highlighter_for_sveltekit_and/) is a code highlighter for SvelteKit and TailwindCSS with blur and focus blocks\n- [Limey](https://limey.io/) lets you create beautiful one-page websites in minutes\n- [a/links](https://a-links.io/) is an extension for short, composable bookmarks\n- [Sprint Cards](https://sprint.cards) is a design challenge generator\n- [Plought](https://github.com/rossrobino/plought) is a tool to reduce noise in decision making\n- [ArcOS-Frontend](https://github.com/IzK-ArcOS/ArcOS-Frontend) is a rewrite of the Arc operating system's frontend in Svelte\n- [Poxi](https://poxi.page) is powering the user-made web with a drag-and-drop, drawable website editor that's easy to collaborate in\n- [demo-threlte-scroller-rocinante](https://twitter.com/a_warnes/status/1629235313808744449) is a \"scrolly telling\" proof-of-concept that combines svelte-sequence with Threlte\n- [Phonics + Stuff](https://www.phonicsandstuff.com/) is a set of resources for learning & teaching phonics\n\n**Learning Resources**\n\n_Featuring Svelte Contributors and Ambassadors_\n\n- [Streaming, snapshots, and other new features since SvelteKit 1.0](https://svelte.dev/blog/streaming-snapshots-sveltekit) by Geoff Rich (on the Svelte Blog)\n- [View Transition Experiments with Svelte](https://geoffrich.net/posts/view-transition-experiments/) and [Native Page Transitions in SvelteKit (updated for 2023)](https://geoffrich.net/posts/page-transitions-1/) by Geoff Rich\n- [Ron Au's story and how to be whimsical!](https://www.svelteradio.com/episodes/ron-aus-story-and-how-to-be-whimsical) by Svelte Radio\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-01-whats-new-in-svelte-march-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7ef4e776-0973-419d-a81f-98d067131eb1-3",
    "text": "(https://geoffrich.net/posts/page-transitions-1/) by Geoff Rich\n- [Ron Au's story and how to be whimsical!](https://www.svelteradio.com/episodes/ron-aus-story-and-how-to-be-whimsical) by Svelte Radio\n- [SvelteKit 1.0 with Rich Harris](https://podrocket.logrocket.com/sveltekit) by PodRocket\n- [Svelte Society Africa](https://twitter.com/SvelteAfrica/status/1620526757593116672?s=20) has formally launched!\n- [SvelteKit overview with Simon and Dominik](https://www.youtube.com/watch?v=CiOigf4FbNg) by Frontend RheinMain\n\n_To Watch or Hear_\n\n- [Delightful Web Development with SvelteKit](https://workshops.thisdot.co/learn/developing-with-sveltekit) is a workshop from This Dot Labs - taking place on April 13th.\n- [Have More Control Over Layouts With Group Layouts In SvelteKit](https://www.youtube.com/watch?v=9UpaKEVuErs) and [Learn SvelteKit Hooks Through 6 Examples](https://www.youtube.com/watch?v=Kzrz7GZ9pIg) by Joy of Code\n- [Svelte Kit Creating Popup Modals with Tailwind CSS](https://www.youtube.com/watch?v=qI4-q7SA7uM) and [SvelteKit: Creating Dynamic Tables with Tailwind CSS](https://www.youtube.com/watch?v=QqoYrdzoSSk) by Abdul Rehman 2050\n\n_To Read_\n\n- [Svelte Language Server Example](https://github.com/volarjs/svelte-language-tools) by VolarJS\n- [How I Made My App 2.4x Faster Switching to Svelte](https://blog.flotes.app/posts/flotes-2x-faster) by Erik Verduin\n- [Smooth Page Transitions with SvelteKit](https://www.philkruft.dev/blog/smooth-page-transitions-with-sveltekit/) and [How to Build a Static SvelteKit Site](https://www.philkruft.dev/blog/how-to-build-a-static-sveltekit-site/) by Phil Kruft\n- [Blazing fast PWAs with SEO power using SvelteKit and Ionic](https://ionic.io/blog/pwas-using-sveltekit-and-ionic) by Tommertom\n- [Svelte Stores Tutorial: Share Data Between Multiple Components](https://learnjavascripts.com/development/web-development/frameworks/svelte/svelte-stores-tutorial-share-data-between-multiple-components/) by Vincent Widerberg\n- [A Business Case for SvelteKit](https://elliscs.hashnode.dev/a-business-case-for-sveltekit) by Chris Ellis\n- [How to set up a new Svelte project with SvelteKit](https://www.inow.dev/how-to-set-up-a-new-svelte-project-with-sveltekit/) by Igor Nowosad\n- [How to type Events, Slots, and Props in Svelte](https://raqueebuddinaziz.com/blog/svelte-type-events-slots-and-props/) by Raqueebuddin Aziz\n- [Use TypeScript with SvelteKit and Supabase](https://blog.robino.dev/posts/supabase-sveltekit) by Ross Robino\n- [Invoking Svelte components from your Ember apps](https://dev.to/rajasegar/invoking-svelte-components-from-your-ember-apps-58h5) by Rajasegar Chandran\n- [Add a sitemap to your server side rendered SvelteKit website](https://www.okupter.com/blog/sitemap-server-side-rendered-sveltekit-website) and [State in URL: the SvelteKit approach](https://www.okupter.com/blog/state-in-url-the-sveltekit-approach) by Justin Ahinon\n- [Display crypto data real-time in a chart using Sveltekit, Chart.js & coincap.io](https://",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-01-whats-new-in-svelte-march-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7ef4e776-0973-419d-a81f-98d067131eb1-4",
    "text": " the SvelteKit approach](https://www.okupter.com/blog/state-in-url-the-sveltekit-approach) by Justin Ahinon\n- [Display crypto data real-time in a chart using Sveltekit, Chart.js & coincap.io](https://medium.com/@Heesel/display-crypto-data-real-time-in-a-chart-using-sveltekit-chart-js-coincap-io-70b90d3aac90) by Hessel\n\n**Libraries, Tools & Components**\n\n_UI Kits and Components_\n\n- [Pink](https://pink.appwrite.io/) is a framework agnostic design system from Appwrite\n- [quick-pick](https://github.com/arabisaldrin/quick-pick) is a simple search tool where you control the search catalog\n- [Grail UI](https://github.com/grail-ui/grail-ui) offers a set of component primitives, actions and utilities that help you build accessible and high quality Svelte applications faster, while providing a great developer experience\n- [svelte-image-comparison](https://www.npmjs.com/package/svelte-image-comparison) is a Svelte component to compare image or canvas elements\n- [simple-font-select](https://www.npmjs.com/package/simple-font-select) is a simple font select component that exposes all local fonts as CSS font families\n- [svelte-datatables-net](https://www.npmjs.com/package/svelte-datatables-net) is a Svelte component that turns data into an interactive HTML table\n- [svelte-flextable](https://github.com/Parazeya/svelte-flextable) is a toolkit for creating server-side processing datatable components with Svelte\n- [svelte-algolia-instantsearch](https://github.com/aymeric-giraudet/svelte-algolia-instantsearch) is a community-developed wrapper around [instantsearch.js](https://github.com/algolia/instantsearch) for Svelte\n- [svelte-deep-zoom](https://www.npmjs.com/package/svelte-deep-zoom) is a Svelte component to render interactive Deep Zoom images (tiled image pyramids)\n- [SVoast](https://github.com/gibbu/svoast) is a simple toast component for Svelte\n- [svelte-otp](https://github.com/K4UNG/svelte-otp) is a simple lightweight OTP input component for svelte\n- [trace-svelte](https://trace-svelte.vercel.app/) is a line by line highlighter for Svelte\n- [Svelte Auth UI](https://github.com/multiplehats/svelte-auth-ui) is a set of authentication components for Svelte\n- [KitDocs](https://github.com/svelteness/kit-docs) is a documentation integration for SvelteKit - a VitePress alternative for Svelte\n- [svelte-signature-pad](https://www.npmjs.com/package/svelte-signature-pad) is a Svelte action to capture smoothed signatures as SVG paths using the excellent [perfect-freehand](https://github.com/steveruizok/perfect-freehand) library\n\n_Helpers, Stores and Actions_\n\n- [SvelteKit-Document](https://github.com/barvian/sveltekit-document) is a tiny utility for SvelteKit that lets you change the `<html>`, `<head>`, and `<body>` tags from any page or layout - with full SSR support\n- [SvelteKit Form Data](https://github.com/stolinski/sk-form-data) is an automatic SvelteKit form data parser middleware\n- [sveltekit-superforms](https://github.com/ciscoheat/sveltekit-superforms) superchar",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-01-whats-new-in-svelte-march-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "7ef4e776-0973-419d-a81f-98d067131eb1-5",
    "text": "lteKit Form Data](https://github.com/stolinski/sk-form-data) is an automatic SvelteKit form data parser middleware\n- [sveltekit-superforms](https://github.com/ciscoheat/sveltekit-superforms) supercharges your SvelteKit forms with a bunch of quality of life features. Purports to be a \"powerhouse of a library\"\n- [Houdini](https://github.com/HoudiniGraphQL/houdini) - the \"disappearing\" GraphQL client for the SvelteKit - is now 1.0\n- [sveltekit-modal-langchain](https://github.com/semicognitive/sveltekit-modal-langchain) is an example SvelteKit project using [sveltekit-modal](https://github.com/semicognitive/sveltekit-modal), showing how easy it is to write Python endpoints in SvelteKit\n- [mdsvex-excerpt](https://www.npmjs.com/package/mdsvex-excerpt) allows you to show only a portion of document in certain layouts\n- [Svelte Action Balancer](https://www.npmjs.com/package/svelte-action-balancer) is a simple Svelte action that makes titles more readable\n- [svelte-object](https://github.com/Refzlund/svelte-object) helps create and maintain objects using components. Values are stores and can therefore be intuitively subscribed to and updated\n- [svelte-relative-time](https://www.npmjs.com/package/svelte-relative-time) is a tiny Svelte action and component to render relative times\n- [svelte-disable-preload](https://www.npmjs.com/package/svelte-disable-preload) is a simple action to apply no-op event listeners to an element that prevent the document-level SvelteKit event handlers being invoked\n- [SvelteKit Static Sitemap](https://github.com/tlaundal/sveltekit-static-sitemap) generates a sitemap.xml for your page during build\n- [svelte-intersection-observer-action](https://www.npmjs.com/package/svelte-intersection-observer-action) is a Svelte action for element position notifications using IntersectionObserver\n- [svelte-sequence](https://github.com/AlexWarnes/svelte-sequence) provides custom stores to compose tweened motion sequences over multiple steps\n- [@svelte-put/inline-svg](https://github.com/vnphanquang/svelte-put/tree/main/packages/actions/inline-svg) is a Svelte action for inlining dynamic SVGs (fetched from network)\n\n_Other cool tools_\n\n- [sveltekit-modal](https://github.com/semicognitive/sveltekit-modal) lets you write Python endpoints in SvelteKit using Modal\n- [svelte-kit-bot-block](https://www.npmjs.com/package/svelte-kit-bot-block) is a server hook to handle spam requests with SvelteKit\n- [Svelte Email](https://github.com/carstenlebek/svelte-email) lets you write and design email templates with Svelte and render them to HTML or plain text\n- [Inertia.js](https://github.com/inertiajs/inertia) lets you quickly build modern single-page React, Vue and Svelte apps using classic server-side routing and controllers\n- [svelte-adapter-bun](https://github.com/gornostay25/svelte-adapter-bun) is an adapter for SvelteKit apps that generates a standalone Bun server\n- [React in Svelte](https://github.com/frontline-hq/react-in-svelte) is a library that enables y",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-03-01-whats-new-in-svelte-march-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fbb1c0e8-7f6a-4743-9b1f-917323d87e98-1",
    "text": "---\ntitle: \"What's new in Svelte: August 2021\"\ndescription: Shadow DOM, export and await - oh my!\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nFrom The Changelog ([JS Party Ep. 182](https://changelog.com/jsparty/182)) to Svelte Radio (Episodes [29](https://share.transistor.fm/s/adc23e84) and [30](https://share.transistor.fm/s/6316622d)), it seems that folks couldn't help but talk about Svelte, this month! Also, shadow DOM support and new export and await functionality are new in Svelte.\n\n## New in Svelte\n\nJuly was the most active month for the Svelte core repo since late 2019 as we really worked to reduce the number of outstanding PRs and saw the release of Svelte 3.39.0, 3.40.0, and 3.41.0. Tons of bug fixes were added as well as the following new features:\n\n- The `|trusted` event modifier allows you to check if an event is trusted before it's called ([#6137](https://github.com/sveltejs/svelte/issues/6137))\n- The new `svelte/ssr` package to support work on improving SvelteKit SSR ([#6416](https://github.com/sveltejs/svelte/pull/6416))\n- A new `errorMode` compiler option to support improved preprocessing of TypeScript files ([#6194](https://github.com/sveltejs/svelte/pull/6194))\n- You can now specify a `ShadowRoot` as the `target` when creating a component - making it possible to render Svelte components inside the shadow DOM ([#5869](https://github.com/sveltejs/svelte/issues/5869))\n- The `export { ... } from` ([#2214](https://github.com/sveltejs/svelte/issues/2214)), `export let { ... } =` ([#5612](https://github.com/sveltejs/svelte/issues/5612)) and `{#await ... then/catch}` ([#6270](https://github.com/sveltejs/svelte/issues/6270)) syntaxes are all now supported in Svelte components\n\nFor a full list of features and bug fixes, check out the [Svelte changelog](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## SvelteKit Updates\n\n- `prerender.force` is now `prerender.onError` which lets you fine-tune which errors fail the build and which do not ([#2007](https://github.com/sveltejs/kit/pull/2007))\n- esbuild's configuration is now exposed for use with SvelteKit adapters ([#1914](https://github.com/sveltejs/kit/pull/1914))\n- Error messages are friendlier now for common config errors ([#1910](https://github.com/sveltejs/kit/pull/1910)) and compiler errors ([#1827](https://github.com/sveltejs/kit/pull/1827))\n- Cookies will only be passed through if the target host is the same as the SvelteKit application or a more specific subdomain of it ([#1847](https://github.com/sveltejs/kit/pull/1847))\n- index.js exports will now be changed to directory exports when packaging - making for nicer imports ([#1905](https://github.com/sveltejs/kit/pull/1905))\n- Vite.js's `mode` is now exposed from `$app/env` ([#1789](https://github.com/sveltejs/kit/pull/1789))\n- Better types across the board ([#1778](https://github.com/sveltejs/kit/pull/1778), [#1791](https://github.com/sveltejs/kit/pull/1791), [#1646](https://github.com/sveltejs/kit/pul",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-08-01-whats-new-in-svelte-august-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fbb1c0e8-7f6a-4743-9b1f-917323d87e98-2",
    "text": "ejs/kit/pull/1789))\n- Better types across the board ([#1778](https://github.com/sveltejs/kit/pull/1778), [#1791](https://github.com/sveltejs/kit/pull/1791), [#1646](https://github.com/sveltejs/kit/pull/1646))\n\nTo see all updates to SvelteKit, check out the [SvelteKit changelog](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md).\n\n## Features & bug fixes from around svelte/\\*\n\n- Language Tools now better support the \"Workplace Trust\" functionality (used in VS Code)\n- In svelte2tsx, ambient type declarations are now renamed to avoid conflicting declarations in the future. Users are now expected to provide the ambient type definitions themselves - fixing JS output\n- Sapper released v0.29.2 which fixes regex routes, status codes when requesting a directory, and exports when a user has not provided a `base` tag ([changelog](https://github.com/sveltejs/sapper/blob/master/CHANGELOG.md))\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [Parsnip](https://www.parsnip.ai/) is a mobile-first, progressive-web-app that helps you to learn to cook at home. Check out the [conversation on Reddit](https://www.reddit.com/r/sveltejs/comments/oearb9/learning_to_cook_at_home_with_parsnip_built/) for all the geeky details.\n- [Central Bank Digital Currency (CBDC) tracker](https://www.atlanticcouncil.org/cbdctracker/) is a site that keeps track of how countries around the world are adopting digital currencies.\n- [Svelte Commerce](https://github.com/itswadesh/svelte-commerce) is an advanced frontend platform for eCommerce based on Sveltekit.\n- [neovimcraft](https://neovimcraft.com/) is a SvelteKit site dedicated to neovim plugins\n\n**Looking for a Svelte project to work on? Interested in helping make Svelte's presence on the web better?** Check out [the list of open issues](https://github.com/svelte-society/sveltesociety-2021/issues) if you'd like to contribute to the Svelte Society rewrite in SvelteKit.\n\n**Educational Content**\n\n- [How I Built a Cross-Platform Desktop Application with Svelte, Redis, and Rust](https://css-tricks.com/how-i-built-a-cross-platform-desktop-application-with-svelte-redis-and-rust/) is a blog post by Luke Edwards, Svelte maintainer and Developer Advocate from Cloudflare.\n- [How to Create a Blog with SvelteKit and Strapi](https://strapi.io/blog/how-to-create-a-blog-with-svelte-kit-strapi) is a step-by-step tutorial by Aarnav Pai from Strapi\n- [Sveltekit Markdown Blog](https://www.youtube.com/watch?v=sKKgT0SEioI&list=PLm_Qt4aKpfKgonq1zwaCS6kOD-nbOKx7V) is a YouTube tutorial series by WebJeda.\n- [Using Custom Elements in Svelte](https://css-tricks.com/using-custom-elements-in-svelte/) is a deep dive into custom elements by Geoff Rich.\n- [learn / graphql / svelte](https://hasura.io/learn/graphql/svelte-apollo/introduction/) is a free 2-hour GraphQL course from Hasura.\n- [How to add Magic Link to a SvelteKit application](https://magic.link/posts/magic-svelte) is a guide to the popular password-less login pattern.\n\n**Libraries, Tools",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-08-01-whats-new-in-svelte-august-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2868c298-4231-4dd3-939e-e9f22fc9fd52-1",
    "text": "---\ntitle: \"What's new in Svelte: July 2023\"\ndescription: \"Svelte 4.0, new website and a tour around the community\"\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nSvelte 4 is out and folks have been building! There's a bunch of new showcases, libraries and tutorials to share. So let's get right into it...\n\n## What's new in Svelte\nThe big news this month was the release of Svelte 4.0! You can read all about it in the [Announcing Svelte 4 post](https://svelte.dev/blog/svelte-4). From performance fixes and developer experience improvements to [a brand new site, docs and tutorial](https://svelte.dev/blog/svelte-dev-overhaul)... this new release sets the stage for Svelte 5 with minimal breaking changes.\n\nIf you're already on Node.js 16, it's possible you won't see any breaking changes in your project. But be sure to read the [migration guide](https://svelte.dev/docs/v4-migration-guide) for all the details.\n\nFor a full list of all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/packages/svelte/CHANGELOG.md).\n\n## What's new in SvelteKit\nThis month there were lots of awesome [bug fixes](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md), so be sure to upgrade to the latest version! There are also a few new features to mention:\n- The new `event.isSubRequest` boolean indicates whether this is a same-origin fetch request to one of the app's own APIs during a server request (**1.21.0**, [Docs](https://kit.svelte.dev/docs/types#public-types-requestevent), [#10170](https://github.com/sveltejs/kit/pull/10170))\n- A new config option, `config.kit.env.privatePrefix` will set a private prefix on environment variables. This defaults to `''` (**1.21.0**, [Docs](https://kit.svelte.dev/docs/configuration), [#9996](https://github.com/sveltejs/kit/pull/9996))\n- `VERSION` is now exported and accessible via `@sveltejs/kit`. This can be used for feature detection or anything else that requires knowledge of the current version of SvelteKit (**1.21.0**, [Docs](https://kit.svelte.dev/docs/modules#sveltejs-kit-version), [#9969](https://github.com/sveltejs/kit/pull/9969))\n\nFor adapter-specific changes, check out the CHANGELOGs in each of [the `adapter` directories](https://github.com/sveltejs/kit/tree/master/packages).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n- [Heerdle](https://github.com/DreaminDani/heerdle) is a remake of Spotify's now-defunct Heardle - the daily music guessing game\n- [Meoweler](https://meoweler.com/) is a travel site filled with cats and helpful facts about popular destinations\n- [A tech lead from IKEA](https://www.reddit.com/r/sveltejs/comments/13w4zg3/comment/jmaxial/?utm_source=share&utm_medium=web2x&context=3) gave a few more details on the way they build pages (and page template) using Svelte\n- [The Quest to Replace Passwords](https://notes.ekzhang.com/papers/passwords) features an interactive comparison vi",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-07-01-whats-new-in-svelte-july-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2868c298-4231-4dd3-939e-e9f22fc9fd52-2",
    "text": "ave a few more details on the way they build pages (and page template) using Svelte\n- [The Quest to Replace Passwords](https://notes.ekzhang.com/papers/passwords) features an interactive comparison visualization for all the popular password management tools\n- [audiogest](https://audiogest.app/en) lets you turn speech to text & summarize any audio in one click\n- [heroify](https://www.heroify.lol/) generates 3D graphics for your website with AI\n- [Diesel Legacy: The Brazen Age](https://store.steampowered.com/app/1959140/Diesel_Legacy_The_Brazen_Age/) is a fighting game whose leaderboard and profile pages were all built in Svelte\n- [markmyimages](https://www.markmyimages.com/) is a watermarking tool with bulk image resize, rename, effects, and more\n- [md.robino.dev](https://github.com/rossrobino/md) is a web based markdown editor\n- [YABin](https://github.com/Yureien/YABin) is Yet Another Pastebin with some very specific features\n\n**Learning Resources**\n- [Announcing Svelte 4 post](https://svelte.dev/blog/svelte-4)\n- [svelte.dev: A complete overhaul](https://svelte.dev/blog/svelte-dev-overhaul)\n\n_Featuring Svelte Contributors and Ambassadors_\n- [Dev Vlog: June 2023](https://www.youtube.com/watch?v=AOXq89h8saI) - Svelte 4.0 with Rich Harris\n- [PodRocket: Svelte 4](https://podrocket.logrocket.com/svelte-4) with Geoff\n- [This Dot Media: Svelte 4 Launch Party](https://www.youtube.com/watch?v=-9gy_leMmcQ) with Simon, Ben, Geoff, and Puru\n- [Exposing Svelte: Between Two Nerds](https://www.youtube.com/watch?v=kAfotLrebhY) is a comedic conversation between Rich Harris and Dax Raad\n- [Community Tutorial: Self-hosting SvelteKit with a VPS, Docker, CapRover and GitHub Actions](https://www.youtube.com/watch?v=KbIFRVvdgA8) with Stanislav Khromov\n- [SvelteKit and Storybook](https://www.youtube.com/watch?v=1wH7rR7hZlg) with Jeppe Reinhold\n- This Week in Svelte:\n  - [2023 June 2](https://www.youtube.com/watch?v=B2AOYWs6eko) - SvelteKit 1.20.1, Svelte 4 pre-release, Headless UI libraries\n  - [2023 June 9](https://www.youtube.com/watch?v=OG70PKD0hEU) - Updates, Self-hosting SvelteKit, Passing styles to children\n  - [2023 June 16](https://www.youtube.com/watch?v=GNEbC5K34Po) - Svelte 4 next.1, how to create a hamburger menu, group layouts\n  - [2023 June 23](https://www.youtube.com/watch?v=o-qnnbMbmE4) - Svelte 4, Popovers and hover, Real Time requests with SvelteKit\n- Svelte Radio\n  - [SvelteLab - a Svelte REPL for SvelteKit](https://www.svelteradio.com/episodes/sveltelab-a-svelte-repl-for-sveltekit-with-antonio-and-paolo) with Antonio and Paolo\n  - [Svelte Radio Live - Svelte 4 Summer Special](https://www.youtube.com/watch?v=72TIVhRtyWE) with Simon and Puru\n- [Svelte Society - London June 2023](https://www.youtube.com/watch?v=EkH0aMgeIKw)\n- [Using The Svelte Context API With Stores](https://www.youtube.com/watch?v=dp-7NvLDrK4), [Impossible FLIP Layout Animations With Svelte And GSAP](https://www.youtube.com/watch?v=ecP8RwpkiQw) and [Create Beautiful Presentations With",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-07-01-whats-new-in-svelte-july-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "2868c298-4231-4dd3-939e-e9f22fc9fd52-3",
    "text": "ith Stores](https://www.youtube.com/watch?v=dp-7NvLDrK4), [Impossible FLIP Layout Animations With Svelte And GSAP](https://www.youtube.com/watch?v=ecP8RwpkiQw) and [Create Beautiful Presentations With Svelte](https://www.youtube.com/watch?v=67lqa5kTQkA) by Joy of Code\n\n\n_To Watch_\n- [Server-side filtered, paginated and sorted Table in SvelteKit](https://www.youtube.com/watch?v=VgCU0cVWgJE) by hartenfellerdev\n- [Best Icon Library for Svelte and SvelteKit in 2023](https://www.youtube.com/watch?v=qJP6hC4YIhk) by SvelteRust\n\n_To Read_\n- [From Zero to Production with SvelteKit](https://www.okupter.com/events/from-zero-to-production-with-sveltekit) by Justin Ahinon\n- [Thoughts on Svelte(Kit), one year and 3 billion requests later](https://claudioholanda.ch/en/blog/svelte-kit-after-3-billion-requests/) by Claudio Holanda\n- [How I published a gratitude journaling app for iOS and Android using SvelteKit and Capacitor](https://khromov.se/how-i-published-a-gratitude-journaling-app-for-ios-and-android-using-sveltekit-and-capacitor/) by Stanislav Khromov\n- [Learning by doing - Vue devs build a Svelte Single Page App](https://www.blackspike.com/blog/learning-svelte-by-building-a-single-page-application/) by Black Spike\n- [Generate Breadcrumb and Navigation in SvelteKit](https://blog.aakashgoplani.in/generate-breadcrumb-and-navigation-in-sveltekit), [SvelteKit Authentication using SvelteKitAuth and OAuth providers: A Comprehensive Guide](https://blog.aakashgoplani.in/sveltekit-authentication-using-sveltekitauth-and-oauth-providers-a-comprehensive-guide) and [SvelteKitAuth with Salesforce OAuth provider](https://blog.aakashgoplani.in/sveltekitauth-with-salesforce-oauth-provider) by Aakash Goplani\n- [Instantly find and remove Svelte component orphans](https://node-jz.medium.com/instantly-find-and-remove-svelte-component-orphans-9b2838ea2d99) by Jeremy Zaborowski\n- [Migration Guide from Routify to SvelteKit Router](https://blog.aakashgoplani.in/migration-guide-from-routify-to-sveltekit-router) by Aakash Goplani\n- [Creating 3D data visualization using Threlte and D3](https://www.datavizcubed.com/) by DataViz Cubed\n- [Svelte Real\u2011time Multiplayer Game: User Presence](https://rodneylab.com/svelte-realtime-multiplayer-game/) and [SvelteKit PostCSS Tutorial: use Future CSS Today](https://rodneylab.com/sveltekit-postcss-tutorial/) by Rodney Lab\n- [SvelteKit\u2019s World of Routing: Unleash power of your app using Dynamic Routes and Parameters](https://www.inow.dev/sveltekits-world-of-routing-unleash-power-of-your-app-using-dynamic-routes-and-parameters/) by Igor Nowosad\n\n\n**Libraries, Tools & Components**\n- [The Vercel AI SDK](https://vercel.com/blog/introducing-the-vercel-ai-sdk) is an interoperable, streaming-enabled, edge-ready software development kit for AI apps built with React and Svelte\n- [Superforms 1.0](https://superforms.rocks/) has been released. Check out the [migration guide](https://superforms.rocks/migration) and [new feature list](https://superforms.rocks/wh",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-07-01-whats-new-in-svelte-july-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fec855bd-a881-4032-a42c-b035dcca80c5-1",
    "text": "---\ntitle: \"What's new in Svelte: August 2023\"\ndescription: \"Extending Custom Element Classes and new +server exports\"\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nSome sweet new features have dropped in both Svelte and SvelteKit, this month. It's also great to see how many products and side projects have launched using Svelte as their core technology!\n\nMore on all that down below...\n\n## What's new in Svelte & Language Tools\nThere's been a bunch of minor bugfixes since the Svelte 4 release. You can find them in the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/packages/svelte/CHANGELOG.md).\n\nThe **4.1.0 release** added the ability to further customize the custom element class that wraps the underlying Svelte component. Check out the [Custom Elements API docs](https://svelte.dev/docs/custom-elements-api) or the [PR](https://github.com/sveltejs/svelte/pull/8991) for more info!\n\nIn addition to supporting SvelteKit's new `HEAD` server method, Svelte's language tools now support Prettier v3 (**extensions-107.9.0**) and workspace trust settings are now used to support all settings in workspace (**extensions-107.8.0**).\n\n## What's new in SvelteKit\n- The `HEAD` server method is now available in API routes (**1.22.0**, [Docs](https://kit.svelte.dev/docs/routing#server), [#9753](https://github.com/sveltejs/kit/pull/9753))\n- Responses with `Vary` headers are now cached, too (except for `Vary: *`) (**1.22.0**, [Docs](https://kit.svelte.dev/docs/routing#server-content-negotiation), [#9993](https://github.com/sveltejs/kit/pull/9993))\n- There's now a more helpful error for preview if SvelteKit's build output doesn't exist (**1.22.2**, [#10337](https://github.com/sveltejs/kit/pull/10337))\n\nFor all the patches and performance updates from this month, check out the [SvelteKit CHANGELOG](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md). You can also find adapter-specific CHANGELOGs in each of [the `adapter` directories](https://github.com/sveltejs/kit/tree/master/packages).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n- [GitLight](https://github.com/ColinLienard/gitlight) brings GitHub & GitLab notifications to your desktop\n- [Days](https://github.com/paprikka/days) is paprikka's life in days, inspired by Buster Benson's Life in Weeks\n- [Mofi](https://mofi.loud.red/) is a content-aware fill and trim for music\n- [JSON Bucket](https://github.com/Nico-Mayer/json-bucket) stores your JSON data so you can access it anywhere through generated API routes\n- [Soggy Planet](https://www.cosmicplayground.org/soggy-planet) is an interactive map of Earth where sea levels rise and fall and the lights of civilization shine through the night ([Source](https://github.com/ryanatkn/cosmicplayground))\n- [PaperClip](https://www.paperclipapp.xyz/) is a Chrome extension that makes it easy to memorize details from papers in machine learning, computer vision, and natural language processing.\n- [Maktaba](https://www.maktab",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-08-01-whats-new-in-svelte-august-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fec855bd-a881-4032-a42c-b035dcca80c5-2",
    "text": "://www.paperclipapp.xyz/) is a Chrome extension that makes it easy to memorize details from papers in machine learning, computer vision, and natural language processing.\n- [Maktaba](https://www.maktaba.digital/) is a bookmark manager that \"you will actually use\"\n- [Whispering](https://github.com/braden-w/whispering-extension) is a Chrome extension that lets you access OpenAI's Whisper API for fast transcription in the browser (including ChatGPT)\n- [DocuTalk](https://docutalk.co/) is an AI Customer Support chatbot for your website\n- [Krello](https://github.com/iamrishupatel/trello-clone) is a Trello clone built with Svelte, Appwrite and Flowbite \n- [Been](https://beeneverywhere.net/) is a map builder with travel stats like visited countries, extreme visited points, etc.\n- [image-to-social-media-thumbnail](https://brody.fyi/tools/image-to-social-media-thumbnail) lets you convert any image to a social media thumbnail\n- [Svelte Capacitor Store](https://github.com/sdekna/svelte-capacitor-store) is a persistent store that uses capacitor (preferences) storage on native devices, and localStorage otherwise, making it ideal for multi-platform projects\n\n\n**Learning Resources**\n_Featuring Svelte Contributors and Ambassadors_\n- [Exploring Svelte 4 w/ Kevin AK: Performance, Compatibility, & Web Component Support | Modern Web Pod](https://www.youtube.com/watch?v=YOL0HGGVib4) by This Dot Media\n- [Svelte Sirens Stream Design Systems: Lessons Learned](https://www.youtube.com/live/YHZaiIGSqsE?feature=share) featuring Eric Liu, creator of Carbon Components Svelte and the `sveld` docgen library\n- This Week in Svelte:\n  - [2023 June 30](https://www.youtube.com/watch?v=sDz4_BLoYQ4) - Svelte 4.0.1, SK 1.21, lists, screen readers, loading\n  - [2023 July 7](https://www.youtube.com/watch?v=0tq1ph4DDFA) - Svelte 4.0.5, Kit 1.22.1, Svelte 5, local storage and markdown\n  - [2023 July 21](https://www.youtube.com/watch?v=AG4_3kon3zU) - Svelte 4.1.1, SvelteKit 1.22.3, Progressive enhancement\n\n\n_To Watch/Hear_\n- [What is The Transitional Web? with Chris Ferdinandi](https://www.smashingmagazine.com/2023/07/smashing-podcast-episode-63/?ref=dailydevbytes.com) by Smashing Podcast\n- [SvelteKit in 100 seconds](https://www.youtube.com/watch?v=H1eEFfAkIik) by Fireship\n- [Primo V2 Introduction](https://www.youtube.com/watch?v=ThInVXgxJ1Q) by Primo (a [visual CMS](https://primocms.org/) based on Svelte)\n- [Understanding Svelte (vs React)](https://www.youtube.com/watch?v=lYYGhm7p74Q) by Kodaps Academy\n- [Is it th\u00e0t simple? - Mastering SvelteKit](https://www.youtube.com/watch?v=6Vrc1VO8pgs) by Threeveloper\n- [Markdown in SvelteKit with custom Components: mdsvex](https://www.youtube.com/watch?v=VJFkyGd0FEA) by hartenfellerdev\n- [How To Add Confetti for Svelte and Sveltekit \ud83c\udf89](https://www.youtube.com/watch?v=gXtWSb94704) and [Make Your SvelteKit Code 10x Faster With Rust and WebAssembly](https://www.youtube.com/watch?v=Vn2bIv_J_UE) by SvelteRust\n\n\n_To Read_\n- [SvelteJS: My ecosystem is bigger ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-08-01-whats-new-in-svelte-august-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "fec855bd-a881-4032-a42c-b035dcca80c5-3",
    "text": "com/watch?v=gXtWSb94704) and [Make Your SvelteKit Code 10x Faster With Rust and WebAssembly](https://www.youtube.com/watch?v=Vn2bIv_J_UE) by SvelteRust\n\n\n_To Read_\n- [SvelteJS: My ecosystem is bigger than yours](https://hackmd.io/@roguegpu/r1RKQMdt3) by roguegpu\n- [Avoid shared state on the server in SvelteKit](https://blog.aakashgoplani.in/avoid-shared-state-on-the-server-in-sveltekit) by Aakash Goplani\n- [SvelteKit Fontaine: Reduce Custom Font CLS](https://rodneylab.com/sveltekit-fontaine/) by Rodney Lab\n- [A Simple Guide to Redirects in Svelte Kit](https://rgbstudios.org/blog/redirects-in-svelte-kit) by Justin Golden\n- [React vs Svelte (Q3 2023)](https://gee-astro-personal.vercel.app/blog/post2) by Gee\n- [SvelteKit Page Reaction Component with Upstash Redis](https://scottspence.com/posts/sveltekit-page-reaction-component-with-upstash-redis) by Scott Spence\n- [Building a privacy-friendly, self-hosted application architecture with SvelteKit](https://khromov.se/building-a-privacy-friendly-self-hosted-application-architecture-with-sveltekit/) and [Building a privacy-friendly, self-hosted application architecture with SvelteKit](https://khromov.se/building-a-privacy-friendly-self-hosted-application-architecture-with-sveltekit/) by Stanislav Khromov\n- [Deploying Sveltekit on IIS](https://dev.to/nnutnonn/deploying-sveltekit-on-iis--5gf6) by Nutchapon Makelai\n- [Streamlined Authentication and Secrets Management](https://eman.hashnode.dev/streamlined-authentication-and-secrets-management) by Eman\n\n\n**Libraries, Tools & Components**\n- [Melt UI](https://github.com/melt-ui/melt-ui) is a set of headless, accessible component builders for Svelte\n- [MDsveX](https://github.com/pngwn/MDsveX/releases/tag/mdsvex%400.11.0) has been updated to work with Svelte 4\n- [Svelte Sonner](https://github.com/wobsoriano/svelte-sonner) is an opinionated toast component for Svelte\n- [WebExtensionTemplate](https://github.com/kyle-n/WebExtensionTemplate) lets you skip the boilerplate and write a Web Extension with TypeScript and Svelte or React\n- [svelte-rust](https://github.com/Hugo-Dz/svelte-rust) lets you run Rust code in your Svelte app\n- [SvelteKit SSE](https://github.com/tncrazvan/sveltekit-sse) provides an easy way to produce and consume server sent events\n- [better-svelte-writable](https://github.com/tnthung/better-svelte-writable) provides a type-safe writable which gives you more control over the container\n- [Svetch.ts](https://github.com/Bewinxed/svetch#readme) is a client/types/schema/docs generator for your API endpoints\n- [sveltekit-localize-url](https://github.com/rinart73/sveltekit-localize-url) handles URL localization and routing\n- [elegua](https://github.com/howesteve/elegua) is a small, reactive PWA router for Svelte \n- [Molly](https://github.com/renefournier/molly/tree/main) is a bash script and npm module that helps you clean up unused Svelte components in your project\n- [sveltekit-bot](https://github.com/begoon/sveltekit-bot) is a Telegram bot made with Sv",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-08-01-whats-new-in-svelte-august-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5b013712-8c64-4799-8cbd-699ba0c36d0d-1",
    "text": "---\ntitle: \"What's new in Svelte: June 2021\"\ndescription: Progress towards SvelteKit 1.0 and tighter TypeScript/Svelte integrations in language tools\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nThis month, we saw lots of contributions to SvelteKit and its docs. The language tools also got some new features, most notably deeper integration with Svelte files within JavaScript or TypeScript files. Let's jump into the updates...\n\n## New in SvelteKit\n\n- `svelte.config.js` config files are now loaded in ESM format (`.js` instead of `.cjs`).\n- AMP pages will now use the rendered CSS, rather than emitted CSS\n- `svelte-check` has been added to the TypeScript template ([sveltejs/kit#1556](https://github.com/sveltejs/kit/pull/1556))\n- Support for https keypair [sveltejs/kit#1456](https://github.com/sveltejs/kit/pull/1456)\n- Now bundling Vite with SvelteKit and using an upgraded version. Remove Vite from your `package.json` if it's there\n- Etags for binary responses [sveltejs/kit#1382](https://github.com/sveltejs/kit/pull/1382)\n- Renamed `$layout` to `__layout` and `$error` to `__error`\n- Removed `getContext` in favor of `request.locals`\n- Renamed `.svelte` output directory to `.svelte-kit`. Update your `.gitignore` accordingly\n- `trailingSlash: 'never' | 'always' | 'ignore'` is now available in the config. This should make it easier to build sites that work with static hosting providers that expect a trailing slash for `index.html` pages, and provides an escape hatch for anyone that needs more complex behaviour.\n\n## Notable bug fixes in SvelteKit\n\n- `adapter-netlify` got a fix [sveltejs/kit#1467](https://github.com/sveltejs/kit/pull/1467) and new documentation in the readme https://github.com/sveltejs/kit/tree/master/packages/adapter-netlify\n- The router will no longer intercept navigation for URLs that the app does not own. This fixes a crash for apps that have `<a>` elements on the page with the same origin but don't share a base path with the app.\n- Hash only changes are now handled by the router fixing the browser's \"back\" navigation between hash changes in some circumstances.\n\n## New in Svelte & Language Tools\n\n- Svelte 3.38.1 and 3.38.2 fixed an issue with hydration that was causing duplicate elements. If you're seeing this in your project, be sure to update the latest version!\n- A new TypeScript plugin provides deeper integration with Svelte files within JavaScript or TypeScript files. This includes diagnostics, references and renaming of variables. It comes packaged with the VS Code extension but is turned off by default for now. You can enable it through [this setting](https://github.com/sveltejs/language-tools/tree/master/packages/svelte-vscode#svelteenable-ts-plugin). We encourage you to test it out and [provide feedback](https://github.com/sveltejs/language-tools/issues/580)\n- In the latest version of `svelte-check` you can now provide the path to your `tsconfig.json` or `jsconfig.json`. Example: `svelte-check --tsconfig \"./tsc",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-06-01-whats-new-in-svelte-june-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5b013712-8c64-4799-8cbd-699ba0c36d0d-2",
    "text": "thub.com/sveltejs/language-tools/issues/580)\n- In the latest version of `svelte-check` you can now provide the path to your `tsconfig.json` or `jsconfig.json`. Example: `svelte-check --tsconfig \"./tsconfig.json\"`. This ensures the diagnostics are only run on files that are referenced in that config. It also runs diagnostics on JavaScript and/or TypeScript files which removes the need to run another check (like `tsc --noEmit`) for non-Svelte files (`svelte-check` version [**1.6.0**](https://github.com/sveltejs/language-tools/releases/tag/svelte-check-1.6.0))\n- The VS Code extension and `svelte-check` got a new major release. Previously, properties that had no initializer (`export let foo;`) were only required if the user was using both TypeScript and activated `strict` mode. This is changed now: People using TypeScript, and those using `checkJs` also in JavaScript files, will now always have these properties marked as required (`svelte-check` version [**2.0.0**](https://github.com/sveltejs/language-tools/releases/tag/svelte-check-2.0.0), extension version [**105.0.0**](https://github.com/sveltejs/language-tools/releases/tag/extensions-105.0.0))\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [vidu](https://github.com/pa-nic/vidu) is a minimal web analytics collector and dashboard\n- [River Runner](https://river-runner.samlearner.com/) is a virtual way to follow rivers downstream - built with Mapbox and Svelte.\n- [JSDoc Type Generator](https://rafistrauss.github.io/jsdoc-generator/) generates JSDoc types for valid JSON.\n- [pagereview.io](https://pagereview.io/) is a website feedback tool that lets you leave comments directly on the site being reviewed.\n- [gamesroom.io](https://gamesroom.io/) is an online board game platform with video chat built-in.\n- [Greedy Goblin](https://greedygoblin-fe11c.web.app/) is a recipe app for old-school Runescape players.\n- [hashbrown.geopjr.dev](https://hashbrown.geopjr.dev/) is a GNOME-shell inspired webpage to learn about, explore the source code and download the Hashbrown GTK app ([link to source](https://github.com/GeopJr/Hashbrown/tree/website)).\n\n**Libraries, Tools & Components**\n\n- [svelte-image-crop](https://novacbn.github.io/svelte-image-crop/) is a simple click'n'drag image cropping library using Web APIs.\n- [svelte-datepicker](https://github.com/andrew-secret/svelte-datepicker) is a lightweight and inclusive date picker build with Svelte.\n- [svelte-regex-router](https://www.npmjs.com/package/svelte-regex-router) is a simple, lightweight library for you to easily handle routes in your Svelte application.\n- [Svelte Micro](https://www.npmjs.com/package/svelte-micro) is a light & reactive one-component router for Svelte.\n- [svelte-entity-store](https://www.npmjs.com/package/svelte-entity-store) is to provide a simple, generic solution for storing collections of entity objects.\n- [svelte-animation-store](https://github.com/joshnuss/svelte-animation-store) is a store that is based on Svelte's tweened store, that",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-06-01-whats-new-in-svelte-june-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "ecd2bb0d-c482-41e4-b554-8fd6b9bdb5f8-1",
    "text": "---\ntitle: 'Sapper: Towards the ideal web app framework'\ndescription: Taking the next-plus-one step\nauthor: Rich Harris\nauthorURL: https://twitter.com/Rich_Harris\n---\n\n> Quickstart for the impatient: [the Sapper docs](https://sapper.svelte.dev), and the [starter template](https://github.com/sveltejs/sapper-template)\n\nIf you had to list the characteristics of the perfect Node.js web application framework, you'd probably come up with something like this:\n\n1. It should do server-side rendering, for fast initial loads and no caveats around SEO\n2. As a corollary, your app's codebase should be universal \u2014 write once for server _and_ client\n3. The client-side app should _hydrate_ the server-rendered HTML, attaching event listeners (and so on) to existing elements rather than re-rendering them\n4. Navigating to subsequent pages should be instantaneous\n5. Offline, and other Progressive Web App characteristics, must be supported out of the box\n6. Only the JavaScript and CSS required for the first page should load initially. That means the framework should do automatic code-splitting at the route level, and support dynamic `import(...)` for more granular manual control\n7. No compromise on performance\n8. First-rate developer experience, with hot module reloading and all the trimmings\n9. The resulting codebase should be easy to grok and maintain\n10. It should be possible to understand and customise every aspect of the system \u2014 no webpack configs locked up in the framework, and as little hidden 'plumbing' as possible\n11. Learning the entire framework in under an hour should be easy, and not just for experienced developers\n\n[Next.js](https://github.com/zeit/next.js) is close to this ideal. If you haven't encountered it yet, I strongly recommend going through the tutorials at [learnnextjs.com](https://learnnextjs.com). Next introduced a brilliant idea: all the pages of your app are files in a `your-project/pages` directory, and each of those files is just a React component.\n\nEverything else flows from that breakthrough design decision. Finding the code responsible for a given page is easy, because you can just look at the filesystem rather than playing 'guess the component name'. Project structure bikeshedding is a thing of the past. And the combination of SSR (server-side rendering) and code-splitting \u2014 something the React Router team [gave up on](https://reacttraining.com/react-router/web/guides/code-splitting), declaring 'Godspeed those who attempt the server-rendered, code-split apps' \u2014 is trivial.\n\nBut it's not perfect. As churlish as it might be to list the flaws in something _so, so good_, there are some:\n\n- Next uses something called 'route masking' to create nice URLs (e.g. `/blog/hello-world` instead of `/post?slug=hello-world`). This undermines the guarantee about directory structure corresponding to app structure, and forces you to maintain configuration that translates between the two forms\n- All your routes are assumed to be universal 'pages'. But i",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2017-12-31-sapper-towards-the-ideal-web-app-framework.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "ecd2bb0d-c482-41e4-b554-8fd6b9bdb5f8-2",
    "text": "ee about directory structure corresponding to app structure, and forces you to maintain configuration that translates between the two forms\n- All your routes are assumed to be universal 'pages'. But it's very common to need routes that only render on the server, such as a 301 redirect or an API endpoint that serves the data for your pages, and Next doesn't have a great solution for this. You can add logic to your `server.js` file to handle these cases, but it feels at odds with the declarative approach taken for pages\n- To use the client-side router, links can't be standard `<a>` tags. Instead, you have to use framework-specific `<Link>` components, which is impossible in the markdown content for a blog post such as this one, for example\n\nThe real problem, though, is that all that goodness comes for a price. The simplest possible Next app \u2014 a single 'hello world' page that renders some static text \u2014 involves 66kb of gzipped JavaScript. Unzipped, it's 204kb, which is a non-trivial amount of code for a mobile device to parse at a time when performance is a critical factor determining whether or not your users will stick around. And that's the _baseline_.\n\nWe can do better!\n\n## The compiler-as-framework paradigm shift\n\n[Svelte introduced a radical idea](/blog/frameworks-without-the-framework): what if your UI framework wasn't a framework at all, but a compiler that turned your components into standalone JavaScript modules? Instead of using a library like React or Vue, which knows nothing about your app and must therefore be a one-size-fits-all solution, we can ship highly-optimised vanilla JavaScript. Just the code your app needs, and without the memory and performance overhead of solutions based on a virtual DOM.\n\nThe JavaScript world is [moving towards this model](https://tomdale.net/2017/09/compilers-are-the-new-frameworks/). [Stencil](https://stenciljs.com), a Svelte-inspired framework from the Ionic team, compiles to web components. [Glimmer](https://glimmerjs.com) _doesn't_ compile to standalone JavaScript (the pros and cons of which deserve a separate blog post), but the team is doing some fascinating research around compiling templates to bytecode. (React is [getting in on the action](https://twitter.com/trueadm/status/944908776896978946), though their current research focuses on optimising your JSX app code, which is arguably more similar to the ahead-of-time optimisations that Angular, Ractive and Vue have been doing for a few years.)\n\nWhat happens if we use the new model as a starting point?\n\n## Introducing Sapper\n\n<aside><p>The <a href=\"https://sapper.svelte.dev/docs#Why_the_name\">name comes from</a> the term for combat engineers, and is also short for Svelte app maker</p></aside>\n\n[Sapper](https://sapper.svelte.dev) is the answer to that question. **Sapper is a Next.js-style framework that aims to meet the eleven criteria at the top of this article while dramatically reducing the amount of code that gets sent to the browser.** It's impl",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2017-12-31-sapper-towards-the-ideal-web-app-framework.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "ecd2bb0d-c482-41e4-b554-8fd6b9bdb5f8-3",
    "text": "estion. **Sapper is a Next.js-style framework that aims to meet the eleven criteria at the top of this article while dramatically reducing the amount of code that gets sent to the browser.** It's implemented as Express-compatible middleware, meaning it's easy to understand and customise.\n\nThe same 'hello world' app that took 204kb with React and Next weighs just 7kb with Sapper. That number is likely to fall further in the future as we explore the space of optimisation possibilities, such as not shipping any JavaScript _at all_ for pages that aren't interactive, beyond the tiny Sapper runtime that handles client-side routing.\n\nWhat about a more 'real world' example? Conveniently, the [RealWorld](https://github.com/gothinkster/realworld) project, which challenges frameworks to develop an implementation of a Medium clone, gives us a way to find out. The [Sapper implementation](https://github.com/sveltejs/realworld) takes 39.6kb (11.8kb zipped) to render an interactive homepage.\n\n<aside><p>Code-splitting isn't free \u2014 if the reference implementation used code-splitting, it would be larger still</p></aside>\n\nThe entire app costs 132.7kb (39.9kb zipped), which is significantly smaller than the reference React/Redux implementation at 327kb (85.7kb), but even if it was as large it would _feel_ faster because of code-splitting. And that's a crucial point. We're told we need to code-split our apps, but if your app uses a traditional framework like React or Vue then there's a hard lower bound on the size of your initial code-split chunk \u2014 the framework itself, which is likely to be a significant portion of your total app size. With the Svelte approach, that's no longer the case.\n\nBut size is only part of the story. Svelte apps are also extremely performant and memory-efficient, and the framework includes powerful features that you would sacrifice if you chose a 'minimal' or 'simple' UI library.\n\n## Trade-offs\n\nThe biggest drawback for many developers evaluating Sapper would be 'but I like React, and I already know how to use it', which is fair.\n\nIf you're in that camp, I'd invite you to at least try alternative frameworks. You might be pleasantly surprised! The [Sapper RealWorld](https://github.com/sveltejs/realworld) implementation totals 1,201 lines of source code, compared to 2,377 for the reference implementation, because you're able to express concepts very concisely using Svelte's template syntax (which [takes all of five minutes to master](https://v2.svelte.dev/guide#template-syntax)). You get [scoped CSS](/blog/the-zen-of-just-writing-css), with unused style removal and minification built-in, and you can use preprocessors like LESS if you want. You no longer need to use Babel. SSR is ridiculously fast, because it's just string concatenation. And we recently introduced [svelte/store](https://v2.svelte.dev/guide#state-management), a tiny global store that synchronises state across your component hierarchy with zero boilerplate. The worst that can happ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2017-12-31-sapper-towards-the-ideal-web-app-framework.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5c9cdd72-453e-40b8-9c4d-da28b2392458-1",
    "text": "---\ntitle: \"What's new in Svelte: June 2023\"\ndescription: 'SvelteHack winners, lots of new bindings, Svelte 4.0.0-next.0, and a bunch of new features in SvelteKit'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nWelcome to June everyone and [congrats to our SvelteHack winners](https://hack.sveltesociety.dev/winners), across all the categories! If you missed it, these winners were announced at Svelte Summit on May 6th \ud83c\udf89\n\nThe entire playlist of the summit, including all the talks broken up in to separate videos, can be found [on the Svelte Society YouTube channel](https://www.youtube.com/playlist?list=PL8bMgX1kyZTiODueVnrK5GR42u3hgN13X). So check it out, if you haven't already.\n\nLots to cover in this month's newsletter, including a lot of improvements to both Svelte and Kit...\n\n## What's new in Svelte\n\n[Svelte 4.0.0-next.0](https://github.com/sveltejs/svelte/releases), the first pre-release version of Svelte 4.0 is out! An explanation of the changes, improvements and goals of this release can be found in [the Releases page on GitHub](https://github.com/sveltejs/svelte/releases/tag/svelte%404.0.0-next.0). Check it out to get an early sneak peek of the future of Svelte. It also includes a migration guide, for those interested in the minimal amount of breaking changes and deprecations.\n\nSvelte 3.59.0 is also out, with a ton of new features:\n\n- Restructuring arrays with the spread operator (`...`) is now handled correctly (**3.59.0**, [#8552](https://github.com/sveltejs/svelte/issues/8552), [#8554](https://github.com/sveltejs/svelte/issues/8554))\n- The new `a11y-autocomplete-valid` warning will now warn if the autocomplete attribute isn't used according to the HTML specification (**3.59.0**, [Examples](https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/d32a27fb64f4127d31e4e76bd08e319cfaf0ba53/docs/rules/autocomplete-valid.md), [#8520](https://github.com/sveltejs/svelte/pull/8520))\n- `fullscreenElement` and `visibilityState` bindings are now available for the `<svelte:document>` element (**3.59.0**, [#8507](https://github.com/sveltejs/svelte/pull/8507))\n- The `devicePixelRatio` binding is now available for the `<svelte:window>` element (**3.59.0**, [#8285](https://github.com/sveltejs/svelte/issues/8285))\n- The `ResizeObserver` bindings `contentRect`/`contentBoxSize`/`borderBoxSize`/`devicePixelContentBoxSize` are now usable with `bind:`(**3.59.0**, [#8022](https://github.com/sveltejs/svelte/pull/8022))\n\nFor all the changes to the Svelte compiler, including unreleased changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n## What's new in SvelteKit\n\n- Route-level entry generators allow exporting an entries function from `+page`, `+page.server`, and `+server` files to supply possible values for params for prerendering (**1.16.0**, [Docs](https://kit.svelte.dev/docs/page-options#entries), [#9571](https://github.com/sveltejs/kit/pull/9571))\n- URLs in `<meta>` tags are now crawled to make programma",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-01-whats-new-in-svelte-june-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5c9cdd72-453e-40b8-9c4d-da28b2392458-2",
    "text": "ms for prerendering (**1.16.0**, [Docs](https://kit.svelte.dev/docs/page-options#entries), [#9571](https://github.com/sveltejs/kit/pull/9571))\n- URLs in `<meta>` tags are now crawled to make programmatic social-images much easier (**1.17.0**, [Docs](https://kit.svelte.dev/docs/seo#manual-setup-title-and-meta), [#9900](https://github.com/sveltejs/kit/pull/9900))\n- `data` and `form` have been renamed to `formData` and `formElement` respectively in the `enhance` function. Using them through the old names will log a deprecation warning and they'll be removed in a future version. (**1.17.0**, [Docs](https://kit.svelte.dev/docs/form-actions#progressive-enhancement-use-enhance), [#9902](https://github.com/sveltejs/kit/pull/9902))\n- Link options can now be set to `true` and `false` (**1.19.0**, [Docs](https://kit.svelte.dev/docs/link-options#disabling-options), [#10039](https://github.com/sveltejs/kit/pull/10039))\n- The new `resolvePath` export can be used to build relative paths from route IDs and parameters (**1.19.0**, [Docs](https://kit.svelte.dev/docs/modules#sveltejs-kit-resolvepath), [#9949](https://github.com/sveltejs/kit/pull/9949))\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [a-maze](https://github.com/nedredmond/a-maze) is a simple maze generator (using DFS) with any dimensions between 5 cells and 75 cells\n- [Windows 11 in Svelte](https://github.com/yashash-pugalia/win11-svelte) attempts to replicate the Windows 11 desktop experience on web\n- [JsonCrunch](https://github.com/aghorui/jsoncrunch) is a JSON viewing, transformation and querying tool meant for quickly manipulating small to medium size pieces of JSON data\n- [Typepost](https://dezain.io/typepost/) is a simple text post generator for social media\n- [tall.ly](https://tall.ly/) is a website for sharing bookmarks ([example](https://tall.ly/zx/icons))\n- [bbchallenge](https://github.com/bbchallenge/bbchallenge) is a collaborative environment to prove or disprove the Busy Beaver conjecture\n- [Reddit Map](https://github.com/iDPI-Umass/reddit-map) is a project of computer, data, and social scientists to explore and visualize Reddit\n- [WeWatch](https://github.com/orosmatthew/wewatch) allows watching videos together in sync\n- [Wonderplan](https://wonderplan.ai/) is an AI-Powered Trip Planner tailored to your preferences and covering all aspects of your trip\n- [CodingView.io](https://codingview.io/) is an online coding interview tool\n- [MeatGPT](https://meat-gpt.sonnet.io/) is an art-site that promptly ignores your prompt\n- [Vim Ninja](https://www.vimninja.com/) is an interactive Vim course in the browser\n- [prcl](https://prcl.dev/) is a Pastebin-alternative focused on speed and simplicity\n- [md](https://github.com/rossrobino/md) is a web based markdown editor\n\n**Learning Resources**\n\n_Featuring Svelte Contributors and Ambassadors_\n\n- This Week in Svelte:\n  - [2023 April 28](https://www.youtube.com/watch?v=LlONGghw_MA) - SK 1.15.9, colour contrast, SK reusable types, path a",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-01-whats-new-in-svelte-june-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "5c9cdd72-453e-40b8-9c4d-da28b2392458-3",
    "text": "rces**\n\n_Featuring Svelte Contributors and Ambassadors_\n\n- This Week in Svelte:\n  - [2023 April 28](https://www.youtube.com/watch?v=LlONGghw_MA) - SK 1.15.9, colour contrast, SK reusable types, path aliases\n  - [2023 May 5](https://www.youtube.com/watch?v=jo9osUzHnHY) - SvelteKit 1.16.0, reactive statement lifecycle, custom stores\n  - [2023 May 12](https://www.youtube.com/watch?v=MBSYHW50xb8) - Svelte 4.0 preview, SvelteKit 1.16.3, Svelte 3.59.1\n  - [2023 May 19](https://www.youtube.com/watch?v=CnvU6K12iK4) - SvelteKit 1.18.0, accessible HTML tables, CSS nesting\n  - [2023 May 26](https://www.youtube.com/watch?v=oqroEq1DoKI) - SvelteKit 1.19.0, choosing a UI library, breakpoint debugging\n- Svelte Radio\n  - [Svelte Summit Hypisode](https://www.svelteradio.com/episodes/svelte-summit-hypisode) (May 4, 2023)\n  - [A primer on AI for developers with Swyx from Latent Space](https://www.svelteradio.com/episodes/a-primer-on-ai-for-developers-with-swyx-from-latent-space) (May 11, 2023 | [Video Version](https://www.youtube.com/watch?v=PzImLLdU5Wk))\n\n_To Watch_\n\n- [Build a Blazing Fast SvelteKit Markdown Blog](https://www.youtube.com/watch?v=RhScu3uqGd0), [Page Versus Standalone Endpoints In SvelteKit](https://www.youtube.com/watch?v=8OmsVZuuQMc) and [Learn How Data Flows In Your SvelteKit App](https://www.youtube.com/watch?v=ampDDmT3TU0) by Joy of Code\n- [Build a ChatGPT Plugin with SvelteKit](https://www.youtube.com/watch?v=P4wZ9JIxwjs) by SuperMilkDaddy\n- [Svelte makes Drag And Drop API easy!](https://www.youtube.com/watch?v=lTDKhj83tec) and [Simple native-like App in SvelteKit!](https://www.youtube.com/watch?v=Enl4OPQ2OAM) by Antonio Sarcevic\n- [Let's Learn Svelte.js in 60 Minutes (fun speed run).](https://www.youtube.com/watch?v=0FCbd1XVYWo) by developedbyed\n\n_To Read_\n\n- [Bridging Vue 2 and Svelte](https://workadventu.re/blog/post/bridging-vue2-and-svelte) by Alexis Faizeau\n- [Write Once, Run Anywhere](https://blog.robino.dev/posts/drizzle-svelte) by Ross Robino\n- [Reflections on Migrating my SaaS To SvelteKit](http://sveltekitsaas.com/articles/migrate-saas-to-sveltekit/) by SvelteKitSaaS\n- [Authentication system using rust (actix-web) and SvelteKit](https://dev.to/sirneij/full-stack-authentication-system-using-rust-actix-web-and-sveltekit-1cc6) by John Owolabi Idogun\n- [SvelteKit Forms: Grammar Check App](https://rodneylab.com/sveltekit-forms/), [SvelteKit Ably: Sqvuably Real\u2011Time Game](https://rodneylab.com/sveltekit-ably/) and [Svelte Login Form Example: Best Practices](https://rodneylab.com/svelte-login-form-example/) by Rodney Lab\n- [The Correct Way to Use Stores in SvelteKit](https://dev.to/jdgamble555/the-correct-way-to-use-stores-in-sveltekit-3h6i) and [Rich Harris is NOT Getting Rid of TS Support in Svelte](https://dev.to/jdgamble555/rich-harris-is-not-getting-rid-of-ts-support-in-svelte-pp6) by Jonathan Gamble\n- [How to add a basic SEO component to SvelteKit](https://maier.tech/posts/how-to-add-a-basic-seo-component-to-sveltekit) by Thilo Maie",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-01-whats-new-in-svelte-june-2023.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "16f64a36-a801-402d-8eb2-045f31259f5b-1",
    "text": "---\ntitle: \"What's new in Svelte: March 2022\"\ndescription: 'Svelte Summit Spring is coming... and page endpoints are here!'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nJust announced: [Svelte Summit Spring](https://www.sveltesummit.com/) will be taking place on April 30, 2022. The 5th Virtual Svelte Conference is [looking for speakers](https://www.sveltesummit.com/#speakers) and [sponsors](https://www.sveltesummit.com/sponsors)... so it's time to dust off those proposals!\n\nAlso, some long-requested features were added to SvelteKit this month... including page endpoints! This change in how the `load` function works makes it easier to fetch data required for basic pages, redirect from POST responses and handle 404s and other errors.\n\nMore on that and other new features and fixes below!\n\n## What's new in SvelteKit\n\n- The docs are now searchable and multipage with type definitions and hoverable code examples - Check them out at [kit.svelte.dev/docs](https://kit.svelte.dev/docs/)\n- Page endpoints significantly decrease the boilerplate needed when loading a page ([Issue](https://github.com/sveltejs/kit/issues/3532), [PR](https://github.com/sveltejs/kit/pull/3679), [Docs](https://kit.svelte.dev/docs/routing#endpoints-page-endpoints))\n- Application versioning and update detection support lets you determine what to do when a route fails to load after an app update ([Issue](https://github.com/sveltejs/kit/issues/87), [PR](https://github.com/sveltejs/kit/pull/3412), [Docs](https://kit.svelte.dev/docs/configuration#version))\n- A new option in `npm init svelte@next` will now set up Playwright automatically for testing ([PR](https://github.com/sveltejs/kit/pull/4056))\n\n**Breaking Changes**\n\n- The `target` option is no longer available. Instead, the `init` script hydrates its `parentNode` ([#3674](https://github.com/sveltejs/kit/pull/3674))\n- App-level types now live in the `App` namespace which allows you to type global types like `Stuff` or `Session` ([#3670](https://github.com/sveltejs/kit/pull/3670))\n- `JSONString` is now `JSONValue` ([#3683](https://github.com/sveltejs/kit/pull/3683))\n- `createIndexFiles` has been removed \u2014 it is now controlled by the `trailingSlash` option ([#3801](https://github.com/sveltejs/kit/pull/3801))\n- SvelteKit will no longer exclude root-relative external links from prerendering, which will cause 404s if these URLs are intended to be served by a separate app. Use a custom [`prerender.onError`](https://kit.svelte.dev/docs/configuration#prerender) handler if you need to ignore them ([#3826](https://github.com/sveltejs/kit/pull/3826))\n\n## New in Language Tools\n\n- Accessing properties in markups has been improved in the Svelte language tools ([105.12.0](https://github.com/sveltejs/language-tools/releases/tag/extensions-105.12.0)) - working around some known issues with autocomplete ([#538](https://github.com/sveltejs/language-tools/issues/538) / [#1302](https://github.com/sveltejs/language-tools/issues/1302))\n\n---\n",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-03-01-whats-new-in-svelte-march-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "16f64a36-a801-402d-8eb2-045f31259f5b-2",
    "text": "-105.12.0)) - working around some known issues with autocomplete ([#538](https://github.com/sveltejs/language-tools/issues/538) / [#1302](https://github.com/sveltejs/language-tools/issues/1302))\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [SvelteStorm](https://github.com/open-source-labs/SvelteStorm) is specifically tailored to provide all of the essential tools a Svelte developer needs to build a Svelte application\n- [Supachat](https://github.com/Lleweraf/supachat) is a real-time chat app using Svelte and Supabase\n- [Radicle](https://radicle.xyz/) is a peer-to-peer stack for building software together\n- [The Making Known](https://the-making-known.com/) is a narrated encounter with posters designed by the Nazi German government to communicate with the occupied nations of Belgium, France, and Luxembourg during the Second World War\n- [Svelte Kanban](https://github.com/V-Py/svelte-kanban) is a simple Svelte Kanban made in pure CSS\n- [fngrng](https://github.com/nvlgzr/fngrng) is a typing trainer focussed on accuracy over speed\n- [Generative grids](https://svelte.dev/repl/873988ce33db43f097c0ca69df57b3ac?version=3.46.4) is a neat little generative SVG grid in a Svelte REPL, with randomly generated color palettes and shapes\n- [LifeHash](https://github.com/BlockchainCommons/lifehash.info) is a method of hash visualization that creates beautiful, deterministic icons\n- [TypedWebhook.tools](https://typedwebhook.tools/) is a webhook testing tool for checking payloads, with automatic type generation\n- [Speedskating](https://github.com/spiegelgraphics/speedskating) is an animation widget to show olympic speedskating runs. Built with Svelte, D3 and regl\n- [Web tail](https://github.com/mishankov/web-tail) is a web application to view lines from file on local system or on remote server\n\nWant to work on a SvelteKit site with others? [Contribute to the Svelte Society site](https://github.com/svelte-society/sveltesociety.dev/issues)!\n\n**Learning Resources**\n\n_To Read_\n\n- [Svelte Components as Web Components](https://medium.com/@yesmeno/svelte-components-as-web-components-b400d1253504) by Matias Meno\n- [Simple Svelte Routing with Reactive URLs](https://bjornlu.com/blog/simple-svelte-routing-with-reactive-urls) by Bjorn Lu\n- [Leveling Up my Sveltekit / Sanity.io Blog Content with Featured Videos and Syntax Highlighting](https://ryanboddy.net/level-up-blog) by Ryan Boddy\n- [How This Blog Makes the Most of GitHub](https://paullj.github.io/posts/how-this-blog-makes-the-most-of-github/) by paullj\n- [FullStack JWT Auth: Introducing SvelteKit](https://dev.to/sirneij/fullstack-jwt-introducing-sveltekit-3jcn) by John Idogun\n- [Svelte-Cubed: Adding Motion to 3D Scenes](https://dev.to/alexwarnes/svelte-cubed-adding-motion-to-3d-scenes-51lo) by Alex Warnes\n- [Creating a RSS feed with Sanity and Svelte Kit](https://ghostdev.xyz/posts/creating-a-rss-feed-with-sanity-and-svelte-kit) by GHOST\n- [How to use Svelte's style directive](https://geoffrich.net/posts/style-directives/",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-03-01-whats-new-in-svelte-march-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b09dc874-6cb3-4ce4-bd12-109a788bbf7b-1",
    "text": "---\ntitle: \"What's new in Svelte: July 2021\"\ndescription: Keeping cool with fixes, TypeScript tooling and tonnes of new features\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nAs the northern hemisphere heats up, Svelte has stayed cool with lots of performance and bug fixes, better TypeScript support, and lots of new components & tools from around the ecosystem. Let's take a peek \ud83d\udc40\n\n## New in SvelteKit\n\n- `adapter-node` now precompresses assets using gzip & brotli ([#1693](https://github.com/sveltejs/kit/pull/1693))\n- Support for TypeScript transpilation has been added to the `svelte-kit package` tooling ([#1633](https://github.com/sveltejs/kit/pull/1633))\n- Improved caching defaults in `adapter-node` ([#1416](https://github.com/sveltejs/kit/pull/1416))\n- Allow configuring Rollup output options ([#1572](https://github.com/sveltejs/kit/pull/1572))\n- Fixed usage of SSL with HMR ([#1517](https://github.com/sveltejs/kit/pull/1517))\n\n## Features & bug fixes from around svelte/\\*\n\n- [Svelte 3.38.3](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3383) (released June 22) includes a bunch of performance and bug fixes - including hydration optimizations, `this` preservation in bubbled events, and more!\n- The latest language tools releases added support for prop renaming from outside of a component, PostCSS syntax grammar, and a `.d.ts` output target in `svelte2tsx` which can be used to create type definitions from Svelte files.\n- Also in language tools, some long-awaited experimental features for enhanced TypeScript support were added - including explicitly typing all possible component events or slots, and using generics. Have a look at [the RFC](https://github.com/sveltejs/rfcs/pull/38) for more details and leave feedback in [this issue](https://github.com/sveltejs/language-tools/issues/442) if you are using it.\n- `svelte-scroller` got some quality-of-life fixes in 2.0.7 - fixing an initial width bug and updating its `index` more conservatively\n\n## Coming soon to Svelte\n\n- Constants in markup ([RFC](https://github.com/sveltejs/rfcs/blob/master/text/0000-markup-constants.md)): Adds a new `{@const ...}` tag that defines a local constant ([PR](https://github.com/sveltejs/svelte/pull/6413))\n\n---\n\n## Community Showcase\n\n**Apps & Sites**\n\n- [SvelteThemes](https://sveltethemes.dev/) is a curated list of Svelte themes and templates built using svelte, sveltekit, elderjs, routify etc.\n- [Beatbump](https://github.com/snuffyDev/Beatbump) is an alternative frontend for YouTube Music created using Svelte/SvelteKit.\n- [Sveltuir](https://github.com/webspaceadam/sveltuir) is an app help you memorize the guitar fretboard\n\n**Educational Content**\n\n- [Svelte Radio: A Jolly Good Svelte Summer](https://share.transistor.fm/s/60880542) is a conversation about what's new in Svelte and a celebration of Svelte Radio's 1-year anniversary\n- [Class properties in Svelte](https://navillus.dev/blog/svelte-class-props) is a refresher on the power of `class` f",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-07-01-whats-new-in-svelte-july-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "b09dc874-6cb3-4ce4-bd12-109a788bbf7b-2",
    "text": " about what's new in Svelte and a celebration of Svelte Radio's 1-year anniversary\n- [Class properties in Svelte](https://navillus.dev/blog/svelte-class-props) is a refresher on the power of `class` for developers switching over to Svelte from React\n- [Sveltekit Tutorial for Beginners](https://www.youtube.com/playlist?list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms) is a video playlist for learning SvelteKit by WebJeda\n- [How To Cache Dynamic Pages On Demand With A Service Worker In SvelteKit](https://jochemvogel.medium.com/how-to-cache-dynamic-pages-on-demand-with-a-service-worker-in-sveltekit-4b4a7652583d) walks through the power of service workers when used within SvelteKit for on-demand caching\n- [Vue vs Svelte: Comparing Framework Internals](https://www.vuemastery.com/blog/vue-vs-svelte-comparing-framework-internals/) dives deep into the differences between Vue and Svelte from the inside out\n- [Setting up a development environment for SvelteKit with Docker and Docker Compose](https://jenyus.web.app/blog/2021-05-30-setting-up-a-development-environment-for-sveltekit-with-docker-and-compose) walks through how to use Docker to create reusable development environments, no matter what kind of device you run your code on\n- Scalable Scripts released three videos this month documenting how to deploy dockerized Svelte Apps to [AWS](https://youtu.be/VOs2Od5jYOc), [Azure](https://youtu.be/gdg4ne_uDm8) and [Google Cloud](https://youtu.be/_-uBb61Tikw)\n- [Render Katex with Svelte from zero to hero](https://www.youtube.com/watch?v=euowJs9CblA) demonstrates how to implement Katex in a Svelte project\n- [Using Custom Elements in Svelte](https://css-tricks.com/using-custom-elements-in-svelte/) shows some of the quirks to look out for when using custom elements in a Svelte site\n\n**Libraries, Tools & Components**\n\n- [svelte-pipeline](https://github.com/novacbn/svelte-pipeline) provides custom JavaScript contexts and the Svelte Compiler as Svelte Stores, for REPLs, Editors, etc.\n- [Sveltotron](https://github.com/Salemmous/sveltotron) is an Electron-based app made to inspect your Svelte app\n- [svelte-qr-reader-writer](https://github.com/pleasemarkdarkly/svelte-qr-reader-writer) is a Svelte component that helps read and write data from QR codes\n- [svelte-stack-router](https://www.npmjs.com/package/svelte-stack-router) Aims to make Svelte apps feel more native by routing with Stacks\n- [svelte-typed-context](https://www.npmjs.com/package/svelte-typed-context) provides an interface which, when provided to `getContext` or `setContext`, allows for stricter types\n- [svelte-modals](https://svelte-modals.mattjennings.io/) is a simple, flexible, zero-dependency modal manager for Svelte\n\n**Want to contribute a component? Interested in helping make Svelte's presence on the web better?** Submit a Component to the Svelte Society site by making [a PR to this file](https://github.com/svelte-society/sveltesociety-2021/blob/main/src/routes/components/components.json) or check out [the list ",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2021-07-01-whats-new-in-svelte-july-2021.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "46879c3e-467e-4584-9278-884f85b864a6-1",
    "text": "---\ntitle: \"What's new in Svelte: November 2022\"\ndescription: 'Better forms, routes and inline styles across SvelteKit and Svelte'\nauthor: Dani Sandoval\nauthorURL: https://dreamindani.com\n---\n\nIt's been a busy October for the Svelte community. `use:enhance` and Advanced Routes got some great improvements in SvelteKit while the Svelte compiler released a minor version to improve the day-to-day dev experience.\n\nThere's also a _huge_ showcase to cover... so let's jump in!\n\n## What's new in SvelteKit\n\n- The new `update` method for `use:enhance` lets you easily get back the default form behavior while augmenting it with your own logic ([docs](https://kit.svelte.dev/docs/form-actions#progressive-enhancement-use-enhance), [#7083](https://github.com/sveltejs/kit/pull/7083) and [#7326](https://github.com/sveltejs/kit/pull/7326))\n- `[[optional]]` parameters are now available for routing ([docs](https://kit.svelte.dev/docs/advanced-routing#optional-parameters), [#7051](https://github.com/sveltejs/kit/pull/7051))\n- `goto` now has `invalidateAll` to (re-)run all `load` functions belonging to the new active page ([docs](https://kit.svelte.dev/docs/modules#$app-navigation-goto), [#7407](https://github.com/sveltejs/kit/pull/7407))\n- `config.kit.paths.base` is now used in adapters looking for static assets - fixing 404 issues across `adapter-netlify`, `adapter-vercel`, `adapter-cloudflare`, and `adapter-cloudflare-workers` ([#4448](https://github.com/sveltejs/kit/pull/4448))\n\n**Breaking changes:**\n\n- Errors will now be thrown when routes conflict ([#7051](https://github.com/sveltejs/kit/pull/7051))\n- The global `fetch` override has been removed when prerendering ([#7318](https://github.com/sveltejs/kit/pull/7318))\n- Route IDs have been prefixed with `/` ([#7338](https://github.com/sveltejs/kit/pull/7338))\n\n## Svelte changes\n\n- New accessibility warnings, `a11y-click-events-have-key-events` and `a11y-no-noninteractive-tabindex`, will now warn when your components lack required key events or tabindex. While `a11y-role-has-required-aria-props` will no longer warn when elements match their semantic role (**3.51.0**)\n- `--style-props` are now supported on `<svelte:component>` and `<svg>` (**3.51.0**, Component Example: [Before](https://svelte.dev/repl/48984f20503f4959b70f24f4130d164b?version=3.47.0) and [After](https://svelte.dev/repl/48984f20503f4959b70f24f4130d164b?version=3.51.0), SVG Example: [Before](https://svelte.dev/repl/b7a3f94255914044b35462234ccaea43?version=3.50.0) and [After](https://svelte.dev/repl/b7a3f94255914044b35462234ccaea43?version=3.51.0))\n- \"nullish\" values for component event handlers are now supported (**3.51.0**, [Example](https://svelte.dev/repl/9228022922af4c76af68ce42349ccbf9?version=3.51.0))\n- Scoped styles can now be applied to `<svelte:element>` (**3.51.0**, [Example](https://svelte.dev/repl/23d982fc6f4f4f06a6aa227860fa2d84?version=3.51.0))\n- You can now use `important` in inline style tags: `style:foo|important` (**3.52.0**, [#7365](ht",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-11-01-whats-new-in-svelte-november-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "46879c3e-467e-4584-9278-884f85b864a6-2",
    "text": "ent>` (**3.51.0**, [Example](https://svelte.dev/repl/23d982fc6f4f4f06a6aa227860fa2d84?version=3.51.0))\n- You can now use `important` in inline style tags: `style:foo|important` (**3.52.0**, [#7365](https://github.com/sveltejs/svelte/issues/7365))\n- A warning will now be thrown when using `<a target=\"_blank\">` without `rel=\"noreferrer\"` (**3.52.0**, [#6188](https://github.com/sveltejs/svelte/issues/6188))\n\nTom Smykowski also released a great summary of [all the changes in 3.52.0](https://tomaszs2.medium.com/svelte-3-52-0-improves-dev-experience-45f8c460bb96)! For all the changes to the Svelte compiler, including upcoming changes, check out the [CHANGELOG](https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md).\n\n---\n\n## Community Showcase\n\n**Apps & Sites built with Svelte**\n\n- [AttendZen](https://www.attendzen.io/) is an event management and marketing platform for in-person, virtual or hybrid events\n- [Gram Jam](https://gramjam.app/) is a challenging daily word game using SvelteKit\n- [Collabwriting](https://collabwriting.com/) is an actionable knowledge base for your team\n- [Dazzle](https://dazzlega.me/) is a Puzzle Game made with Svelte & DallE\n- [Figma Autoname plugin](https://github.com/Hugo-Dz/figma_autoname_client_app) automatically names your Figma layers in one click\n- [DECK](https://github.com/sfx101/deck) is powerful and high performant local web development studio for MacOS, Ubuntu and Windows\n- [Asm editor](https://github.com/Specy/asm-editor) is a webapp to write and run m68k assembly code\n- [Nucleus](https://github.com/mellobacon/Nucleus) is a text editor featuring a clean and easy to use user interface inspired by Visual Studio Code, Atom, Fleet, and others\n- [Observer](https://github.com/diamonc/observer) is a frontend for Arth Panel, an open-source & self-hosted minecraft server panel\n- [.PLAN](https://plan.lodzero.com/) is a cloud-based notetaking app with markdown and section support\n- [Stablecog](https://github.com/yekta/stablecog) is a simple, free & open source AI image generator\n- [FreeSpeech AAC](https://github.com/merkie/freespeech) is a free and open-source assistive communication app written in TypeScript\n- [sqrdoff](https://sqrdoff.cubieverse.co/) is a dots and boxes to enjoy playing with friends\n- [itty](https://launch.itty-sh.pages.dev/) is a fresh take on the traditional link-shortener\n- [splits](https://splits.best/) lets you track your splits, calculate your race pace, become a better athlete\n- [Weaver](https://jrende.xyz/weaver/) is an application for creating [weave drafts](https://www.gistyarn.com/blogs/how-to-weave/how-to-read-a-weaving-draft)\n\n**Learning Resources**\n\n_To Watch_\n\n- [Starting With Svelte - Brittney Postma](https://www.youtube.com/watch?v=pdKJzrPA0DY) by fitcevents\n- [Learn Svelte from scratch with Geoff Rich: A Svelte tutorial](https://www.youtube.com/watch?v=QoR0AZ-Rov8) by Kelvin Omereshone\n- [How To Connect to MongoDB in Svelte Kit](https://www.youtube.com/watch?v=gwktlvFHLMA) by LevelUpT",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-11-01-whats-new-in-svelte-november-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "46879c3e-467e-4584-9278-884f85b864a6-3",
    "text": "th Geoff Rich: A Svelte tutorial](https://www.youtube.com/watch?v=QoR0AZ-Rov8) by Kelvin Omereshone\n- [How To Connect to MongoDB in Svelte Kit](https://www.youtube.com/watch?v=gwktlvFHLMA) by LevelUpTuts\n- [SvelteKit Authentication Using Cookies](https://www.youtube.com/watch?v=E3VG-dLCRUk), [Make A Typing Game With Svelte](https://www.youtube.com/watch?v=kMz_Ba_OF2w) and [SvelteKit Tailwind CSS Setup With Automatic Class Sorting](https://www.youtube.com/watch?v=J_G_xP0chog) by Joy of Code\n- [Authentication with SvelteKit & PocketBase](https://www.youtube.com/watch?v=doDKaKDvB30) and [Form Actions in SvelteKit (+page)](https://www.youtube.com/watch?v=52nXUwQWeKI) by Huntabyte\n- [Sybil - Episode 1 - Rust knowledge management with SurrealDB](https://www.youtube.com/watch?v=eC7IePI5rIk) by Raphael Darley\n\n_To Read_\n\n- [4 things I miss from Svelte after working in React](https://geoffrich.net/posts/4-things-i-miss-svelte/) and [Create dynamic social card images with Svelte components](https://geoffrich.net/posts/svelte-social-image/) by Geoff Rich\n- [First-class Vite support in Storybook 7.0](https://storybook.js.org/blog/first-class-vite-support-in-storybook/) (Svelte and SvelteKit included) by Ian VanSchooten\n- [Better Svelte support is coming to WebStorm](https://blog.jetbrains.com/webstorm/2022/09/webstorm-2022-3-eap1/#information_regarding_svelte_support) from JetBrains\n- [Dark Mode](https://pyronaur.com/dark-mode/) Toggle by pyronaur\n- [HeadlessUI Components with Svelte](https://www.captaincodeman.com/headlessui-components-with-svelte) by Captain Codeman\n- [Using Sequelize with SvelteKit](https://cherrific.io/0xedB00816FB204b4CD9bCb45FF2EF693E99723484/story/23) by MetaZebre\n- [Implementing Maintenance mode on a SvelteKit site](https://blog.encodeart.dev/implementing-maintenance-mode-on-a-sveltekit-site) by Andreas S\u00f6derlund\n- [ActionStore: Real-time Svelte stores for Rails](https://dev.to/buhrmi/actionstore-real-time-svelte-stores-for-rails-4jhg) by Stefan Buhrmester\n- [Svelte CSS Image Slider: with Bouncy Overscroll](https://rodneylab.com/svelte-css-image-slider/)\u00a0and [SvelteKit Local Edge Functions: Edge on Localhost](https://rodneylab.com/sveltekit-local-edge-functions/) by Rodney Lab\n- [Creating a Svelte Tabs component with Slot props](https://blog.openreplay.com/creating-a-svelte-tabs-component-with-slot-props/) by Shinichi Okada\n- [Sky Cart: An Open Source, cloud-agnostic shopping cart using Stripe Checkout](https://dev.to/stripe/sky-cart-an-open-source-cloud-agnostic-shopping-cart-using-stripe-checkout-o5k) by Mike Bifulco for Stripe\n\n**Libraries, Tools & Components**\n\n- [Threlte](https://threlte.xyz/) is a component library for Svelte to build and render three.js scenes declaratively and state-driven in Svelte apps. It's being featured again to highlight the new \"Playground\" button in its examples\n- [Svelte Turnstile](https://github.com/ghostdevv/svelte-turnstile) is a library to integrate Cloudflare's Turnstile (a new CAPTCHA alternati",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-11-01-whats-new-in-svelte-november-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "46879c3e-467e-4584-9278-884f85b864a6-4",
    "text": "n to highlight the new \"Playground\" button in its examples\n- [Svelte Turnstile](https://github.com/ghostdevv/svelte-turnstile) is a library to integrate Cloudflare's Turnstile (a new CAPTCHA alternative) into a Svelte app\n- [ActionStore](https://github.com/buhrmi/actionstore) allows you to push data directly into Svelte stores via ActionCable\n- [SvelteKit + `<is-land>`](https://sveltekit-is-land.vercel.app/) is an experiment with partial hydration in SvelteKit using `@11ty/is-land`\n- [Svelte Color Select](https://github.com/CaptainCodeman/svelte-color-select) is an Okhsv Color Selection component for Svelte using OKLab perceptual colorspace\n- [svelte-awesome-color-picker](https://github.com/Ennoriel/svelte-awesome-color-picker) is a highly customizable color picker component library\n- [rx-svelte-forms](https://www.npmjs.com/package/rx-svelte-forms) creates reactive Svelte forms inspired by Angular reactive forms\n- [svelte-wc-bind](https://www.npmjs.com/package/svelte-wc-bind) enables two way data binding in Svelte web components\n- [svelte-preprocess-style-child-component](https://github.com/valterkraemer/svelte-preprocess-style-child-component) allows you to style elements inside a child component using similar syntax as CSS Shadow Parts\n- [unplugin-svelte-components](https://www.npmjs.com/package/unplugin-svelte-components) allows for on-demand components auto importing for Svelte\n- [sveltekit-search-params](https://github.com/paoloricciuti/sveltekit-search-params) aims to be the fastest way to read AND WRITE from query search params in SvelteKit\n- [svelte-crop-window](https://github.com/sabine/svelte-crop-window) is a crop window component for images and videos that supports touch gestures (pinch zoom, rotate, pan), as well as mousewheel zoom, mouse-dragging the image, and rotating on right mouse button\n- [Open Graph Image Generation](https://github.com/etherCorps/sveltekit-og) lets you generate open graph images dynamically from HTML/CSS without a browser in SvelteKit\n- [Svelte Tap Hold](https://github.com/binsarjr/svelte-taphold) is a minimalistic tap and hold component for Svelte/SvelteKit\n- [svelte-copy](https://github.com/ghostdevv/svelte-copy)'s new version lets you customize the events that cause text to be copied to the clipboard\n\n_UI Kits, Integrations and Starters_\n\n- [SvelteKit Statiko](https://github.com/ivodolenc/sveltekit-statiko) is a multi-featured assistant for SvelteKit static projects\n- [Svelte-TailwindCSS UI (STWUI)](https://github.com/N00nDay/stwui) is a Tailwind-based UI that is currently in pre-release beta\n- [KitBase](https://github.com/kevmodrome/kitbase) is a starter template for SvelteKit and PocketBase\n- [UnoCSS Vite Plugin (svelte-scoped)](https://github.com/unocss/unocss/tree/main/examples/sveltekit-scoped) is a scoped-CSS utility for Vite/SvelteKit\n- [SvelteKit Auth App](https://github.com/fabiorodriguesroque/sveltekit_auth_app) is an example of how we can create an authentication system with SvelteKit using JsonW",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2022-11-01-whats-new-in-svelte-november-2022.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "96b639c6-d25d-400f-a4a1-72ec25e87f07-1",
    "text": "---\ntitle: \"Announcing Svelte 4\"\ndescription: 'Updated performance, developer experience, and site'\nauthor: The Svelte team\nauthorURL: https://svelte.dev/\n---\n\nAfter months in the making, we're excited to announce the stable release of Svelte 4.\n\nTime flies - Svelte 3 was released more than four years ago! In JavaScript-framework-time, that's eons. Svelte\u2019s freshness has persisted throughout, but Node.js and browser APIs have evolved during that time and today we\u2019re updating Svelte to take advantage of some of these improvements. Svelte 4 is mainly a maintenance release, bumping minimum version requirements and tightening up the design in specific areas. It sets the stage for the next generation of Svelte to be released as Svelte 5 - we think you\u2019ll love it.\n\nIf you haven't tried Svelte yet, take it for a spin in our [interactive tutorial](https://learn.svelte.dev/), on [StackBlitz](https://sveltekit.new/), or locally with `npm create svelte@latest`. Svelte lets you easily put together web UIs leveraging the power of HTML, CSS, JS, and the Svelte compiler. Watch [Svelte Radio Live](https://www.youtube.com/watch?v=72TIVhRtyWE) to learn more about this release.\n\n## What's new\n\n### Performance\n\nThis release results in smaller and faster hydration code. To see the impact, SvelteKit users can see their compiled output shrink in size by examining the `.svelte-kit/output/client/_app/immutable/nodes` folder. For example, on [kit.svelte.dev](https://kit.svelte.dev) the JS generated across the whole site was reduced in size by 12.7% (126.3 kB to 110.2 kB).\n\nSvelte 4 reduces the Svelte package size by nearly 75% (10.6 MB down to 2.8 MB), which means less waiting on `npm install`. This improvement will be especially noticeable for users who are loading our interactive learning experience on [learn.svelte.dev](https://learn.svelte.dev) for the first time, users of the Svelte REPL, and users with limited connectivity. The majority of the remaining package size is eslint support, which necessitates distributing a CJS build, and once [the eslint rewrite](https://github.com/eslint/eslint/discussions/16557) is completed the Svelte package size can drop by over another 50%.\n\nThe number of dependencies in Svelte has been greatly reduced from 61 down to 16. This means faster downloads for our users as well as less susceptibility to supply chain attacks. We also slightly reduced the number of dependencies in the latest versions of SvelteKit as well.\n\n### Developer experience\n\nSvelte 4 makes the Svelte authoring experience more intuitive and consistent: `|local` is now the default for transitions to avoid animations blocking page transitions, preprocessors are now easier to write, and multiple fixes make CSP easier to set up and use.\n\nFor users of web components, the largest change is an overhaul of the way you use Svelte to author custom elements. By changing the way they are generated, a whole class of bugs and inconsistencies was eliminated.\n\nFinally, we\u2019ve also mad",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-22-svelte-4.md",
    "created_at": "2021-01-01T12:00:00Z"
  },
  {
    "id": "96b639c6-d25d-400f-a4a1-72ec25e87f07-2",
    "text": "st change is an overhaul of the way you use Svelte to author custom elements. By changing the way they are generated, a whole class of bugs and inconsistencies was eliminated.\n\nFinally, we\u2019ve also made several [improvements to the IDE authoring experience](https://github.com/sveltejs/svelte/pull/8702):\ncmd+click in svelte modules now takes you to the implementation rather than a `.d.ts` file\nimports from `svelte/internal` are now hidden and will not clutter autocomplete suggestions\nauto-imports now work more reliably\n\n### Updated site, docs, and tutorial\n\nThe official [svelte.dev](https://svelte.dev) site has gotten an overhaul. It\u2019s now split into multiple pages with improved mobile nav, overhauled typescript docs, dark mode, and an enhanced REPL. The SvelteKit site is also being updated to match. And we\u2019ve updated all the tutorial links to point to our new [learn.svelte.dev](https://learn.svelte.dev) experience. The old tutorial remains available for users of Safari 16.3 and earlier.\n\nStay tuned for a more in-depth blog post about all the site changes in the coming days!\n\n## Migrating\n\nMost apps and libraries that are compatible with Svelte 3 should be compatible with Svelte 4. Library authors will need to update the version range to include Svelte 4 if `svelte` is specified in the `peerDependencies`. For application authors, the most common change required will be updating tooling to meet the new minimum version requirements such as Node.js 16. Many other migration steps can be handled with `npx svelte-migrate@latest svelte-4`.\n\nRead the [migration guide](/docs/v4-migration-guide) for full details.\n\n## Svelte 5: the next generation of Svelte\n\nSvelte 5 will be a rewrite of the Svelte compiler and runtime. Svelte 4 was mainly about setting the ground for these future improvements by adopting modern tooling and dropping support for some legacy versions of various technologies such as older bundlers. These changes will help us in a number of ways such as being able to more easily compare the Svelte 5 and Svelte 4 codebases and being able to run the existing tests against the new implementation. Svelte 5 will bring major new features and performance improvements to Svelte. The changes are still baking and not quite ready to share yet, but stay tuned!\n\n## Changelog\n\nSee the full list of changes in the [changelog](https://github.com/sveltejs/svelte/blob/master/packages/svelte/CHANGELOG.md).\n\n## Acknowledgements\n\nFirst and foremost, thank you to all of the many Svelte maintainers and contributors who made this release possible. Developers contributing multiple PRs to this release were [@dummdidumm](https://github.com/dummdidumm), [@gtm-nayan](https://github.com/gtm-nayan), [@benmccann](https://github.com/benmccann), [@tanhauhau](https://github.com/tanhauhau), [@Karlinator](https://github.com/Karlinator), and [@ngtr6788](https://github.com/ngtr6788). Also, thank you to the many community members who donated to [the Svelte OpenCollective](https://openco",
    "source": "file",
    "ext": "md",
    "type": "text",
    "source_id": "data/sveltejs/svelte/documentation/blog/2023-06-22-svelte-4.md",
    "created_at": "2021-01-01T12:00:00Z"
  }
]